
Traffic light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a88  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08001b94  08001b94  00002b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c00  08001c00  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001c00  08001c00  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c00  08001c00  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c00  08001c00  00002c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001c04  08001c04  00002c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001c08  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001c14  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001c14  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003299  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010b4  00000000  00000000  000062ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000448  00000000  00000000  00007388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000300  00000000  00000000  000077d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001599b  00000000  00000000  00007ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000058c3  00000000  00000000  0001d46b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079dfc  00000000  00000000  00022d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009cb2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e88  00000000  00000000  0009cb70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  0009d9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001b7c 	.word	0x08001b7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001b7c 	.word	0x08001b7c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f95a 	bl	8000408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f858 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f892 	bl	8000280 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
   LCD16X2_Init(MyLCD);
 800015c:	2000      	movs	r0, #0
 800015e:	f001 fa4f 	bl	8001600 <LCD16X2_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    HAL_GPIO_TogglePin(GPIOA, RED_LED);
 8000162:	2108      	movs	r1, #8
 8000164:	4824      	ldr	r0, [pc, #144]	@ (80001f8 <main+0xac>)
 8000166:	f000 fc4d 	bl	8000a04 <HAL_GPIO_TogglePin>
    LCD16X2_Clear(MyLCD);
 800016a:	2000      	movs	r0, #0
 800016c:	f001 f9c8 	bl	8001500 <LCD16X2_Clear>
    LCD16X2_Set_Cursor(MyLCD,1,1);
 8000170:	2201      	movs	r2, #1
 8000172:	2101      	movs	r1, #1
 8000174:	2000      	movs	r0, #0
 8000176:	f001 fa03 	bl	8001580 <LCD16X2_Set_Cursor>
    LCD16X2_Write_String(MyLCD,"RED");
 800017a:	4920      	ldr	r1, [pc, #128]	@ (80001fc <main+0xb0>)
 800017c:	2000      	movs	r0, #0
 800017e:	f001 fcb1 	bl	8001ae4 <LCD16X2_Write_String>
    HAL_Delay(1000);
 8000182:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000186:	f000 f9a1 	bl	80004cc <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, RED_LED);
 800018a:	2108      	movs	r1, #8
 800018c:	481a      	ldr	r0, [pc, #104]	@ (80001f8 <main+0xac>)
 800018e:	f000 fc39 	bl	8000a04 <HAL_GPIO_TogglePin>


    HAL_GPIO_TogglePin(GPIOA, YELLOW_LED);
 8000192:	2110      	movs	r1, #16
 8000194:	4818      	ldr	r0, [pc, #96]	@ (80001f8 <main+0xac>)
 8000196:	f000 fc35 	bl	8000a04 <HAL_GPIO_TogglePin>
    LCD16X2_Clear(MyLCD);
 800019a:	2000      	movs	r0, #0
 800019c:	f001 f9b0 	bl	8001500 <LCD16X2_Clear>
    LCD16X2_Set_Cursor(MyLCD,1,1);
 80001a0:	2201      	movs	r2, #1
 80001a2:	2101      	movs	r1, #1
 80001a4:	2000      	movs	r0, #0
 80001a6:	f001 f9eb 	bl	8001580 <LCD16X2_Set_Cursor>
    LCD16X2_Write_String(MyLCD,"YELLOW");
 80001aa:	4915      	ldr	r1, [pc, #84]	@ (8000200 <main+0xb4>)
 80001ac:	2000      	movs	r0, #0
 80001ae:	f001 fc99 	bl	8001ae4 <LCD16X2_Write_String>
    HAL_Delay(1000);
 80001b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001b6:	f000 f989 	bl	80004cc <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, YELLOW_LED);
 80001ba:	2110      	movs	r1, #16
 80001bc:	480e      	ldr	r0, [pc, #56]	@ (80001f8 <main+0xac>)
 80001be:	f000 fc21 	bl	8000a04 <HAL_GPIO_TogglePin>


    HAL_GPIO_TogglePin(GPIOA, GREEN_LED);
 80001c2:	2120      	movs	r1, #32
 80001c4:	480c      	ldr	r0, [pc, #48]	@ (80001f8 <main+0xac>)
 80001c6:	f000 fc1d 	bl	8000a04 <HAL_GPIO_TogglePin>
    LCD16X2_Clear(MyLCD);
 80001ca:	2000      	movs	r0, #0
 80001cc:	f001 f998 	bl	8001500 <LCD16X2_Clear>
    LCD16X2_Set_Cursor(MyLCD,1,1);
 80001d0:	2201      	movs	r2, #1
 80001d2:	2101      	movs	r1, #1
 80001d4:	2000      	movs	r0, #0
 80001d6:	f001 f9d3 	bl	8001580 <LCD16X2_Set_Cursor>
    LCD16X2_Write_String(MyLCD,"GREEN");
 80001da:	490a      	ldr	r1, [pc, #40]	@ (8000204 <main+0xb8>)
 80001dc:	2000      	movs	r0, #0
 80001de:	f001 fc81 	bl	8001ae4 <LCD16X2_Write_String>
    HAL_Delay(1000);
 80001e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001e6:	f000 f971 	bl	80004cc <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GREEN_LED);
 80001ea:	2120      	movs	r1, #32
 80001ec:	4802      	ldr	r0, [pc, #8]	@ (80001f8 <main+0xac>)
 80001ee:	f000 fc09 	bl	8000a04 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(GPIOA, RED_LED);
 80001f2:	bf00      	nop
 80001f4:	e7b5      	b.n	8000162 <main+0x16>
 80001f6:	bf00      	nop
 80001f8:	40010800 	.word	0x40010800
 80001fc:	08001b94 	.word	0x08001b94
 8000200:	08001b98 	.word	0x08001b98
 8000204:	08001ba0 	.word	0x08001ba0

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b090      	sub	sp, #64	@ 0x40
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0318 	add.w	r3, r7, #24
 8000212:	2228      	movs	r2, #40	@ 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f001 fc84 	bl	8001b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022a:	2302      	movs	r3, #2
 800022c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022e:	2301      	movs	r3, #1
 8000230:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000232:	2310      	movs	r3, #16
 8000234:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000236:	2300      	movs	r3, #0
 8000238:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023a:	f107 0318 	add.w	r3, r7, #24
 800023e:	4618      	mov	r0, r3
 8000240:	f000 fbfa 	bl	8000a38 <HAL_RCC_OscConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800024a:	f000 f84d 	bl	80002e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024e:	230f      	movs	r3, #15
 8000250:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000252:	2300      	movs	r3, #0
 8000254:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f000 fe68 	bl	8000f3c <HAL_RCC_ClockConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000272:	f000 f839 	bl	80002e8 <Error_Handler>
  }
}
 8000276:	bf00      	nop
 8000278:	3740      	adds	r7, #64	@ 0x40
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
	...

08000280 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000286:	f107 0308 	add.w	r3, r7, #8
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000294:	4b12      	ldr	r3, [pc, #72]	@ (80002e0 <MX_GPIO_Init+0x60>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a11      	ldr	r2, [pc, #68]	@ (80002e0 <MX_GPIO_Init+0x60>)
 800029a:	f043 0304 	orr.w	r3, r3, #4
 800029e:	6193      	str	r3, [r2, #24]
 80002a0:	4b0f      	ldr	r3, [pc, #60]	@ (80002e0 <MX_GPIO_Init+0x60>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	f003 0304 	and.w	r3, r3, #4
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Red_led_Pin|Yellow_Led_Pin|Green_led_Pin|E_Pin
 80002ac:	2200      	movs	r2, #0
 80002ae:	f643 7138 	movw	r1, #16184	@ 0x3f38
 80002b2:	480c      	ldr	r0, [pc, #48]	@ (80002e4 <MX_GPIO_Init+0x64>)
 80002b4:	f000 fb8e 	bl	80009d4 <HAL_GPIO_WritePin>
                          |D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Red_led_Pin Yellow_Led_Pin Green_led_Pin E_Pin
                           RS_Pin D7_Pin D6_Pin D5_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = Red_led_Pin|Yellow_Led_Pin|Green_led_Pin|E_Pin
 80002b8:	f643 7338 	movw	r3, #16184	@ 0x3f38
 80002bc:	60bb      	str	r3, [r7, #8]
                          |RS_Pin|D7_Pin|D6_Pin|D5_Pin
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002be:	2301      	movs	r3, #1
 80002c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c2:	2300      	movs	r3, #0
 80002c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c6:	2302      	movs	r3, #2
 80002c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ca:	f107 0308 	add.w	r3, r7, #8
 80002ce:	4619      	mov	r1, r3
 80002d0:	4804      	ldr	r0, [pc, #16]	@ (80002e4 <MX_GPIO_Init+0x64>)
 80002d2:	f000 fa03 	bl	80006dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002d6:	bf00      	nop
 80002d8:	3718      	adds	r7, #24
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40021000 	.word	0x40021000
 80002e4:	40010800 	.word	0x40010800

080002e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002ec:	b672      	cpsid	i
}
 80002ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002f0:	bf00      	nop
 80002f2:	e7fd      	b.n	80002f0 <Error_Handler+0x8>

080002f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002fa:	4b15      	ldr	r3, [pc, #84]	@ (8000350 <HAL_MspInit+0x5c>)
 80002fc:	699b      	ldr	r3, [r3, #24]
 80002fe:	4a14      	ldr	r2, [pc, #80]	@ (8000350 <HAL_MspInit+0x5c>)
 8000300:	f043 0301 	orr.w	r3, r3, #1
 8000304:	6193      	str	r3, [r2, #24]
 8000306:	4b12      	ldr	r3, [pc, #72]	@ (8000350 <HAL_MspInit+0x5c>)
 8000308:	699b      	ldr	r3, [r3, #24]
 800030a:	f003 0301 	and.w	r3, r3, #1
 800030e:	60bb      	str	r3, [r7, #8]
 8000310:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000312:	4b0f      	ldr	r3, [pc, #60]	@ (8000350 <HAL_MspInit+0x5c>)
 8000314:	69db      	ldr	r3, [r3, #28]
 8000316:	4a0e      	ldr	r2, [pc, #56]	@ (8000350 <HAL_MspInit+0x5c>)
 8000318:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800031c:	61d3      	str	r3, [r2, #28]
 800031e:	4b0c      	ldr	r3, [pc, #48]	@ (8000350 <HAL_MspInit+0x5c>)
 8000320:	69db      	ldr	r3, [r3, #28]
 8000322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800032a:	4b0a      	ldr	r3, [pc, #40]	@ (8000354 <HAL_MspInit+0x60>)
 800032c:	685b      	ldr	r3, [r3, #4]
 800032e:	60fb      	str	r3, [r7, #12]
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000336:	60fb      	str	r3, [r7, #12]
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	4a04      	ldr	r2, [pc, #16]	@ (8000354 <HAL_MspInit+0x60>)
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000346:	bf00      	nop
 8000348:	3714      	adds	r7, #20
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr
 8000350:	40021000 	.word	0x40021000
 8000354:	40010000 	.word	0x40010000

08000358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800035c:	bf00      	nop
 800035e:	e7fd      	b.n	800035c <NMI_Handler+0x4>

08000360 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000364:	bf00      	nop
 8000366:	e7fd      	b.n	8000364 <HardFault_Handler+0x4>

08000368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800036c:	bf00      	nop
 800036e:	e7fd      	b.n	800036c <MemManage_Handler+0x4>

08000370 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000374:	bf00      	nop
 8000376:	e7fd      	b.n	8000374 <BusFault_Handler+0x4>

08000378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800037c:	bf00      	nop
 800037e:	e7fd      	b.n	800037c <UsageFault_Handler+0x4>

08000380 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr

0800038c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr

08000398 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800039c:	bf00      	nop
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr

080003a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003a8:	f000 f874 	bl	8000494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr

080003bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003bc:	f7ff fff8 	bl	80003b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c0:	480b      	ldr	r0, [pc, #44]	@ (80003f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80003c2:	490c      	ldr	r1, [pc, #48]	@ (80003f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80003c4:	4a0c      	ldr	r2, [pc, #48]	@ (80003f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80003c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003c8:	e002      	b.n	80003d0 <LoopCopyDataInit>

080003ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ce:	3304      	adds	r3, #4

080003d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d4:	d3f9      	bcc.n	80003ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003d6:	4a09      	ldr	r2, [pc, #36]	@ (80003fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80003d8:	4c09      	ldr	r4, [pc, #36]	@ (8000400 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003dc:	e001      	b.n	80003e2 <LoopFillZerobss>

080003de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e0:	3204      	adds	r2, #4

080003e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e4:	d3fb      	bcc.n	80003de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003e6:	f001 fba5 	bl	8001b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ea:	f7ff feaf 	bl	800014c <main>
  bx lr
 80003ee:	4770      	bx	lr
  ldr r0, =_sdata
 80003f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80003f8:	08001c08 	.word	0x08001c08
  ldr r2, =_sbss
 80003fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000400:	2000002c 	.word	0x2000002c

08000404 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000404:	e7fe      	b.n	8000404 <ADC1_2_IRQHandler>
	...

08000408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800040c:	4b08      	ldr	r3, [pc, #32]	@ (8000430 <HAL_Init+0x28>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a07      	ldr	r2, [pc, #28]	@ (8000430 <HAL_Init+0x28>)
 8000412:	f043 0310 	orr.w	r3, r3, #16
 8000416:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000418:	2003      	movs	r0, #3
 800041a:	f000 f92b 	bl	8000674 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800041e:	200f      	movs	r0, #15
 8000420:	f000 f808 	bl	8000434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000424:	f7ff ff66 	bl	80002f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000428:	2300      	movs	r3, #0
}
 800042a:	4618      	mov	r0, r3
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40022000 	.word	0x40022000

08000434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800043c:	4b12      	ldr	r3, [pc, #72]	@ (8000488 <HAL_InitTick+0x54>)
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	4b12      	ldr	r3, [pc, #72]	@ (800048c <HAL_InitTick+0x58>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	4619      	mov	r1, r3
 8000446:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800044a:	fbb3 f3f1 	udiv	r3, r3, r1
 800044e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000452:	4618      	mov	r0, r3
 8000454:	f000 f935 	bl	80006c2 <HAL_SYSTICK_Config>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800045e:	2301      	movs	r3, #1
 8000460:	e00e      	b.n	8000480 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	2b0f      	cmp	r3, #15
 8000466:	d80a      	bhi.n	800047e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000468:	2200      	movs	r2, #0
 800046a:	6879      	ldr	r1, [r7, #4]
 800046c:	f04f 30ff 	mov.w	r0, #4294967295
 8000470:	f000 f90b 	bl	800068a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000474:	4a06      	ldr	r2, [pc, #24]	@ (8000490 <HAL_InitTick+0x5c>)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800047a:	2300      	movs	r3, #0
 800047c:	e000      	b.n	8000480 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800047e:	2301      	movs	r3, #1
}
 8000480:	4618      	mov	r0, r3
 8000482:	3708      	adds	r7, #8
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	20000000 	.word	0x20000000
 800048c:	20000008 	.word	0x20000008
 8000490:	20000004 	.word	0x20000004

08000494 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000498:	4b05      	ldr	r3, [pc, #20]	@ (80004b0 <HAL_IncTick+0x1c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	461a      	mov	r2, r3
 800049e:	4b05      	ldr	r3, [pc, #20]	@ (80004b4 <HAL_IncTick+0x20>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4413      	add	r3, r2
 80004a4:	4a03      	ldr	r2, [pc, #12]	@ (80004b4 <HAL_IncTick+0x20>)
 80004a6:	6013      	str	r3, [r2, #0]
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	20000008 	.word	0x20000008
 80004b4:	20000028 	.word	0x20000028

080004b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  return uwTick;
 80004bc:	4b02      	ldr	r3, [pc, #8]	@ (80004c8 <HAL_GetTick+0x10>)
 80004be:	681b      	ldr	r3, [r3, #0]
}
 80004c0:	4618      	mov	r0, r3
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr
 80004c8:	20000028 	.word	0x20000028

080004cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004d4:	f7ff fff0 	bl	80004b8 <HAL_GetTick>
 80004d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004e4:	d005      	beq.n	80004f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80004e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000510 <HAL_Delay+0x44>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	461a      	mov	r2, r3
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4413      	add	r3, r2
 80004f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80004f2:	bf00      	nop
 80004f4:	f7ff ffe0 	bl	80004b8 <HAL_GetTick>
 80004f8:	4602      	mov	r2, r0
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	1ad3      	subs	r3, r2, r3
 80004fe:	68fa      	ldr	r2, [r7, #12]
 8000500:	429a      	cmp	r2, r3
 8000502:	d8f7      	bhi.n	80004f4 <HAL_Delay+0x28>
  {
  }
}
 8000504:	bf00      	nop
 8000506:	bf00      	nop
 8000508:	3710      	adds	r7, #16
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000008 	.word	0x20000008

08000514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	f003 0307 	and.w	r3, r3, #7
 8000522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000524:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <__NVIC_SetPriorityGrouping+0x44>)
 8000526:	68db      	ldr	r3, [r3, #12]
 8000528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800052a:	68ba      	ldr	r2, [r7, #8]
 800052c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000530:	4013      	ands	r3, r2
 8000532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800053c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000540:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000546:	4a04      	ldr	r2, [pc, #16]	@ (8000558 <__NVIC_SetPriorityGrouping+0x44>)
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	60d3      	str	r3, [r2, #12]
}
 800054c:	bf00      	nop
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	e000ed00 	.word	0xe000ed00

0800055c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000560:	4b04      	ldr	r3, [pc, #16]	@ (8000574 <__NVIC_GetPriorityGrouping+0x18>)
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	0a1b      	lsrs	r3, r3, #8
 8000566:	f003 0307 	and.w	r3, r3, #7
}
 800056a:	4618      	mov	r0, r3
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	e000ed00 	.word	0xe000ed00

08000578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	6039      	str	r1, [r7, #0]
 8000582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000588:	2b00      	cmp	r3, #0
 800058a:	db0a      	blt.n	80005a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	b2da      	uxtb	r2, r3
 8000590:	490c      	ldr	r1, [pc, #48]	@ (80005c4 <__NVIC_SetPriority+0x4c>)
 8000592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000596:	0112      	lsls	r2, r2, #4
 8000598:	b2d2      	uxtb	r2, r2
 800059a:	440b      	add	r3, r1
 800059c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005a0:	e00a      	b.n	80005b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	4908      	ldr	r1, [pc, #32]	@ (80005c8 <__NVIC_SetPriority+0x50>)
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	f003 030f 	and.w	r3, r3, #15
 80005ae:	3b04      	subs	r3, #4
 80005b0:	0112      	lsls	r2, r2, #4
 80005b2:	b2d2      	uxtb	r2, r2
 80005b4:	440b      	add	r3, r1
 80005b6:	761a      	strb	r2, [r3, #24]
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	e000e100 	.word	0xe000e100
 80005c8:	e000ed00 	.word	0xe000ed00

080005cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b089      	sub	sp, #36	@ 0x24
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	f003 0307 	and.w	r3, r3, #7
 80005de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e0:	69fb      	ldr	r3, [r7, #28]
 80005e2:	f1c3 0307 	rsb	r3, r3, #7
 80005e6:	2b04      	cmp	r3, #4
 80005e8:	bf28      	it	cs
 80005ea:	2304      	movcs	r3, #4
 80005ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ee:	69fb      	ldr	r3, [r7, #28]
 80005f0:	3304      	adds	r3, #4
 80005f2:	2b06      	cmp	r3, #6
 80005f4:	d902      	bls.n	80005fc <NVIC_EncodePriority+0x30>
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	3b03      	subs	r3, #3
 80005fa:	e000      	b.n	80005fe <NVIC_EncodePriority+0x32>
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000600:	f04f 32ff 	mov.w	r2, #4294967295
 8000604:	69bb      	ldr	r3, [r7, #24]
 8000606:	fa02 f303 	lsl.w	r3, r2, r3
 800060a:	43da      	mvns	r2, r3
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	401a      	ands	r2, r3
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000614:	f04f 31ff 	mov.w	r1, #4294967295
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	fa01 f303 	lsl.w	r3, r1, r3
 800061e:	43d9      	mvns	r1, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000624:	4313      	orrs	r3, r2
         );
}
 8000626:	4618      	mov	r0, r3
 8000628:	3724      	adds	r7, #36	@ 0x24
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr

08000630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	3b01      	subs	r3, #1
 800063c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000640:	d301      	bcc.n	8000646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000642:	2301      	movs	r3, #1
 8000644:	e00f      	b.n	8000666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000646:	4a0a      	ldr	r2, [pc, #40]	@ (8000670 <SysTick_Config+0x40>)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	3b01      	subs	r3, #1
 800064c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800064e:	210f      	movs	r1, #15
 8000650:	f04f 30ff 	mov.w	r0, #4294967295
 8000654:	f7ff ff90 	bl	8000578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000658:	4b05      	ldr	r3, [pc, #20]	@ (8000670 <SysTick_Config+0x40>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065e:	4b04      	ldr	r3, [pc, #16]	@ (8000670 <SysTick_Config+0x40>)
 8000660:	2207      	movs	r2, #7
 8000662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000664:	2300      	movs	r3, #0
}
 8000666:	4618      	mov	r0, r3
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	e000e010 	.word	0xe000e010

08000674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f7ff ff49 	bl	8000514 <__NVIC_SetPriorityGrouping>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800068a:	b580      	push	{r7, lr}
 800068c:	b086      	sub	sp, #24
 800068e:	af00      	add	r7, sp, #0
 8000690:	4603      	mov	r3, r0
 8000692:	60b9      	str	r1, [r7, #8]
 8000694:	607a      	str	r2, [r7, #4]
 8000696:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800069c:	f7ff ff5e 	bl	800055c <__NVIC_GetPriorityGrouping>
 80006a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	68b9      	ldr	r1, [r7, #8]
 80006a6:	6978      	ldr	r0, [r7, #20]
 80006a8:	f7ff ff90 	bl	80005cc <NVIC_EncodePriority>
 80006ac:	4602      	mov	r2, r0
 80006ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006b2:	4611      	mov	r1, r2
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ff5f 	bl	8000578 <__NVIC_SetPriority>
}
 80006ba:	bf00      	nop
 80006bc:	3718      	adds	r7, #24
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b082      	sub	sp, #8
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f7ff ffb0 	bl	8000630 <SysTick_Config>
 80006d0:	4603      	mov	r3, r0
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006dc:	b480      	push	{r7}
 80006de:	b08b      	sub	sp, #44	@ 0x2c
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80006e6:	2300      	movs	r3, #0
 80006e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80006ea:	2300      	movs	r3, #0
 80006ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006ee:	e161      	b.n	80009b4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80006f0:	2201      	movs	r2, #1
 80006f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006f4:	fa02 f303 	lsl.w	r3, r2, r3
 80006f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	69fa      	ldr	r2, [r7, #28]
 8000700:	4013      	ands	r3, r2
 8000702:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000704:	69ba      	ldr	r2, [r7, #24]
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	429a      	cmp	r2, r3
 800070a:	f040 8150 	bne.w	80009ae <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	4a97      	ldr	r2, [pc, #604]	@ (8000970 <HAL_GPIO_Init+0x294>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d05e      	beq.n	80007d6 <HAL_GPIO_Init+0xfa>
 8000718:	4a95      	ldr	r2, [pc, #596]	@ (8000970 <HAL_GPIO_Init+0x294>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d875      	bhi.n	800080a <HAL_GPIO_Init+0x12e>
 800071e:	4a95      	ldr	r2, [pc, #596]	@ (8000974 <HAL_GPIO_Init+0x298>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d058      	beq.n	80007d6 <HAL_GPIO_Init+0xfa>
 8000724:	4a93      	ldr	r2, [pc, #588]	@ (8000974 <HAL_GPIO_Init+0x298>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d86f      	bhi.n	800080a <HAL_GPIO_Init+0x12e>
 800072a:	4a93      	ldr	r2, [pc, #588]	@ (8000978 <HAL_GPIO_Init+0x29c>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d052      	beq.n	80007d6 <HAL_GPIO_Init+0xfa>
 8000730:	4a91      	ldr	r2, [pc, #580]	@ (8000978 <HAL_GPIO_Init+0x29c>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d869      	bhi.n	800080a <HAL_GPIO_Init+0x12e>
 8000736:	4a91      	ldr	r2, [pc, #580]	@ (800097c <HAL_GPIO_Init+0x2a0>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d04c      	beq.n	80007d6 <HAL_GPIO_Init+0xfa>
 800073c:	4a8f      	ldr	r2, [pc, #572]	@ (800097c <HAL_GPIO_Init+0x2a0>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d863      	bhi.n	800080a <HAL_GPIO_Init+0x12e>
 8000742:	4a8f      	ldr	r2, [pc, #572]	@ (8000980 <HAL_GPIO_Init+0x2a4>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d046      	beq.n	80007d6 <HAL_GPIO_Init+0xfa>
 8000748:	4a8d      	ldr	r2, [pc, #564]	@ (8000980 <HAL_GPIO_Init+0x2a4>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d85d      	bhi.n	800080a <HAL_GPIO_Init+0x12e>
 800074e:	2b12      	cmp	r3, #18
 8000750:	d82a      	bhi.n	80007a8 <HAL_GPIO_Init+0xcc>
 8000752:	2b12      	cmp	r3, #18
 8000754:	d859      	bhi.n	800080a <HAL_GPIO_Init+0x12e>
 8000756:	a201      	add	r2, pc, #4	@ (adr r2, 800075c <HAL_GPIO_Init+0x80>)
 8000758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075c:	080007d7 	.word	0x080007d7
 8000760:	080007b1 	.word	0x080007b1
 8000764:	080007c3 	.word	0x080007c3
 8000768:	08000805 	.word	0x08000805
 800076c:	0800080b 	.word	0x0800080b
 8000770:	0800080b 	.word	0x0800080b
 8000774:	0800080b 	.word	0x0800080b
 8000778:	0800080b 	.word	0x0800080b
 800077c:	0800080b 	.word	0x0800080b
 8000780:	0800080b 	.word	0x0800080b
 8000784:	0800080b 	.word	0x0800080b
 8000788:	0800080b 	.word	0x0800080b
 800078c:	0800080b 	.word	0x0800080b
 8000790:	0800080b 	.word	0x0800080b
 8000794:	0800080b 	.word	0x0800080b
 8000798:	0800080b 	.word	0x0800080b
 800079c:	0800080b 	.word	0x0800080b
 80007a0:	080007b9 	.word	0x080007b9
 80007a4:	080007cd 	.word	0x080007cd
 80007a8:	4a76      	ldr	r2, [pc, #472]	@ (8000984 <HAL_GPIO_Init+0x2a8>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d013      	beq.n	80007d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80007ae:	e02c      	b.n	800080a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	623b      	str	r3, [r7, #32]
          break;
 80007b6:	e029      	b.n	800080c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	3304      	adds	r3, #4
 80007be:	623b      	str	r3, [r7, #32]
          break;
 80007c0:	e024      	b.n	800080c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	68db      	ldr	r3, [r3, #12]
 80007c6:	3308      	adds	r3, #8
 80007c8:	623b      	str	r3, [r7, #32]
          break;
 80007ca:	e01f      	b.n	800080c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	330c      	adds	r3, #12
 80007d2:	623b      	str	r3, [r7, #32]
          break;
 80007d4:	e01a      	b.n	800080c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d102      	bne.n	80007e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80007de:	2304      	movs	r3, #4
 80007e0:	623b      	str	r3, [r7, #32]
          break;
 80007e2:	e013      	b.n	800080c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	689b      	ldr	r3, [r3, #8]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d105      	bne.n	80007f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007ec:	2308      	movs	r3, #8
 80007ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	69fa      	ldr	r2, [r7, #28]
 80007f4:	611a      	str	r2, [r3, #16]
          break;
 80007f6:	e009      	b.n	800080c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007f8:	2308      	movs	r3, #8
 80007fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	69fa      	ldr	r2, [r7, #28]
 8000800:	615a      	str	r2, [r3, #20]
          break;
 8000802:	e003      	b.n	800080c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000804:	2300      	movs	r3, #0
 8000806:	623b      	str	r3, [r7, #32]
          break;
 8000808:	e000      	b.n	800080c <HAL_GPIO_Init+0x130>
          break;
 800080a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	2bff      	cmp	r3, #255	@ 0xff
 8000810:	d801      	bhi.n	8000816 <HAL_GPIO_Init+0x13a>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	e001      	b.n	800081a <HAL_GPIO_Init+0x13e>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	3304      	adds	r3, #4
 800081a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800081c:	69bb      	ldr	r3, [r7, #24]
 800081e:	2bff      	cmp	r3, #255	@ 0xff
 8000820:	d802      	bhi.n	8000828 <HAL_GPIO_Init+0x14c>
 8000822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	e002      	b.n	800082e <HAL_GPIO_Init+0x152>
 8000828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800082a:	3b08      	subs	r3, #8
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	210f      	movs	r1, #15
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	fa01 f303 	lsl.w	r3, r1, r3
 800083c:	43db      	mvns	r3, r3
 800083e:	401a      	ands	r2, r3
 8000840:	6a39      	ldr	r1, [r7, #32]
 8000842:	693b      	ldr	r3, [r7, #16]
 8000844:	fa01 f303 	lsl.w	r3, r1, r3
 8000848:	431a      	orrs	r2, r3
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000856:	2b00      	cmp	r3, #0
 8000858:	f000 80a9 	beq.w	80009ae <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800085c:	4b4a      	ldr	r3, [pc, #296]	@ (8000988 <HAL_GPIO_Init+0x2ac>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	4a49      	ldr	r2, [pc, #292]	@ (8000988 <HAL_GPIO_Init+0x2ac>)
 8000862:	f043 0301 	orr.w	r3, r3, #1
 8000866:	6193      	str	r3, [r2, #24]
 8000868:	4b47      	ldr	r3, [pc, #284]	@ (8000988 <HAL_GPIO_Init+0x2ac>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f003 0301 	and.w	r3, r3, #1
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000874:	4a45      	ldr	r2, [pc, #276]	@ (800098c <HAL_GPIO_Init+0x2b0>)
 8000876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000878:	089b      	lsrs	r3, r3, #2
 800087a:	3302      	adds	r3, #2
 800087c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000880:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000884:	f003 0303 	and.w	r3, r3, #3
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	220f      	movs	r2, #15
 800088c:	fa02 f303 	lsl.w	r3, r2, r3
 8000890:	43db      	mvns	r3, r3
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	4013      	ands	r3, r2
 8000896:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4a3d      	ldr	r2, [pc, #244]	@ (8000990 <HAL_GPIO_Init+0x2b4>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d00d      	beq.n	80008bc <HAL_GPIO_Init+0x1e0>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a3c      	ldr	r2, [pc, #240]	@ (8000994 <HAL_GPIO_Init+0x2b8>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d007      	beq.n	80008b8 <HAL_GPIO_Init+0x1dc>
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4a3b      	ldr	r2, [pc, #236]	@ (8000998 <HAL_GPIO_Init+0x2bc>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d101      	bne.n	80008b4 <HAL_GPIO_Init+0x1d8>
 80008b0:	2302      	movs	r3, #2
 80008b2:	e004      	b.n	80008be <HAL_GPIO_Init+0x1e2>
 80008b4:	2303      	movs	r3, #3
 80008b6:	e002      	b.n	80008be <HAL_GPIO_Init+0x1e2>
 80008b8:	2301      	movs	r3, #1
 80008ba:	e000      	b.n	80008be <HAL_GPIO_Init+0x1e2>
 80008bc:	2300      	movs	r3, #0
 80008be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008c0:	f002 0203 	and.w	r2, r2, #3
 80008c4:	0092      	lsls	r2, r2, #2
 80008c6:	4093      	lsls	r3, r2
 80008c8:	68fa      	ldr	r2, [r7, #12]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80008ce:	492f      	ldr	r1, [pc, #188]	@ (800098c <HAL_GPIO_Init+0x2b0>)
 80008d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008d2:	089b      	lsrs	r3, r3, #2
 80008d4:	3302      	adds	r3, #2
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d006      	beq.n	80008f6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80008e8:	4b2c      	ldr	r3, [pc, #176]	@ (800099c <HAL_GPIO_Init+0x2c0>)
 80008ea:	689a      	ldr	r2, [r3, #8]
 80008ec:	492b      	ldr	r1, [pc, #172]	@ (800099c <HAL_GPIO_Init+0x2c0>)
 80008ee:	69bb      	ldr	r3, [r7, #24]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	608b      	str	r3, [r1, #8]
 80008f4:	e006      	b.n	8000904 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80008f6:	4b29      	ldr	r3, [pc, #164]	@ (800099c <HAL_GPIO_Init+0x2c0>)
 80008f8:	689a      	ldr	r2, [r3, #8]
 80008fa:	69bb      	ldr	r3, [r7, #24]
 80008fc:	43db      	mvns	r3, r3
 80008fe:	4927      	ldr	r1, [pc, #156]	@ (800099c <HAL_GPIO_Init+0x2c0>)
 8000900:	4013      	ands	r3, r2
 8000902:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800090c:	2b00      	cmp	r3, #0
 800090e:	d006      	beq.n	800091e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000910:	4b22      	ldr	r3, [pc, #136]	@ (800099c <HAL_GPIO_Init+0x2c0>)
 8000912:	68da      	ldr	r2, [r3, #12]
 8000914:	4921      	ldr	r1, [pc, #132]	@ (800099c <HAL_GPIO_Init+0x2c0>)
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	4313      	orrs	r3, r2
 800091a:	60cb      	str	r3, [r1, #12]
 800091c:	e006      	b.n	800092c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800091e:	4b1f      	ldr	r3, [pc, #124]	@ (800099c <HAL_GPIO_Init+0x2c0>)
 8000920:	68da      	ldr	r2, [r3, #12]
 8000922:	69bb      	ldr	r3, [r7, #24]
 8000924:	43db      	mvns	r3, r3
 8000926:	491d      	ldr	r1, [pc, #116]	@ (800099c <HAL_GPIO_Init+0x2c0>)
 8000928:	4013      	ands	r3, r2
 800092a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000934:	2b00      	cmp	r3, #0
 8000936:	d006      	beq.n	8000946 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000938:	4b18      	ldr	r3, [pc, #96]	@ (800099c <HAL_GPIO_Init+0x2c0>)
 800093a:	685a      	ldr	r2, [r3, #4]
 800093c:	4917      	ldr	r1, [pc, #92]	@ (800099c <HAL_GPIO_Init+0x2c0>)
 800093e:	69bb      	ldr	r3, [r7, #24]
 8000940:	4313      	orrs	r3, r2
 8000942:	604b      	str	r3, [r1, #4]
 8000944:	e006      	b.n	8000954 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000946:	4b15      	ldr	r3, [pc, #84]	@ (800099c <HAL_GPIO_Init+0x2c0>)
 8000948:	685a      	ldr	r2, [r3, #4]
 800094a:	69bb      	ldr	r3, [r7, #24]
 800094c:	43db      	mvns	r3, r3
 800094e:	4913      	ldr	r1, [pc, #76]	@ (800099c <HAL_GPIO_Init+0x2c0>)
 8000950:	4013      	ands	r3, r2
 8000952:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800095c:	2b00      	cmp	r3, #0
 800095e:	d01f      	beq.n	80009a0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000960:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <HAL_GPIO_Init+0x2c0>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	490d      	ldr	r1, [pc, #52]	@ (800099c <HAL_GPIO_Init+0x2c0>)
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	4313      	orrs	r3, r2
 800096a:	600b      	str	r3, [r1, #0]
 800096c:	e01f      	b.n	80009ae <HAL_GPIO_Init+0x2d2>
 800096e:	bf00      	nop
 8000970:	10320000 	.word	0x10320000
 8000974:	10310000 	.word	0x10310000
 8000978:	10220000 	.word	0x10220000
 800097c:	10210000 	.word	0x10210000
 8000980:	10120000 	.word	0x10120000
 8000984:	10110000 	.word	0x10110000
 8000988:	40021000 	.word	0x40021000
 800098c:	40010000 	.word	0x40010000
 8000990:	40010800 	.word	0x40010800
 8000994:	40010c00 	.word	0x40010c00
 8000998:	40011000 	.word	0x40011000
 800099c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009a0:	4b0b      	ldr	r3, [pc, #44]	@ (80009d0 <HAL_GPIO_Init+0x2f4>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	43db      	mvns	r3, r3
 80009a8:	4909      	ldr	r1, [pc, #36]	@ (80009d0 <HAL_GPIO_Init+0x2f4>)
 80009aa:	4013      	ands	r3, r2
 80009ac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80009ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009b0:	3301      	adds	r3, #1
 80009b2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ba:	fa22 f303 	lsr.w	r3, r2, r3
 80009be:	2b00      	cmp	r3, #0
 80009c0:	f47f ae96 	bne.w	80006f0 <HAL_GPIO_Init+0x14>
  }
}
 80009c4:	bf00      	nop
 80009c6:	bf00      	nop
 80009c8:	372c      	adds	r7, #44	@ 0x2c
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	40010400 	.word	0x40010400

080009d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	460b      	mov	r3, r1
 80009de:	807b      	strh	r3, [r7, #2]
 80009e0:	4613      	mov	r3, r2
 80009e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009e4:	787b      	ldrb	r3, [r7, #1]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d003      	beq.n	80009f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80009ea:	887a      	ldrh	r2, [r7, #2]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80009f0:	e003      	b.n	80009fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009f2:	887b      	ldrh	r3, [r7, #2]
 80009f4:	041a      	lsls	r2, r3, #16
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	611a      	str	r2, [r3, #16]
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr

08000a04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000a16:	887a      	ldrh	r2, [r7, #2]
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	041a      	lsls	r2, r3, #16
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	43d9      	mvns	r1, r3
 8000a22:	887b      	ldrh	r3, [r7, #2]
 8000a24:	400b      	ands	r3, r1
 8000a26:	431a      	orrs	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	611a      	str	r2, [r3, #16]
}
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr
	...

08000a38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d101      	bne.n	8000a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	e272      	b.n	8000f30 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	f000 8087 	beq.w	8000b66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a58:	4b92      	ldr	r3, [pc, #584]	@ (8000ca4 <HAL_RCC_OscConfig+0x26c>)
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f003 030c 	and.w	r3, r3, #12
 8000a60:	2b04      	cmp	r3, #4
 8000a62:	d00c      	beq.n	8000a7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a64:	4b8f      	ldr	r3, [pc, #572]	@ (8000ca4 <HAL_RCC_OscConfig+0x26c>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f003 030c 	and.w	r3, r3, #12
 8000a6c:	2b08      	cmp	r3, #8
 8000a6e:	d112      	bne.n	8000a96 <HAL_RCC_OscConfig+0x5e>
 8000a70:	4b8c      	ldr	r3, [pc, #560]	@ (8000ca4 <HAL_RCC_OscConfig+0x26c>)
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000a7c:	d10b      	bne.n	8000a96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a7e:	4b89      	ldr	r3, [pc, #548]	@ (8000ca4 <HAL_RCC_OscConfig+0x26c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d06c      	beq.n	8000b64 <HAL_RCC_OscConfig+0x12c>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d168      	bne.n	8000b64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	e24c      	b.n	8000f30 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000a9e:	d106      	bne.n	8000aae <HAL_RCC_OscConfig+0x76>
 8000aa0:	4b80      	ldr	r3, [pc, #512]	@ (8000ca4 <HAL_RCC_OscConfig+0x26c>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a7f      	ldr	r2, [pc, #508]	@ (8000ca4 <HAL_RCC_OscConfig+0x26c>)
 8000aa6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000aaa:	6013      	str	r3, [r2, #0]
 8000aac:	e02e      	b.n	8000b0c <HAL_RCC_OscConfig+0xd4>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d10c      	bne.n	8000ad0 <HAL_RCC_OscConfig+0x98>
 8000ab6:	4b7b      	ldr	r3, [pc, #492]	@ (8000ca4 <HAL_RCC_OscConfig+0x26c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a7a      	ldr	r2, [pc, #488]	@ (8000ca4 <HAL_RCC_OscConfig+0x26c>)
 8000abc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ac0:	6013      	str	r3, [r2, #0]
 8000ac2:	4b78      	ldr	r3, [pc, #480]	@ (8000ca4 <HAL_RCC_OscConfig+0x26c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a77      	ldr	r2, [pc, #476]	@ (8000ca4 <HAL_RCC_OscConfig+0x26c>)
 8000ac8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000acc:	6013      	str	r3, [r2, #0]
 8000ace:	e01d      	b.n	8000b0c <HAL_RCC_OscConfig+0xd4>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ad8:	d10c      	bne.n	8000af4 <HAL_RCC_OscConfig+0xbc>
 8000ada:	4b72      	ldr	r3, [pc, #456]	@ (8000ca4 <HAL_RCC_OscConfig+0x26c>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a71      	ldr	r2, [pc, #452]	@ (8000ca4 <HAL_RCC_OscConfig+0x26c>)
 8000ae0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ae4:	6013      	str	r3, [r2, #0]
 8000ae6:	4b6f      	ldr	r3, [pc, #444]	@ (8000ca4 <HAL_RCC_OscConfig+0x26c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a6e      	ldr	r2, [pc, #440]	@ (8000ca4 <HAL_RCC_OscConfig+0x26c>)
 8000aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000af0:	6013      	str	r3, [r2, #0]
 8000af2:	e00b      	b.n	8000b0c <HAL_RCC_OscConfig+0xd4>
 8000af4:	4b6b      	ldr	r3, [pc, #428]	@ (8000ca4 <HAL_RCC_OscConfig+0x26c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a6a      	ldr	r2, [pc, #424]	@ (8000ca4 <HAL_RCC_OscConfig+0x26c>)
 8000afa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000afe:	6013      	str	r3, [r2, #0]
 8000b00:	4b68      	ldr	r3, [pc, #416]	@ (8000ca4 <HAL_RCC_OscConfig+0x26c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a67      	ldr	r2, [pc, #412]	@ (8000ca4 <HAL_RCC_OscConfig+0x26c>)
 8000b06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d013      	beq.n	8000b3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b14:	f7ff fcd0 	bl	80004b8 <HAL_GetTick>
 8000b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b1a:	e008      	b.n	8000b2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b1c:	f7ff fccc 	bl	80004b8 <HAL_GetTick>
 8000b20:	4602      	mov	r2, r0
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	2b64      	cmp	r3, #100	@ 0x64
 8000b28:	d901      	bls.n	8000b2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	e200      	b.n	8000f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b2e:	4b5d      	ldr	r3, [pc, #372]	@ (8000ca4 <HAL_RCC_OscConfig+0x26c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d0f0      	beq.n	8000b1c <HAL_RCC_OscConfig+0xe4>
 8000b3a:	e014      	b.n	8000b66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b3c:	f7ff fcbc 	bl	80004b8 <HAL_GetTick>
 8000b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b42:	e008      	b.n	8000b56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b44:	f7ff fcb8 	bl	80004b8 <HAL_GetTick>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	2b64      	cmp	r3, #100	@ 0x64
 8000b50:	d901      	bls.n	8000b56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b52:	2303      	movs	r3, #3
 8000b54:	e1ec      	b.n	8000f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b56:	4b53      	ldr	r3, [pc, #332]	@ (8000ca4 <HAL_RCC_OscConfig+0x26c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d1f0      	bne.n	8000b44 <HAL_RCC_OscConfig+0x10c>
 8000b62:	e000      	b.n	8000b66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d063      	beq.n	8000c3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b72:	4b4c      	ldr	r3, [pc, #304]	@ (8000ca4 <HAL_RCC_OscConfig+0x26c>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f003 030c 	and.w	r3, r3, #12
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d00b      	beq.n	8000b96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b7e:	4b49      	ldr	r3, [pc, #292]	@ (8000ca4 <HAL_RCC_OscConfig+0x26c>)
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	f003 030c 	and.w	r3, r3, #12
 8000b86:	2b08      	cmp	r3, #8
 8000b88:	d11c      	bne.n	8000bc4 <HAL_RCC_OscConfig+0x18c>
 8000b8a:	4b46      	ldr	r3, [pc, #280]	@ (8000ca4 <HAL_RCC_OscConfig+0x26c>)
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d116      	bne.n	8000bc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b96:	4b43      	ldr	r3, [pc, #268]	@ (8000ca4 <HAL_RCC_OscConfig+0x26c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d005      	beq.n	8000bae <HAL_RCC_OscConfig+0x176>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	691b      	ldr	r3, [r3, #16]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d001      	beq.n	8000bae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e1c0      	b.n	8000f30 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bae:	4b3d      	ldr	r3, [pc, #244]	@ (8000ca4 <HAL_RCC_OscConfig+0x26c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	4939      	ldr	r1, [pc, #228]	@ (8000ca4 <HAL_RCC_OscConfig+0x26c>)
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bc2:	e03a      	b.n	8000c3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	691b      	ldr	r3, [r3, #16]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d020      	beq.n	8000c0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bcc:	4b36      	ldr	r3, [pc, #216]	@ (8000ca8 <HAL_RCC_OscConfig+0x270>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bd2:	f7ff fc71 	bl	80004b8 <HAL_GetTick>
 8000bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bd8:	e008      	b.n	8000bec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bda:	f7ff fc6d 	bl	80004b8 <HAL_GetTick>
 8000bde:	4602      	mov	r2, r0
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d901      	bls.n	8000bec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000be8:	2303      	movs	r3, #3
 8000bea:	e1a1      	b.n	8000f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bec:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca4 <HAL_RCC_OscConfig+0x26c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f003 0302 	and.w	r3, r3, #2
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d0f0      	beq.n	8000bda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bf8:	4b2a      	ldr	r3, [pc, #168]	@ (8000ca4 <HAL_RCC_OscConfig+0x26c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	695b      	ldr	r3, [r3, #20]
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	4927      	ldr	r1, [pc, #156]	@ (8000ca4 <HAL_RCC_OscConfig+0x26c>)
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	600b      	str	r3, [r1, #0]
 8000c0c:	e015      	b.n	8000c3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c0e:	4b26      	ldr	r3, [pc, #152]	@ (8000ca8 <HAL_RCC_OscConfig+0x270>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c14:	f7ff fc50 	bl	80004b8 <HAL_GetTick>
 8000c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c1a:	e008      	b.n	8000c2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c1c:	f7ff fc4c 	bl	80004b8 <HAL_GetTick>
 8000c20:	4602      	mov	r2, r0
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d901      	bls.n	8000c2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	e180      	b.n	8000f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca4 <HAL_RCC_OscConfig+0x26c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d1f0      	bne.n	8000c1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f003 0308 	and.w	r3, r3, #8
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d03a      	beq.n	8000cbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d019      	beq.n	8000c82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c4e:	4b17      	ldr	r3, [pc, #92]	@ (8000cac <HAL_RCC_OscConfig+0x274>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c54:	f7ff fc30 	bl	80004b8 <HAL_GetTick>
 8000c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c5a:	e008      	b.n	8000c6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c5c:	f7ff fc2c 	bl	80004b8 <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d901      	bls.n	8000c6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	e160      	b.n	8000f30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca4 <HAL_RCC_OscConfig+0x26c>)
 8000c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0f0      	beq.n	8000c5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	f000 fa9c 	bl	80011b8 <RCC_Delay>
 8000c80:	e01c      	b.n	8000cbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c82:	4b0a      	ldr	r3, [pc, #40]	@ (8000cac <HAL_RCC_OscConfig+0x274>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c88:	f7ff fc16 	bl	80004b8 <HAL_GetTick>
 8000c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c8e:	e00f      	b.n	8000cb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c90:	f7ff fc12 	bl	80004b8 <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d908      	bls.n	8000cb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e146      	b.n	8000f30 <HAL_RCC_OscConfig+0x4f8>
 8000ca2:	bf00      	nop
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	42420000 	.word	0x42420000
 8000cac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cb0:	4b92      	ldr	r3, [pc, #584]	@ (8000efc <HAL_RCC_OscConfig+0x4c4>)
 8000cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cb4:	f003 0302 	and.w	r3, r3, #2
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1e9      	bne.n	8000c90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	f000 80a6 	beq.w	8000e16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cce:	4b8b      	ldr	r3, [pc, #556]	@ (8000efc <HAL_RCC_OscConfig+0x4c4>)
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d10d      	bne.n	8000cf6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cda:	4b88      	ldr	r3, [pc, #544]	@ (8000efc <HAL_RCC_OscConfig+0x4c4>)
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	4a87      	ldr	r2, [pc, #540]	@ (8000efc <HAL_RCC_OscConfig+0x4c4>)
 8000ce0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ce4:	61d3      	str	r3, [r2, #28]
 8000ce6:	4b85      	ldr	r3, [pc, #532]	@ (8000efc <HAL_RCC_OscConfig+0x4c4>)
 8000ce8:	69db      	ldr	r3, [r3, #28]
 8000cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cf6:	4b82      	ldr	r3, [pc, #520]	@ (8000f00 <HAL_RCC_OscConfig+0x4c8>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d118      	bne.n	8000d34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d02:	4b7f      	ldr	r3, [pc, #508]	@ (8000f00 <HAL_RCC_OscConfig+0x4c8>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a7e      	ldr	r2, [pc, #504]	@ (8000f00 <HAL_RCC_OscConfig+0x4c8>)
 8000d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d0e:	f7ff fbd3 	bl	80004b8 <HAL_GetTick>
 8000d12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d14:	e008      	b.n	8000d28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d16:	f7ff fbcf 	bl	80004b8 <HAL_GetTick>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	2b64      	cmp	r3, #100	@ 0x64
 8000d22:	d901      	bls.n	8000d28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000d24:	2303      	movs	r3, #3
 8000d26:	e103      	b.n	8000f30 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d28:	4b75      	ldr	r3, [pc, #468]	@ (8000f00 <HAL_RCC_OscConfig+0x4c8>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d0f0      	beq.n	8000d16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d106      	bne.n	8000d4a <HAL_RCC_OscConfig+0x312>
 8000d3c:	4b6f      	ldr	r3, [pc, #444]	@ (8000efc <HAL_RCC_OscConfig+0x4c4>)
 8000d3e:	6a1b      	ldr	r3, [r3, #32]
 8000d40:	4a6e      	ldr	r2, [pc, #440]	@ (8000efc <HAL_RCC_OscConfig+0x4c4>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	6213      	str	r3, [r2, #32]
 8000d48:	e02d      	b.n	8000da6 <HAL_RCC_OscConfig+0x36e>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10c      	bne.n	8000d6c <HAL_RCC_OscConfig+0x334>
 8000d52:	4b6a      	ldr	r3, [pc, #424]	@ (8000efc <HAL_RCC_OscConfig+0x4c4>)
 8000d54:	6a1b      	ldr	r3, [r3, #32]
 8000d56:	4a69      	ldr	r2, [pc, #420]	@ (8000efc <HAL_RCC_OscConfig+0x4c4>)
 8000d58:	f023 0301 	bic.w	r3, r3, #1
 8000d5c:	6213      	str	r3, [r2, #32]
 8000d5e:	4b67      	ldr	r3, [pc, #412]	@ (8000efc <HAL_RCC_OscConfig+0x4c4>)
 8000d60:	6a1b      	ldr	r3, [r3, #32]
 8000d62:	4a66      	ldr	r2, [pc, #408]	@ (8000efc <HAL_RCC_OscConfig+0x4c4>)
 8000d64:	f023 0304 	bic.w	r3, r3, #4
 8000d68:	6213      	str	r3, [r2, #32]
 8000d6a:	e01c      	b.n	8000da6 <HAL_RCC_OscConfig+0x36e>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	2b05      	cmp	r3, #5
 8000d72:	d10c      	bne.n	8000d8e <HAL_RCC_OscConfig+0x356>
 8000d74:	4b61      	ldr	r3, [pc, #388]	@ (8000efc <HAL_RCC_OscConfig+0x4c4>)
 8000d76:	6a1b      	ldr	r3, [r3, #32]
 8000d78:	4a60      	ldr	r2, [pc, #384]	@ (8000efc <HAL_RCC_OscConfig+0x4c4>)
 8000d7a:	f043 0304 	orr.w	r3, r3, #4
 8000d7e:	6213      	str	r3, [r2, #32]
 8000d80:	4b5e      	ldr	r3, [pc, #376]	@ (8000efc <HAL_RCC_OscConfig+0x4c4>)
 8000d82:	6a1b      	ldr	r3, [r3, #32]
 8000d84:	4a5d      	ldr	r2, [pc, #372]	@ (8000efc <HAL_RCC_OscConfig+0x4c4>)
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	6213      	str	r3, [r2, #32]
 8000d8c:	e00b      	b.n	8000da6 <HAL_RCC_OscConfig+0x36e>
 8000d8e:	4b5b      	ldr	r3, [pc, #364]	@ (8000efc <HAL_RCC_OscConfig+0x4c4>)
 8000d90:	6a1b      	ldr	r3, [r3, #32]
 8000d92:	4a5a      	ldr	r2, [pc, #360]	@ (8000efc <HAL_RCC_OscConfig+0x4c4>)
 8000d94:	f023 0301 	bic.w	r3, r3, #1
 8000d98:	6213      	str	r3, [r2, #32]
 8000d9a:	4b58      	ldr	r3, [pc, #352]	@ (8000efc <HAL_RCC_OscConfig+0x4c4>)
 8000d9c:	6a1b      	ldr	r3, [r3, #32]
 8000d9e:	4a57      	ldr	r2, [pc, #348]	@ (8000efc <HAL_RCC_OscConfig+0x4c4>)
 8000da0:	f023 0304 	bic.w	r3, r3, #4
 8000da4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d015      	beq.n	8000dda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dae:	f7ff fb83 	bl	80004b8 <HAL_GetTick>
 8000db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000db4:	e00a      	b.n	8000dcc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000db6:	f7ff fb7f 	bl	80004b8 <HAL_GetTick>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d901      	bls.n	8000dcc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	e0b1      	b.n	8000f30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dcc:	4b4b      	ldr	r3, [pc, #300]	@ (8000efc <HAL_RCC_OscConfig+0x4c4>)
 8000dce:	6a1b      	ldr	r3, [r3, #32]
 8000dd0:	f003 0302 	and.w	r3, r3, #2
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d0ee      	beq.n	8000db6 <HAL_RCC_OscConfig+0x37e>
 8000dd8:	e014      	b.n	8000e04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dda:	f7ff fb6d 	bl	80004b8 <HAL_GetTick>
 8000dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000de0:	e00a      	b.n	8000df8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000de2:	f7ff fb69 	bl	80004b8 <HAL_GetTick>
 8000de6:	4602      	mov	r2, r0
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d901      	bls.n	8000df8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000df4:	2303      	movs	r3, #3
 8000df6:	e09b      	b.n	8000f30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000df8:	4b40      	ldr	r3, [pc, #256]	@ (8000efc <HAL_RCC_OscConfig+0x4c4>)
 8000dfa:	6a1b      	ldr	r3, [r3, #32]
 8000dfc:	f003 0302 	and.w	r3, r3, #2
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d1ee      	bne.n	8000de2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000e04:	7dfb      	ldrb	r3, [r7, #23]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d105      	bne.n	8000e16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e0a:	4b3c      	ldr	r3, [pc, #240]	@ (8000efc <HAL_RCC_OscConfig+0x4c4>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	4a3b      	ldr	r2, [pc, #236]	@ (8000efc <HAL_RCC_OscConfig+0x4c4>)
 8000e10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000e14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	69db      	ldr	r3, [r3, #28]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f000 8087 	beq.w	8000f2e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e20:	4b36      	ldr	r3, [pc, #216]	@ (8000efc <HAL_RCC_OscConfig+0x4c4>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 030c 	and.w	r3, r3, #12
 8000e28:	2b08      	cmp	r3, #8
 8000e2a:	d061      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	69db      	ldr	r3, [r3, #28]
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d146      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e34:	4b33      	ldr	r3, [pc, #204]	@ (8000f04 <HAL_RCC_OscConfig+0x4cc>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e3a:	f7ff fb3d 	bl	80004b8 <HAL_GetTick>
 8000e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e40:	e008      	b.n	8000e54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e42:	f7ff fb39 	bl	80004b8 <HAL_GetTick>
 8000e46:	4602      	mov	r2, r0
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d901      	bls.n	8000e54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000e50:	2303      	movs	r3, #3
 8000e52:	e06d      	b.n	8000f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e54:	4b29      	ldr	r3, [pc, #164]	@ (8000efc <HAL_RCC_OscConfig+0x4c4>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d1f0      	bne.n	8000e42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6a1b      	ldr	r3, [r3, #32]
 8000e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e68:	d108      	bne.n	8000e7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e6a:	4b24      	ldr	r3, [pc, #144]	@ (8000efc <HAL_RCC_OscConfig+0x4c4>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	4921      	ldr	r1, [pc, #132]	@ (8000efc <HAL_RCC_OscConfig+0x4c4>)
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000efc <HAL_RCC_OscConfig+0x4c4>)
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6a19      	ldr	r1, [r3, #32]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e8c:	430b      	orrs	r3, r1
 8000e8e:	491b      	ldr	r1, [pc, #108]	@ (8000efc <HAL_RCC_OscConfig+0x4c4>)
 8000e90:	4313      	orrs	r3, r2
 8000e92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e94:	4b1b      	ldr	r3, [pc, #108]	@ (8000f04 <HAL_RCC_OscConfig+0x4cc>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9a:	f7ff fb0d 	bl	80004b8 <HAL_GetTick>
 8000e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ea0:	e008      	b.n	8000eb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ea2:	f7ff fb09 	bl	80004b8 <HAL_GetTick>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d901      	bls.n	8000eb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	e03d      	b.n	8000f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000eb4:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <HAL_RCC_OscConfig+0x4c4>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d0f0      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x46a>
 8000ec0:	e035      	b.n	8000f2e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ec2:	4b10      	ldr	r3, [pc, #64]	@ (8000f04 <HAL_RCC_OscConfig+0x4cc>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec8:	f7ff faf6 	bl	80004b8 <HAL_GetTick>
 8000ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ece:	e008      	b.n	8000ee2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ed0:	f7ff faf2 	bl	80004b8 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d901      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e026      	b.n	8000f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ee2:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <HAL_RCC_OscConfig+0x4c4>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d1f0      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x498>
 8000eee:	e01e      	b.n	8000f2e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	69db      	ldr	r3, [r3, #28]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d107      	bne.n	8000f08 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e019      	b.n	8000f30 <HAL_RCC_OscConfig+0x4f8>
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40007000 	.word	0x40007000
 8000f04:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f08:	4b0b      	ldr	r3, [pc, #44]	@ (8000f38 <HAL_RCC_OscConfig+0x500>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a1b      	ldr	r3, [r3, #32]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d106      	bne.n	8000f2a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d001      	beq.n	8000f2e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e000      	b.n	8000f30 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000f2e:	2300      	movs	r3, #0
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40021000 	.word	0x40021000

08000f3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d101      	bne.n	8000f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e0d0      	b.n	80010f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f50:	4b6a      	ldr	r3, [pc, #424]	@ (80010fc <HAL_RCC_ClockConfig+0x1c0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d910      	bls.n	8000f80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f5e:	4b67      	ldr	r3, [pc, #412]	@ (80010fc <HAL_RCC_ClockConfig+0x1c0>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f023 0207 	bic.w	r2, r3, #7
 8000f66:	4965      	ldr	r1, [pc, #404]	@ (80010fc <HAL_RCC_ClockConfig+0x1c0>)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f6e:	4b63      	ldr	r3, [pc, #396]	@ (80010fc <HAL_RCC_ClockConfig+0x1c0>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d001      	beq.n	8000f80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e0b8      	b.n	80010f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d020      	beq.n	8000fce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 0304 	and.w	r3, r3, #4
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d005      	beq.n	8000fa4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f98:	4b59      	ldr	r3, [pc, #356]	@ (8001100 <HAL_RCC_ClockConfig+0x1c4>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	4a58      	ldr	r2, [pc, #352]	@ (8001100 <HAL_RCC_ClockConfig+0x1c4>)
 8000f9e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000fa2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 0308 	and.w	r3, r3, #8
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d005      	beq.n	8000fbc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fb0:	4b53      	ldr	r3, [pc, #332]	@ (8001100 <HAL_RCC_ClockConfig+0x1c4>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	4a52      	ldr	r2, [pc, #328]	@ (8001100 <HAL_RCC_ClockConfig+0x1c4>)
 8000fb6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8000fba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fbc:	4b50      	ldr	r3, [pc, #320]	@ (8001100 <HAL_RCC_ClockConfig+0x1c4>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	494d      	ldr	r1, [pc, #308]	@ (8001100 <HAL_RCC_ClockConfig+0x1c4>)
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d040      	beq.n	800105c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d107      	bne.n	8000ff2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe2:	4b47      	ldr	r3, [pc, #284]	@ (8001100 <HAL_RCC_ClockConfig+0x1c4>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d115      	bne.n	800101a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e07f      	b.n	80010f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d107      	bne.n	800100a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ffa:	4b41      	ldr	r3, [pc, #260]	@ (8001100 <HAL_RCC_ClockConfig+0x1c4>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d109      	bne.n	800101a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e073      	b.n	80010f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800100a:	4b3d      	ldr	r3, [pc, #244]	@ (8001100 <HAL_RCC_ClockConfig+0x1c4>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e06b      	b.n	80010f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800101a:	4b39      	ldr	r3, [pc, #228]	@ (8001100 <HAL_RCC_ClockConfig+0x1c4>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f023 0203 	bic.w	r2, r3, #3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	4936      	ldr	r1, [pc, #216]	@ (8001100 <HAL_RCC_ClockConfig+0x1c4>)
 8001028:	4313      	orrs	r3, r2
 800102a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800102c:	f7ff fa44 	bl	80004b8 <HAL_GetTick>
 8001030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001032:	e00a      	b.n	800104a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001034:	f7ff fa40 	bl	80004b8 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001042:	4293      	cmp	r3, r2
 8001044:	d901      	bls.n	800104a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e053      	b.n	80010f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800104a:	4b2d      	ldr	r3, [pc, #180]	@ (8001100 <HAL_RCC_ClockConfig+0x1c4>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 020c 	and.w	r2, r3, #12
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	429a      	cmp	r2, r3
 800105a:	d1eb      	bne.n	8001034 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800105c:	4b27      	ldr	r3, [pc, #156]	@ (80010fc <HAL_RCC_ClockConfig+0x1c0>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	429a      	cmp	r2, r3
 8001068:	d210      	bcs.n	800108c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800106a:	4b24      	ldr	r3, [pc, #144]	@ (80010fc <HAL_RCC_ClockConfig+0x1c0>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f023 0207 	bic.w	r2, r3, #7
 8001072:	4922      	ldr	r1, [pc, #136]	@ (80010fc <HAL_RCC_ClockConfig+0x1c0>)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	4313      	orrs	r3, r2
 8001078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800107a:	4b20      	ldr	r3, [pc, #128]	@ (80010fc <HAL_RCC_ClockConfig+0x1c0>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	429a      	cmp	r2, r3
 8001086:	d001      	beq.n	800108c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e032      	b.n	80010f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	2b00      	cmp	r3, #0
 8001096:	d008      	beq.n	80010aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001098:	4b19      	ldr	r3, [pc, #100]	@ (8001100 <HAL_RCC_ClockConfig+0x1c4>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	4916      	ldr	r1, [pc, #88]	@ (8001100 <HAL_RCC_ClockConfig+0x1c4>)
 80010a6:	4313      	orrs	r3, r2
 80010a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0308 	and.w	r3, r3, #8
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d009      	beq.n	80010ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010b6:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <HAL_RCC_ClockConfig+0x1c4>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	490e      	ldr	r1, [pc, #56]	@ (8001100 <HAL_RCC_ClockConfig+0x1c4>)
 80010c6:	4313      	orrs	r3, r2
 80010c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80010ca:	f000 f821 	bl	8001110 <HAL_RCC_GetSysClockFreq>
 80010ce:	4602      	mov	r2, r0
 80010d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <HAL_RCC_ClockConfig+0x1c4>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	091b      	lsrs	r3, r3, #4
 80010d6:	f003 030f 	and.w	r3, r3, #15
 80010da:	490a      	ldr	r1, [pc, #40]	@ (8001104 <HAL_RCC_ClockConfig+0x1c8>)
 80010dc:	5ccb      	ldrb	r3, [r1, r3]
 80010de:	fa22 f303 	lsr.w	r3, r2, r3
 80010e2:	4a09      	ldr	r2, [pc, #36]	@ (8001108 <HAL_RCC_ClockConfig+0x1cc>)
 80010e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80010e6:	4b09      	ldr	r3, [pc, #36]	@ (800110c <HAL_RCC_ClockConfig+0x1d0>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff f9a2 	bl	8000434 <HAL_InitTick>

  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40022000 	.word	0x40022000
 8001100:	40021000 	.word	0x40021000
 8001104:	08001ba8 	.word	0x08001ba8
 8001108:	20000000 	.word	0x20000000
 800110c:	20000004 	.word	0x20000004

08001110 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001110:	b480      	push	{r7}
 8001112:	b087      	sub	sp, #28
 8001114:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800112a:	4b1e      	ldr	r3, [pc, #120]	@ (80011a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 030c 	and.w	r3, r3, #12
 8001136:	2b04      	cmp	r3, #4
 8001138:	d002      	beq.n	8001140 <HAL_RCC_GetSysClockFreq+0x30>
 800113a:	2b08      	cmp	r3, #8
 800113c:	d003      	beq.n	8001146 <HAL_RCC_GetSysClockFreq+0x36>
 800113e:	e027      	b.n	8001190 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001140:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001142:	613b      	str	r3, [r7, #16]
      break;
 8001144:	e027      	b.n	8001196 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	0c9b      	lsrs	r3, r3, #18
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	4a17      	ldr	r2, [pc, #92]	@ (80011ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8001150:	5cd3      	ldrb	r3, [r2, r3]
 8001152:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d010      	beq.n	8001180 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800115e:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	0c5b      	lsrs	r3, r3, #17
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	4a11      	ldr	r2, [pc, #68]	@ (80011b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800116a:	5cd3      	ldrb	r3, [r2, r3]
 800116c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a0d      	ldr	r2, [pc, #52]	@ (80011a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001172:	fb03 f202 	mul.w	r2, r3, r2
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	fbb2 f3f3 	udiv	r3, r2, r3
 800117c:	617b      	str	r3, [r7, #20]
 800117e:	e004      	b.n	800118a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a0c      	ldr	r2, [pc, #48]	@ (80011b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001184:	fb02 f303 	mul.w	r3, r2, r3
 8001188:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	613b      	str	r3, [r7, #16]
      break;
 800118e:	e002      	b.n	8001196 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001190:	4b05      	ldr	r3, [pc, #20]	@ (80011a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001192:	613b      	str	r3, [r7, #16]
      break;
 8001194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001196:	693b      	ldr	r3, [r7, #16]
}
 8001198:	4618      	mov	r0, r3
 800119a:	371c      	adds	r7, #28
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40021000 	.word	0x40021000
 80011a8:	007a1200 	.word	0x007a1200
 80011ac:	08001bb8 	.word	0x08001bb8
 80011b0:	08001bc8 	.word	0x08001bc8
 80011b4:	003d0900 	.word	0x003d0900

080011b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80011c0:	4b0a      	ldr	r3, [pc, #40]	@ (80011ec <RCC_Delay+0x34>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a0a      	ldr	r2, [pc, #40]	@ (80011f0 <RCC_Delay+0x38>)
 80011c6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ca:	0a5b      	lsrs	r3, r3, #9
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	fb02 f303 	mul.w	r3, r2, r3
 80011d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80011d4:	bf00      	nop
  }
  while (Delay --);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	1e5a      	subs	r2, r3, #1
 80011da:	60fa      	str	r2, [r7, #12]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1f9      	bne.n	80011d4 <RCC_Delay+0x1c>
}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr
 80011ec:	20000000 	.word	0x20000000
 80011f0:	10624dd3 	.word	0x10624dd3

080011f4 <LCD16X2_DATA>:
#include "../../Util/Util.h"

//-----[ Alphanumeric LCD16X2 Functions ]-----

void LCD16X2_DATA(uint8_t LCD16X2_Index, unsigned char Data)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	460a      	mov	r2, r1
 80011fe:	71fb      	strb	r3, [r7, #7]
 8001200:	4613      	mov	r3, r2
 8001202:	71bb      	strb	r3, [r7, #6]
    if(Data & 1)
 8001204:	79bb      	ldrb	r3, [r7, #6]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	d014      	beq.n	8001238 <LCD16X2_DATA+0x44>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D4_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D4_PINx, 1);
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	4a5a      	ldr	r2, [pc, #360]	@ (800137c <LCD16X2_DATA+0x188>)
 8001212:	2134      	movs	r1, #52	@ 0x34
 8001214:	fb01 f303 	mul.w	r3, r1, r3
 8001218:	4413      	add	r3, r2
 800121a:	3304      	adds	r3, #4
 800121c:	6818      	ldr	r0, [r3, #0]
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	4a56      	ldr	r2, [pc, #344]	@ (800137c <LCD16X2_DATA+0x188>)
 8001222:	2134      	movs	r1, #52	@ 0x34
 8001224:	fb01 f303 	mul.w	r3, r1, r3
 8001228:	4413      	add	r3, r2
 800122a:	3308      	adds	r3, #8
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	2201      	movs	r2, #1
 8001230:	4619      	mov	r1, r3
 8001232:	f7ff fbcf 	bl	80009d4 <HAL_GPIO_WritePin>
 8001236:	e013      	b.n	8001260 <LCD16X2_DATA+0x6c>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D4_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D4_PINx, 0);
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	4a50      	ldr	r2, [pc, #320]	@ (800137c <LCD16X2_DATA+0x188>)
 800123c:	2134      	movs	r1, #52	@ 0x34
 800123e:	fb01 f303 	mul.w	r3, r1, r3
 8001242:	4413      	add	r3, r2
 8001244:	3304      	adds	r3, #4
 8001246:	6818      	ldr	r0, [r3, #0]
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	4a4c      	ldr	r2, [pc, #304]	@ (800137c <LCD16X2_DATA+0x188>)
 800124c:	2134      	movs	r1, #52	@ 0x34
 800124e:	fb01 f303 	mul.w	r3, r1, r3
 8001252:	4413      	add	r3, r2
 8001254:	3308      	adds	r3, #8
 8001256:	881b      	ldrh	r3, [r3, #0]
 8001258:	2200      	movs	r2, #0
 800125a:	4619      	mov	r1, r3
 800125c:	f7ff fbba 	bl	80009d4 <HAL_GPIO_WritePin>
    if(Data & 2)
 8001260:	79bb      	ldrb	r3, [r7, #6]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d014      	beq.n	8001294 <LCD16X2_DATA+0xa0>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D5_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D5_PINx, 1);
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	4a43      	ldr	r2, [pc, #268]	@ (800137c <LCD16X2_DATA+0x188>)
 800126e:	2134      	movs	r1, #52	@ 0x34
 8001270:	fb01 f303 	mul.w	r3, r1, r3
 8001274:	4413      	add	r3, r2
 8001276:	330c      	adds	r3, #12
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	4a3f      	ldr	r2, [pc, #252]	@ (800137c <LCD16X2_DATA+0x188>)
 800127e:	2134      	movs	r1, #52	@ 0x34
 8001280:	fb01 f303 	mul.w	r3, r1, r3
 8001284:	4413      	add	r3, r2
 8001286:	3310      	adds	r3, #16
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	2201      	movs	r2, #1
 800128c:	4619      	mov	r1, r3
 800128e:	f7ff fba1 	bl	80009d4 <HAL_GPIO_WritePin>
 8001292:	e013      	b.n	80012bc <LCD16X2_DATA+0xc8>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D5_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D5_PINx, 0);
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	4a39      	ldr	r2, [pc, #228]	@ (800137c <LCD16X2_DATA+0x188>)
 8001298:	2134      	movs	r1, #52	@ 0x34
 800129a:	fb01 f303 	mul.w	r3, r1, r3
 800129e:	4413      	add	r3, r2
 80012a0:	330c      	adds	r3, #12
 80012a2:	6818      	ldr	r0, [r3, #0]
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	4a35      	ldr	r2, [pc, #212]	@ (800137c <LCD16X2_DATA+0x188>)
 80012a8:	2134      	movs	r1, #52	@ 0x34
 80012aa:	fb01 f303 	mul.w	r3, r1, r3
 80012ae:	4413      	add	r3, r2
 80012b0:	3310      	adds	r3, #16
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	2200      	movs	r2, #0
 80012b6:	4619      	mov	r1, r3
 80012b8:	f7ff fb8c 	bl	80009d4 <HAL_GPIO_WritePin>
    if(Data & 4)
 80012bc:	79bb      	ldrb	r3, [r7, #6]
 80012be:	f003 0304 	and.w	r3, r3, #4
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d014      	beq.n	80012f0 <LCD16X2_DATA+0xfc>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D6_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D6_PINx, 1);
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	4a2c      	ldr	r2, [pc, #176]	@ (800137c <LCD16X2_DATA+0x188>)
 80012ca:	2134      	movs	r1, #52	@ 0x34
 80012cc:	fb01 f303 	mul.w	r3, r1, r3
 80012d0:	4413      	add	r3, r2
 80012d2:	3314      	adds	r3, #20
 80012d4:	6818      	ldr	r0, [r3, #0]
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	4a28      	ldr	r2, [pc, #160]	@ (800137c <LCD16X2_DATA+0x188>)
 80012da:	2134      	movs	r1, #52	@ 0x34
 80012dc:	fb01 f303 	mul.w	r3, r1, r3
 80012e0:	4413      	add	r3, r2
 80012e2:	3318      	adds	r3, #24
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	2201      	movs	r2, #1
 80012e8:	4619      	mov	r1, r3
 80012ea:	f7ff fb73 	bl	80009d4 <HAL_GPIO_WritePin>
 80012ee:	e013      	b.n	8001318 <LCD16X2_DATA+0x124>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D6_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D6_PINx, 0);
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	4a22      	ldr	r2, [pc, #136]	@ (800137c <LCD16X2_DATA+0x188>)
 80012f4:	2134      	movs	r1, #52	@ 0x34
 80012f6:	fb01 f303 	mul.w	r3, r1, r3
 80012fa:	4413      	add	r3, r2
 80012fc:	3314      	adds	r3, #20
 80012fe:	6818      	ldr	r0, [r3, #0]
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	4a1e      	ldr	r2, [pc, #120]	@ (800137c <LCD16X2_DATA+0x188>)
 8001304:	2134      	movs	r1, #52	@ 0x34
 8001306:	fb01 f303 	mul.w	r3, r1, r3
 800130a:	4413      	add	r3, r2
 800130c:	3318      	adds	r3, #24
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	2200      	movs	r2, #0
 8001312:	4619      	mov	r1, r3
 8001314:	f7ff fb5e 	bl	80009d4 <HAL_GPIO_WritePin>
    if(Data & 8)
 8001318:	79bb      	ldrb	r3, [r7, #6]
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	2b00      	cmp	r3, #0
 8001320:	d014      	beq.n	800134c <LCD16X2_DATA+0x158>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D7_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D7_PINx, 1);
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	4a15      	ldr	r2, [pc, #84]	@ (800137c <LCD16X2_DATA+0x188>)
 8001326:	2134      	movs	r1, #52	@ 0x34
 8001328:	fb01 f303 	mul.w	r3, r1, r3
 800132c:	4413      	add	r3, r2
 800132e:	331c      	adds	r3, #28
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	4a11      	ldr	r2, [pc, #68]	@ (800137c <LCD16X2_DATA+0x188>)
 8001336:	2134      	movs	r1, #52	@ 0x34
 8001338:	fb01 f303 	mul.w	r3, r1, r3
 800133c:	4413      	add	r3, r2
 800133e:	3320      	adds	r3, #32
 8001340:	881b      	ldrh	r3, [r3, #0]
 8001342:	2201      	movs	r2, #1
 8001344:	4619      	mov	r1, r3
 8001346:	f7ff fb45 	bl	80009d4 <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D7_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D7_PINx, 0);
}
 800134a:	e013      	b.n	8001374 <LCD16X2_DATA+0x180>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D7_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D7_PINx, 0);
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	4a0b      	ldr	r2, [pc, #44]	@ (800137c <LCD16X2_DATA+0x188>)
 8001350:	2134      	movs	r1, #52	@ 0x34
 8001352:	fb01 f303 	mul.w	r3, r1, r3
 8001356:	4413      	add	r3, r2
 8001358:	331c      	adds	r3, #28
 800135a:	6818      	ldr	r0, [r3, #0]
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	4a07      	ldr	r2, [pc, #28]	@ (800137c <LCD16X2_DATA+0x188>)
 8001360:	2134      	movs	r1, #52	@ 0x34
 8001362:	fb01 f303 	mul.w	r3, r1, r3
 8001366:	4413      	add	r3, r2
 8001368:	3320      	adds	r3, #32
 800136a:	881b      	ldrh	r3, [r3, #0]
 800136c:	2200      	movs	r2, #0
 800136e:	4619      	mov	r1, r3
 8001370:	f7ff fb30 	bl	80009d4 <HAL_GPIO_WritePin>
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	08001bcc 	.word	0x08001bcc

08001380 <LCD16X2_CMD>:

void LCD16X2_CMD(uint8_t LCD16X2_Index, unsigned char CMD)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	460a      	mov	r2, r1
 800138a:	71fb      	strb	r3, [r7, #7]
 800138c:	4613      	mov	r3, r2
 800138e:	71bb      	strb	r3, [r7, #6]
    // Select Command Register
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].RS_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].RS_PINx, 0);
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	4a57      	ldr	r2, [pc, #348]	@ (80014f0 <LCD16X2_CMD+0x170>)
 8001394:	2134      	movs	r1, #52	@ 0x34
 8001396:	fb01 f303 	mul.w	r3, r1, r3
 800139a:	4413      	add	r3, r2
 800139c:	332c      	adds	r3, #44	@ 0x2c
 800139e:	6818      	ldr	r0, [r3, #0]
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	4a53      	ldr	r2, [pc, #332]	@ (80014f0 <LCD16X2_CMD+0x170>)
 80013a4:	2134      	movs	r1, #52	@ 0x34
 80013a6:	fb01 f303 	mul.w	r3, r1, r3
 80013aa:	4413      	add	r3, r2
 80013ac:	3330      	adds	r3, #48	@ 0x30
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	2200      	movs	r2, #0
 80013b2:	4619      	mov	r1, r3
 80013b4:	f7ff fb0e 	bl	80009d4 <HAL_GPIO_WritePin>
    // Move The Command Data To LCD
	LCD16X2_DATA(LCD16X2_Index, CMD);
 80013b8:	79ba      	ldrb	r2, [r7, #6]
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	4611      	mov	r1, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff18 	bl	80011f4 <LCD16X2_DATA>
    // Send The EN Clock Signal
    HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	4a4a      	ldr	r2, [pc, #296]	@ (80014f0 <LCD16X2_CMD+0x170>)
 80013c8:	2134      	movs	r1, #52	@ 0x34
 80013ca:	fb01 f303 	mul.w	r3, r1, r3
 80013ce:	4413      	add	r3, r2
 80013d0:	3324      	adds	r3, #36	@ 0x24
 80013d2:	6818      	ldr	r0, [r3, #0]
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	4a46      	ldr	r2, [pc, #280]	@ (80014f0 <LCD16X2_CMD+0x170>)
 80013d8:	2134      	movs	r1, #52	@ 0x34
 80013da:	fb01 f303 	mul.w	r3, r1, r3
 80013de:	4413      	add	r3, r2
 80013e0:	3328      	adds	r3, #40	@ 0x28
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	2200      	movs	r2, #0
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff faf4 	bl	80009d4 <HAL_GPIO_WritePin>
    DELAY_US(5);
 80013ec:	4b41      	ldr	r3, [pc, #260]	@ (80014f4 <LCD16X2_CMD+0x174>)
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	61fb      	str	r3, [r7, #28]
 80013f2:	4b41      	ldr	r3, [pc, #260]	@ (80014f8 <LCD16X2_CMD+0x178>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a41      	ldr	r2, [pc, #260]	@ (80014fc <LCD16X2_CMD+0x17c>)
 80013f8:	fba2 2303 	umull	r2, r3, r2, r3
 80013fc:	0c9a      	lsrs	r2, r3, #18
 80013fe:	4613      	mov	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	441a      	add	r2, r3
 8001404:	4b3c      	ldr	r3, [pc, #240]	@ (80014f8 <LCD16X2_CMD+0x178>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	493c      	ldr	r1, [pc, #240]	@ (80014fc <LCD16X2_CMD+0x17c>)
 800140a:	fba1 1303 	umull	r1, r3, r1, r3
 800140e:	0c9b      	lsrs	r3, r3, #18
 8001410:	085b      	lsrs	r3, r3, #1
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	61bb      	str	r3, [r7, #24]
 8001416:	4b37      	ldr	r3, [pc, #220]	@ (80014f4 <LCD16X2_CMD+0x174>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	69fa      	ldr	r2, [r7, #28]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	429a      	cmp	r2, r3
 8001422:	d8f8      	bhi.n	8001416 <LCD16X2_CMD+0x96>
    HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 1);
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	4a32      	ldr	r2, [pc, #200]	@ (80014f0 <LCD16X2_CMD+0x170>)
 8001428:	2134      	movs	r1, #52	@ 0x34
 800142a:	fb01 f303 	mul.w	r3, r1, r3
 800142e:	4413      	add	r3, r2
 8001430:	3324      	adds	r3, #36	@ 0x24
 8001432:	6818      	ldr	r0, [r3, #0]
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	4a2e      	ldr	r2, [pc, #184]	@ (80014f0 <LCD16X2_CMD+0x170>)
 8001438:	2134      	movs	r1, #52	@ 0x34
 800143a:	fb01 f303 	mul.w	r3, r1, r3
 800143e:	4413      	add	r3, r2
 8001440:	3328      	adds	r3, #40	@ 0x28
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	2201      	movs	r2, #1
 8001446:	4619      	mov	r1, r3
 8001448:	f7ff fac4 	bl	80009d4 <HAL_GPIO_WritePin>
    DELAY_US(5);
 800144c:	4b29      	ldr	r3, [pc, #164]	@ (80014f4 <LCD16X2_CMD+0x174>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	4b29      	ldr	r3, [pc, #164]	@ (80014f8 <LCD16X2_CMD+0x178>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a29      	ldr	r2, [pc, #164]	@ (80014fc <LCD16X2_CMD+0x17c>)
 8001458:	fba2 2303 	umull	r2, r3, r2, r3
 800145c:	0c9a      	lsrs	r2, r3, #18
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	441a      	add	r2, r3
 8001464:	4b24      	ldr	r3, [pc, #144]	@ (80014f8 <LCD16X2_CMD+0x178>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4924      	ldr	r1, [pc, #144]	@ (80014fc <LCD16X2_CMD+0x17c>)
 800146a:	fba1 1303 	umull	r1, r3, r1, r3
 800146e:	0c9b      	lsrs	r3, r3, #18
 8001470:	085b      	lsrs	r3, r3, #1
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	4b1f      	ldr	r3, [pc, #124]	@ (80014f4 <LCD16X2_CMD+0x174>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	429a      	cmp	r2, r3
 8001482:	d8f8      	bhi.n	8001476 <LCD16X2_CMD+0xf6>
    HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	4a1a      	ldr	r2, [pc, #104]	@ (80014f0 <LCD16X2_CMD+0x170>)
 8001488:	2134      	movs	r1, #52	@ 0x34
 800148a:	fb01 f303 	mul.w	r3, r1, r3
 800148e:	4413      	add	r3, r2
 8001490:	3324      	adds	r3, #36	@ 0x24
 8001492:	6818      	ldr	r0, [r3, #0]
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	4a16      	ldr	r2, [pc, #88]	@ (80014f0 <LCD16X2_CMD+0x170>)
 8001498:	2134      	movs	r1, #52	@ 0x34
 800149a:	fb01 f303 	mul.w	r3, r1, r3
 800149e:	4413      	add	r3, r2
 80014a0:	3328      	adds	r3, #40	@ 0x28
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	2200      	movs	r2, #0
 80014a6:	4619      	mov	r1, r3
 80014a8:	f7ff fa94 	bl	80009d4 <HAL_GPIO_WritePin>
    DELAY_US(100);
 80014ac:	4b11      	ldr	r3, [pc, #68]	@ (80014f4 <LCD16X2_CMD+0x174>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	4b11      	ldr	r3, [pc, #68]	@ (80014f8 <LCD16X2_CMD+0x178>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a11      	ldr	r2, [pc, #68]	@ (80014fc <LCD16X2_CMD+0x17c>)
 80014b8:	fba2 2303 	umull	r2, r3, r2, r3
 80014bc:	0c9b      	lsrs	r3, r3, #18
 80014be:	2264      	movs	r2, #100	@ 0x64
 80014c0:	fb03 f202 	mul.w	r2, r3, r2
 80014c4:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <LCD16X2_CMD+0x178>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	490c      	ldr	r1, [pc, #48]	@ (80014fc <LCD16X2_CMD+0x17c>)
 80014ca:	fba1 1303 	umull	r1, r3, r1, r3
 80014ce:	0c9b      	lsrs	r3, r3, #18
 80014d0:	085b      	lsrs	r3, r3, #1
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	4b07      	ldr	r3, [pc, #28]	@ (80014f4 <LCD16X2_CMD+0x174>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d8f8      	bhi.n	80014d6 <LCD16X2_CMD+0x156>
}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
 80014e8:	3720      	adds	r7, #32
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	08001bcc 	.word	0x08001bcc
 80014f4:	e000e010 	.word	0xe000e010
 80014f8:	20000000 	.word	0x20000000
 80014fc:	431bde83 	.word	0x431bde83

08001500 <LCD16X2_Clear>:

void LCD16X2_Clear(uint8_t LCD16X2_Index)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
	LCD16X2_CMD(LCD16X2_Index, 0);
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff ff36 	bl	8001380 <LCD16X2_CMD>
	LCD16X2_CMD(LCD16X2_Index, 1);
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	2101      	movs	r1, #1
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff31 	bl	8001380 <LCD16X2_CMD>
    DELAY_MS(2);
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	e01f      	b.n	8001564 <LCD16X2_Clear+0x64>
 8001524:	4b13      	ldr	r3, [pc, #76]	@ (8001574 <LCD16X2_Clear+0x74>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	4b13      	ldr	r3, [pc, #76]	@ (8001578 <LCD16X2_Clear+0x78>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a13      	ldr	r2, [pc, #76]	@ (800157c <LCD16X2_Clear+0x7c>)
 8001530:	fba2 2303 	umull	r2, r3, r2, r3
 8001534:	0c9b      	lsrs	r3, r3, #18
 8001536:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800153a:	fb03 f202 	mul.w	r2, r3, r2
 800153e:	4b0e      	ldr	r3, [pc, #56]	@ (8001578 <LCD16X2_Clear+0x78>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	490e      	ldr	r1, [pc, #56]	@ (800157c <LCD16X2_Clear+0x7c>)
 8001544:	fba1 1303 	umull	r1, r3, r1, r3
 8001548:	0c9b      	lsrs	r3, r3, #18
 800154a:	085b      	lsrs	r3, r3, #1
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	4b08      	ldr	r3, [pc, #32]	@ (8001574 <LCD16X2_Clear+0x74>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	429a      	cmp	r2, r3
 800155c:	d8f8      	bhi.n	8001550 <LCD16X2_Clear+0x50>
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	3301      	adds	r3, #1
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d9dc      	bls.n	8001524 <LCD16X2_Clear+0x24>
}
 800156a:	bf00      	nop
 800156c:	bf00      	nop
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	e000e010 	.word	0xe000e010
 8001578:	20000000 	.word	0x20000000
 800157c:	431bde83 	.word	0x431bde83

08001580 <LCD16X2_Set_Cursor>:

void LCD16X2_Set_Cursor(uint8_t LCD16X2_Index, unsigned char r, unsigned char c)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
 800158a:	460b      	mov	r3, r1
 800158c:	71bb      	strb	r3, [r7, #6]
 800158e:	4613      	mov	r3, r2
 8001590:	717b      	strb	r3, [r7, #5]
    unsigned char Temp,Low4,High4;
    if(r == 1)
 8001592:	79bb      	ldrb	r3, [r7, #6]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d115      	bne.n	80015c4 <LCD16X2_Set_Cursor+0x44>
    {
      Temp  = 0x80 + c - 1; //0x80 is used to move the cursor
 8001598:	797b      	ldrb	r3, [r7, #5]
 800159a:	337f      	adds	r3, #127	@ 0x7f
 800159c:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	091b      	lsrs	r3, r3, #4
 80015a2:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	737b      	strb	r3, [r7, #13]
      LCD16X2_CMD(LCD16X2_Index, High4);
 80015ac:	7bba      	ldrb	r2, [r7, #14]
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	4611      	mov	r1, r2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fee4 	bl	8001380 <LCD16X2_CMD>
      LCD16X2_CMD(LCD16X2_Index, Low4);
 80015b8:	7b7a      	ldrb	r2, [r7, #13]
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	4611      	mov	r1, r2
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fede 	bl	8001380 <LCD16X2_CMD>
    }
    if(r == 2)
 80015c4:	79bb      	ldrb	r3, [r7, #6]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d115      	bne.n	80015f6 <LCD16X2_Set_Cursor+0x76>
    {
      Temp  = 0xC0 + c - 1;
 80015ca:	797b      	ldrb	r3, [r7, #5]
 80015cc:	3b41      	subs	r3, #65	@ 0x41
 80015ce:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	091b      	lsrs	r3, r3, #4
 80015d4:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	f003 030f 	and.w	r3, r3, #15
 80015dc:	737b      	strb	r3, [r7, #13]
      LCD16X2_CMD(LCD16X2_Index, High4);
 80015de:	7bba      	ldrb	r2, [r7, #14]
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	4611      	mov	r1, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fecb 	bl	8001380 <LCD16X2_CMD>
      LCD16X2_CMD(LCD16X2_Index, Low4);
 80015ea:	7b7a      	ldrb	r2, [r7, #13]
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	4611      	mov	r1, r2
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fec5 	bl	8001380 <LCD16X2_CMD>
    }
}
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <LCD16X2_Init>:

void LCD16X2_Init(uint8_t LCD16X2_Index)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08e      	sub	sp, #56	@ 0x38
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 800160a:	bf00      	nop
 800160c:	f7fe ff54 	bl	80004b8 <HAL_GetTick>
 8001610:	4603      	mov	r3, r0
 8001612:	2b31      	cmp	r3, #49	@ 0x31
 8001614:	d9fa      	bls.n	800160c <LCD16X2_Init+0xc>
	// The Init. Procedure As Described In The Datasheet
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].RS_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].RS_PINx, 0);
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	4a7c      	ldr	r2, [pc, #496]	@ (800180c <LCD16X2_Init+0x20c>)
 800161a:	2134      	movs	r1, #52	@ 0x34
 800161c:	fb01 f303 	mul.w	r3, r1, r3
 8001620:	4413      	add	r3, r2
 8001622:	332c      	adds	r3, #44	@ 0x2c
 8001624:	6818      	ldr	r0, [r3, #0]
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	4a78      	ldr	r2, [pc, #480]	@ (800180c <LCD16X2_Init+0x20c>)
 800162a:	2134      	movs	r1, #52	@ 0x34
 800162c:	fb01 f303 	mul.w	r3, r1, r3
 8001630:	4413      	add	r3, r2
 8001632:	3330      	adds	r3, #48	@ 0x30
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	2200      	movs	r2, #0
 8001638:	4619      	mov	r1, r3
 800163a:	f7ff f9cb 	bl	80009d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	4a72      	ldr	r2, [pc, #456]	@ (800180c <LCD16X2_Init+0x20c>)
 8001642:	2134      	movs	r1, #52	@ 0x34
 8001644:	fb01 f303 	mul.w	r3, r1, r3
 8001648:	4413      	add	r3, r2
 800164a:	3324      	adds	r3, #36	@ 0x24
 800164c:	6818      	ldr	r0, [r3, #0]
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	4a6e      	ldr	r2, [pc, #440]	@ (800180c <LCD16X2_Init+0x20c>)
 8001652:	2134      	movs	r1, #52	@ 0x34
 8001654:	fb01 f303 	mul.w	r3, r1, r3
 8001658:	4413      	add	r3, r2
 800165a:	3328      	adds	r3, #40	@ 0x28
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	2200      	movs	r2, #0
 8001660:	4619      	mov	r1, r3
 8001662:	f7ff f9b7 	bl	80009d4 <HAL_GPIO_WritePin>
    // Init in 4-Bit Data Mode
	LCD16X2_DATA(LCD16X2_Index, 0x00);
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fdc2 	bl	80011f4 <LCD16X2_DATA>
    DELAY_MS(150);
 8001670:	2300      	movs	r3, #0
 8001672:	637b      	str	r3, [r7, #52]	@ 0x34
 8001674:	e01f      	b.n	80016b6 <LCD16X2_Init+0xb6>
 8001676:	4b66      	ldr	r3, [pc, #408]	@ (8001810 <LCD16X2_Init+0x210>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	4b65      	ldr	r3, [pc, #404]	@ (8001814 <LCD16X2_Init+0x214>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a65      	ldr	r2, [pc, #404]	@ (8001818 <LCD16X2_Init+0x218>)
 8001682:	fba2 2303 	umull	r2, r3, r2, r3
 8001686:	0c9b      	lsrs	r3, r3, #18
 8001688:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800168c:	fb03 f202 	mul.w	r2, r3, r2
 8001690:	4b60      	ldr	r3, [pc, #384]	@ (8001814 <LCD16X2_Init+0x214>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4960      	ldr	r1, [pc, #384]	@ (8001818 <LCD16X2_Init+0x218>)
 8001696:	fba1 1303 	umull	r1, r3, r1, r3
 800169a:	0c9b      	lsrs	r3, r3, #18
 800169c:	085b      	lsrs	r3, r3, #1
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b5b      	ldr	r3, [pc, #364]	@ (8001810 <LCD16X2_Init+0x210>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d8f8      	bhi.n	80016a2 <LCD16X2_Init+0xa2>
 80016b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016b2:	3301      	adds	r3, #1
 80016b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80016b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016b8:	2b95      	cmp	r3, #149	@ 0x95
 80016ba:	d9dc      	bls.n	8001676 <LCD16X2_Init+0x76>
    LCD16X2_CMD(LCD16X2_Index, 0x03);
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	2103      	movs	r1, #3
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fe5d 	bl	8001380 <LCD16X2_CMD>
    DELAY_MS(5);
 80016c6:	2300      	movs	r3, #0
 80016c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80016ca:	e01f      	b.n	800170c <LCD16X2_Init+0x10c>
 80016cc:	4b50      	ldr	r3, [pc, #320]	@ (8001810 <LCD16X2_Init+0x210>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	61bb      	str	r3, [r7, #24]
 80016d2:	4b50      	ldr	r3, [pc, #320]	@ (8001814 <LCD16X2_Init+0x214>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a50      	ldr	r2, [pc, #320]	@ (8001818 <LCD16X2_Init+0x218>)
 80016d8:	fba2 2303 	umull	r2, r3, r2, r3
 80016dc:	0c9b      	lsrs	r3, r3, #18
 80016de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80016e2:	fb03 f202 	mul.w	r2, r3, r2
 80016e6:	4b4b      	ldr	r3, [pc, #300]	@ (8001814 <LCD16X2_Init+0x214>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	494b      	ldr	r1, [pc, #300]	@ (8001818 <LCD16X2_Init+0x218>)
 80016ec:	fba1 1303 	umull	r1, r3, r1, r3
 80016f0:	0c9b      	lsrs	r3, r3, #18
 80016f2:	085b      	lsrs	r3, r3, #1
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	4b45      	ldr	r3, [pc, #276]	@ (8001810 <LCD16X2_Init+0x210>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	429a      	cmp	r2, r3
 8001704:	d8f8      	bhi.n	80016f8 <LCD16X2_Init+0xf8>
 8001706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001708:	3301      	adds	r3, #1
 800170a:	633b      	str	r3, [r7, #48]	@ 0x30
 800170c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800170e:	2b04      	cmp	r3, #4
 8001710:	d9dc      	bls.n	80016cc <LCD16X2_Init+0xcc>
    LCD16X2_CMD(LCD16X2_Index, 0x03);
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	2103      	movs	r1, #3
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fe32 	bl	8001380 <LCD16X2_CMD>
    DELAY_MS(5);
 800171c:	2300      	movs	r3, #0
 800171e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001720:	e01f      	b.n	8001762 <LCD16X2_Init+0x162>
 8001722:	4b3b      	ldr	r3, [pc, #236]	@ (8001810 <LCD16X2_Init+0x210>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	623b      	str	r3, [r7, #32]
 8001728:	4b3a      	ldr	r3, [pc, #232]	@ (8001814 <LCD16X2_Init+0x214>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a3a      	ldr	r2, [pc, #232]	@ (8001818 <LCD16X2_Init+0x218>)
 800172e:	fba2 2303 	umull	r2, r3, r2, r3
 8001732:	0c9b      	lsrs	r3, r3, #18
 8001734:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001738:	fb03 f202 	mul.w	r2, r3, r2
 800173c:	4b35      	ldr	r3, [pc, #212]	@ (8001814 <LCD16X2_Init+0x214>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4935      	ldr	r1, [pc, #212]	@ (8001818 <LCD16X2_Init+0x218>)
 8001742:	fba1 1303 	umull	r1, r3, r1, r3
 8001746:	0c9b      	lsrs	r3, r3, #18
 8001748:	085b      	lsrs	r3, r3, #1
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	61fb      	str	r3, [r7, #28]
 800174e:	4b30      	ldr	r3, [pc, #192]	@ (8001810 <LCD16X2_Init+0x210>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	6a3a      	ldr	r2, [r7, #32]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	69fa      	ldr	r2, [r7, #28]
 8001758:	429a      	cmp	r2, r3
 800175a:	d8f8      	bhi.n	800174e <LCD16X2_Init+0x14e>
 800175c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800175e:	3301      	adds	r3, #1
 8001760:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001764:	2b04      	cmp	r3, #4
 8001766:	d9dc      	bls.n	8001722 <LCD16X2_Init+0x122>
    LCD16X2_CMD(LCD16X2_Index, 0x03);
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	2103      	movs	r1, #3
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fe07 	bl	8001380 <LCD16X2_CMD>
    DELAY_US(150);
 8001772:	4b27      	ldr	r3, [pc, #156]	@ (8001810 <LCD16X2_Init+0x210>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001778:	4b26      	ldr	r3, [pc, #152]	@ (8001814 <LCD16X2_Init+0x214>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a26      	ldr	r2, [pc, #152]	@ (8001818 <LCD16X2_Init+0x218>)
 800177e:	fba2 2303 	umull	r2, r3, r2, r3
 8001782:	0c9b      	lsrs	r3, r3, #18
 8001784:	2296      	movs	r2, #150	@ 0x96
 8001786:	fb03 f202 	mul.w	r2, r3, r2
 800178a:	4b22      	ldr	r3, [pc, #136]	@ (8001814 <LCD16X2_Init+0x214>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4922      	ldr	r1, [pc, #136]	@ (8001818 <LCD16X2_Init+0x218>)
 8001790:	fba1 1303 	umull	r1, r3, r1, r3
 8001794:	0c9b      	lsrs	r3, r3, #18
 8001796:	085b      	lsrs	r3, r3, #1
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	627b      	str	r3, [r7, #36]	@ 0x24
 800179c:	4b1c      	ldr	r3, [pc, #112]	@ (8001810 <LCD16X2_Init+0x210>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d8f8      	bhi.n	800179c <LCD16X2_Init+0x19c>
    // The Rest of The Init Sequence As Defined in The Hitachi HD44780 Datasheet
    LCD16X2_CMD(LCD16X2_Index, 0x02);
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	2102      	movs	r1, #2
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fde6 	bl	8001380 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x02);
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	2102      	movs	r1, #2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fde1 	bl	8001380 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x08);
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	2108      	movs	r1, #8
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fddc 	bl	8001380 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x00);
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	2100      	movs	r1, #0
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fdd7 	bl	8001380 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x0C);
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	210c      	movs	r1, #12
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fdd2 	bl	8001380 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x00);
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	2100      	movs	r1, #0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fdcd 	bl	8001380 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x06);
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	2106      	movs	r1, #6
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fdc8 	bl	8001380 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x00);
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	2100      	movs	r1, #0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fdc3 	bl	8001380 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x01);
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	2101      	movs	r1, #1
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fdbe 	bl	8001380 <LCD16X2_CMD>
}
 8001804:	bf00      	nop
 8001806:	3738      	adds	r7, #56	@ 0x38
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	08001bcc 	.word	0x08001bcc
 8001810:	e000e010 	.word	0xe000e010
 8001814:	20000000 	.word	0x20000000
 8001818:	431bde83 	.word	0x431bde83

0800181c <LCD16X2_Write_Char>:

void LCD16X2_Write_Char(uint8_t LCD16X2_Index, char Data)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b090      	sub	sp, #64	@ 0x40
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	460a      	mov	r2, r1
 8001826:	71fb      	strb	r3, [r7, #7]
 8001828:	4613      	mov	r3, r2
 800182a:	71bb      	strb	r3, [r7, #6]
   char Low4,High4;
   Low4  = Data & 0x0F;
 800182c:	79bb      	ldrb	r3, [r7, #6]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
   High4 = Data & 0xF0;
 8001836:	79bb      	ldrb	r3, [r7, #6]
 8001838:	f023 030f 	bic.w	r3, r3, #15
 800183c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].RS_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].RS_PINx, 1);
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	4aa4      	ldr	r2, [pc, #656]	@ (8001ad4 <LCD16X2_Write_Char+0x2b8>)
 8001844:	2134      	movs	r1, #52	@ 0x34
 8001846:	fb01 f303 	mul.w	r3, r1, r3
 800184a:	4413      	add	r3, r2
 800184c:	332c      	adds	r3, #44	@ 0x2c
 800184e:	6818      	ldr	r0, [r3, #0]
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	4aa0      	ldr	r2, [pc, #640]	@ (8001ad4 <LCD16X2_Write_Char+0x2b8>)
 8001854:	2134      	movs	r1, #52	@ 0x34
 8001856:	fb01 f303 	mul.w	r3, r1, r3
 800185a:	4413      	add	r3, r2
 800185c:	3330      	adds	r3, #48	@ 0x30
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	2201      	movs	r2, #1
 8001862:	4619      	mov	r1, r3
 8001864:	f7ff f8b6 	bl	80009d4 <HAL_GPIO_WritePin>

   LCD16X2_DATA(LCD16X2_Index, (High4>>4));
 8001868:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800186c:	091b      	lsrs	r3, r3, #4
 800186e:	b2da      	uxtb	r2, r3
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	4611      	mov	r1, r2
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fcbd 	bl	80011f4 <LCD16X2_DATA>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	4a95      	ldr	r2, [pc, #596]	@ (8001ad4 <LCD16X2_Write_Char+0x2b8>)
 800187e:	2134      	movs	r1, #52	@ 0x34
 8001880:	fb01 f303 	mul.w	r3, r1, r3
 8001884:	4413      	add	r3, r2
 8001886:	3324      	adds	r3, #36	@ 0x24
 8001888:	6818      	ldr	r0, [r3, #0]
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	4a91      	ldr	r2, [pc, #580]	@ (8001ad4 <LCD16X2_Write_Char+0x2b8>)
 800188e:	2134      	movs	r1, #52	@ 0x34
 8001890:	fb01 f303 	mul.w	r3, r1, r3
 8001894:	4413      	add	r3, r2
 8001896:	3328      	adds	r3, #40	@ 0x28
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	2200      	movs	r2, #0
 800189c:	4619      	mov	r1, r3
 800189e:	f7ff f899 	bl	80009d4 <HAL_GPIO_WritePin>
   DELAY_US(5);
 80018a2:	4b8d      	ldr	r3, [pc, #564]	@ (8001ad8 <LCD16X2_Write_Char+0x2bc>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018a8:	4b8c      	ldr	r3, [pc, #560]	@ (8001adc <LCD16X2_Write_Char+0x2c0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a8c      	ldr	r2, [pc, #560]	@ (8001ae0 <LCD16X2_Write_Char+0x2c4>)
 80018ae:	fba2 2303 	umull	r2, r3, r2, r3
 80018b2:	0c9a      	lsrs	r2, r3, #18
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	441a      	add	r2, r3
 80018ba:	4b88      	ldr	r3, [pc, #544]	@ (8001adc <LCD16X2_Write_Char+0x2c0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4988      	ldr	r1, [pc, #544]	@ (8001ae0 <LCD16X2_Write_Char+0x2c4>)
 80018c0:	fba1 1303 	umull	r1, r3, r1, r3
 80018c4:	0c9b      	lsrs	r3, r3, #18
 80018c6:	085b      	lsrs	r3, r3, #1
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80018cc:	4b82      	ldr	r3, [pc, #520]	@ (8001ad8 <LCD16X2_Write_Char+0x2bc>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d8f8      	bhi.n	80018cc <LCD16X2_Write_Char+0xb0>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 1);
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	4a7d      	ldr	r2, [pc, #500]	@ (8001ad4 <LCD16X2_Write_Char+0x2b8>)
 80018de:	2134      	movs	r1, #52	@ 0x34
 80018e0:	fb01 f303 	mul.w	r3, r1, r3
 80018e4:	4413      	add	r3, r2
 80018e6:	3324      	adds	r3, #36	@ 0x24
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	4a79      	ldr	r2, [pc, #484]	@ (8001ad4 <LCD16X2_Write_Char+0x2b8>)
 80018ee:	2134      	movs	r1, #52	@ 0x34
 80018f0:	fb01 f303 	mul.w	r3, r1, r3
 80018f4:	4413      	add	r3, r2
 80018f6:	3328      	adds	r3, #40	@ 0x28
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	2201      	movs	r2, #1
 80018fc:	4619      	mov	r1, r3
 80018fe:	f7ff f869 	bl	80009d4 <HAL_GPIO_WritePin>
   DELAY_US(5);
 8001902:	4b75      	ldr	r3, [pc, #468]	@ (8001ad8 <LCD16X2_Write_Char+0x2bc>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	633b      	str	r3, [r7, #48]	@ 0x30
 8001908:	4b74      	ldr	r3, [pc, #464]	@ (8001adc <LCD16X2_Write_Char+0x2c0>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a74      	ldr	r2, [pc, #464]	@ (8001ae0 <LCD16X2_Write_Char+0x2c4>)
 800190e:	fba2 2303 	umull	r2, r3, r2, r3
 8001912:	0c9a      	lsrs	r2, r3, #18
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	441a      	add	r2, r3
 800191a:	4b70      	ldr	r3, [pc, #448]	@ (8001adc <LCD16X2_Write_Char+0x2c0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4970      	ldr	r1, [pc, #448]	@ (8001ae0 <LCD16X2_Write_Char+0x2c4>)
 8001920:	fba1 1303 	umull	r1, r3, r1, r3
 8001924:	0c9b      	lsrs	r3, r3, #18
 8001926:	085b      	lsrs	r3, r3, #1
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800192c:	4b6a      	ldr	r3, [pc, #424]	@ (8001ad8 <LCD16X2_Write_Char+0x2bc>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001936:	429a      	cmp	r2, r3
 8001938:	d8f8      	bhi.n	800192c <LCD16X2_Write_Char+0x110>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	4a65      	ldr	r2, [pc, #404]	@ (8001ad4 <LCD16X2_Write_Char+0x2b8>)
 800193e:	2134      	movs	r1, #52	@ 0x34
 8001940:	fb01 f303 	mul.w	r3, r1, r3
 8001944:	4413      	add	r3, r2
 8001946:	3324      	adds	r3, #36	@ 0x24
 8001948:	6818      	ldr	r0, [r3, #0]
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	4a61      	ldr	r2, [pc, #388]	@ (8001ad4 <LCD16X2_Write_Char+0x2b8>)
 800194e:	2134      	movs	r1, #52	@ 0x34
 8001950:	fb01 f303 	mul.w	r3, r1, r3
 8001954:	4413      	add	r3, r2
 8001956:	3328      	adds	r3, #40	@ 0x28
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	2200      	movs	r2, #0
 800195c:	4619      	mov	r1, r3
 800195e:	f7ff f839 	bl	80009d4 <HAL_GPIO_WritePin>
   DELAY_US(100);
 8001962:	4b5d      	ldr	r3, [pc, #372]	@ (8001ad8 <LCD16X2_Write_Char+0x2bc>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001968:	4b5c      	ldr	r3, [pc, #368]	@ (8001adc <LCD16X2_Write_Char+0x2c0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a5c      	ldr	r2, [pc, #368]	@ (8001ae0 <LCD16X2_Write_Char+0x2c4>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	0c9b      	lsrs	r3, r3, #18
 8001974:	2264      	movs	r2, #100	@ 0x64
 8001976:	fb03 f202 	mul.w	r2, r3, r2
 800197a:	4b58      	ldr	r3, [pc, #352]	@ (8001adc <LCD16X2_Write_Char+0x2c0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4958      	ldr	r1, [pc, #352]	@ (8001ae0 <LCD16X2_Write_Char+0x2c4>)
 8001980:	fba1 1303 	umull	r1, r3, r1, r3
 8001984:	0c9b      	lsrs	r3, r3, #18
 8001986:	085b      	lsrs	r3, r3, #1
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	627b      	str	r3, [r7, #36]	@ 0x24
 800198c:	4b52      	ldr	r3, [pc, #328]	@ (8001ad8 <LCD16X2_Write_Char+0x2bc>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001996:	429a      	cmp	r2, r3
 8001998:	d8f8      	bhi.n	800198c <LCD16X2_Write_Char+0x170>

   LCD16X2_DATA(LCD16X2_Index, Low4);
 800199a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	4611      	mov	r1, r2
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fc26 	bl	80011f4 <LCD16X2_DATA>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	4a4a      	ldr	r2, [pc, #296]	@ (8001ad4 <LCD16X2_Write_Char+0x2b8>)
 80019ac:	2134      	movs	r1, #52	@ 0x34
 80019ae:	fb01 f303 	mul.w	r3, r1, r3
 80019b2:	4413      	add	r3, r2
 80019b4:	3324      	adds	r3, #36	@ 0x24
 80019b6:	6818      	ldr	r0, [r3, #0]
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	4a46      	ldr	r2, [pc, #280]	@ (8001ad4 <LCD16X2_Write_Char+0x2b8>)
 80019bc:	2134      	movs	r1, #52	@ 0x34
 80019be:	fb01 f303 	mul.w	r3, r1, r3
 80019c2:	4413      	add	r3, r2
 80019c4:	3328      	adds	r3, #40	@ 0x28
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	2200      	movs	r2, #0
 80019ca:	4619      	mov	r1, r3
 80019cc:	f7ff f802 	bl	80009d4 <HAL_GPIO_WritePin>
   DELAY_US(5);
 80019d0:	4b41      	ldr	r3, [pc, #260]	@ (8001ad8 <LCD16X2_Write_Char+0x2bc>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	623b      	str	r3, [r7, #32]
 80019d6:	4b41      	ldr	r3, [pc, #260]	@ (8001adc <LCD16X2_Write_Char+0x2c0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a41      	ldr	r2, [pc, #260]	@ (8001ae0 <LCD16X2_Write_Char+0x2c4>)
 80019dc:	fba2 2303 	umull	r2, r3, r2, r3
 80019e0:	0c9a      	lsrs	r2, r3, #18
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	441a      	add	r2, r3
 80019e8:	4b3c      	ldr	r3, [pc, #240]	@ (8001adc <LCD16X2_Write_Char+0x2c0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	493c      	ldr	r1, [pc, #240]	@ (8001ae0 <LCD16X2_Write_Char+0x2c4>)
 80019ee:	fba1 1303 	umull	r1, r3, r1, r3
 80019f2:	0c9b      	lsrs	r3, r3, #18
 80019f4:	085b      	lsrs	r3, r3, #1
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	4b37      	ldr	r3, [pc, #220]	@ (8001ad8 <LCD16X2_Write_Char+0x2bc>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	6a3a      	ldr	r2, [r7, #32]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	69fa      	ldr	r2, [r7, #28]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d8f8      	bhi.n	80019fa <LCD16X2_Write_Char+0x1de>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 1);
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	4a32      	ldr	r2, [pc, #200]	@ (8001ad4 <LCD16X2_Write_Char+0x2b8>)
 8001a0c:	2134      	movs	r1, #52	@ 0x34
 8001a0e:	fb01 f303 	mul.w	r3, r1, r3
 8001a12:	4413      	add	r3, r2
 8001a14:	3324      	adds	r3, #36	@ 0x24
 8001a16:	6818      	ldr	r0, [r3, #0]
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	4a2e      	ldr	r2, [pc, #184]	@ (8001ad4 <LCD16X2_Write_Char+0x2b8>)
 8001a1c:	2134      	movs	r1, #52	@ 0x34
 8001a1e:	fb01 f303 	mul.w	r3, r1, r3
 8001a22:	4413      	add	r3, r2
 8001a24:	3328      	adds	r3, #40	@ 0x28
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f7fe ffd2 	bl	80009d4 <HAL_GPIO_WritePin>
   DELAY_US(5);
 8001a30:	4b29      	ldr	r3, [pc, #164]	@ (8001ad8 <LCD16X2_Write_Char+0x2bc>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	61bb      	str	r3, [r7, #24]
 8001a36:	4b29      	ldr	r3, [pc, #164]	@ (8001adc <LCD16X2_Write_Char+0x2c0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a29      	ldr	r2, [pc, #164]	@ (8001ae0 <LCD16X2_Write_Char+0x2c4>)
 8001a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a40:	0c9a      	lsrs	r2, r3, #18
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	441a      	add	r2, r3
 8001a48:	4b24      	ldr	r3, [pc, #144]	@ (8001adc <LCD16X2_Write_Char+0x2c0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4924      	ldr	r1, [pc, #144]	@ (8001ae0 <LCD16X2_Write_Char+0x2c4>)
 8001a4e:	fba1 1303 	umull	r1, r3, r1, r3
 8001a52:	0c9b      	lsrs	r3, r3, #18
 8001a54:	085b      	lsrs	r3, r3, #1
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad8 <LCD16X2_Write_Char+0x2bc>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d8f8      	bhi.n	8001a5a <LCD16X2_Write_Char+0x23e>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	4a1a      	ldr	r2, [pc, #104]	@ (8001ad4 <LCD16X2_Write_Char+0x2b8>)
 8001a6c:	2134      	movs	r1, #52	@ 0x34
 8001a6e:	fb01 f303 	mul.w	r3, r1, r3
 8001a72:	4413      	add	r3, r2
 8001a74:	3324      	adds	r3, #36	@ 0x24
 8001a76:	6818      	ldr	r0, [r3, #0]
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	4a16      	ldr	r2, [pc, #88]	@ (8001ad4 <LCD16X2_Write_Char+0x2b8>)
 8001a7c:	2134      	movs	r1, #52	@ 0x34
 8001a7e:	fb01 f303 	mul.w	r3, r1, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	3328      	adds	r3, #40	@ 0x28
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f7fe ffa2 	bl	80009d4 <HAL_GPIO_WritePin>
   DELAY_US(100);
 8001a90:	4b11      	ldr	r3, [pc, #68]	@ (8001ad8 <LCD16X2_Write_Char+0x2bc>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <LCD16X2_Write_Char+0x2c0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a11      	ldr	r2, [pc, #68]	@ (8001ae0 <LCD16X2_Write_Char+0x2c4>)
 8001a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa0:	0c9b      	lsrs	r3, r3, #18
 8001aa2:	2264      	movs	r2, #100	@ 0x64
 8001aa4:	fb03 f202 	mul.w	r2, r3, r2
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8001adc <LCD16X2_Write_Char+0x2c0>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	490c      	ldr	r1, [pc, #48]	@ (8001ae0 <LCD16X2_Write_Char+0x2c4>)
 8001aae:	fba1 1303 	umull	r1, r3, r1, r3
 8001ab2:	0c9b      	lsrs	r3, r3, #18
 8001ab4:	085b      	lsrs	r3, r3, #1
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	4b07      	ldr	r3, [pc, #28]	@ (8001ad8 <LCD16X2_Write_Char+0x2bc>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d8f8      	bhi.n	8001aba <LCD16X2_Write_Char+0x29e>
}
 8001ac8:	bf00      	nop
 8001aca:	bf00      	nop
 8001acc:	3740      	adds	r7, #64	@ 0x40
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	08001bcc 	.word	0x08001bcc
 8001ad8:	e000e010 	.word	0xe000e010
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	431bde83 	.word	0x431bde83

08001ae4 <LCD16X2_Write_String>:

void LCD16X2_Write_String(uint8_t LCD16X2_Index, char *str)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	6039      	str	r1, [r7, #0]
 8001aee:	71fb      	strb	r3, [r7, #7]
    int i;
    for(i=0; str[i]!='\0'; i++)
 8001af0:	2300      	movs	r3, #0
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	e00b      	b.n	8001b0e <LCD16X2_Write_String+0x2a>
    {
    	LCD16X2_Write_Char(LCD16X2_Index, str[i]);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	781a      	ldrb	r2, [r3, #0]
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	4611      	mov	r1, r2
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff fe8a 	bl	800181c <LCD16X2_Write_Char>
    for(i=0; str[i]!='\0'; i++)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1ed      	bne.n	8001af6 <LCD16X2_Write_String+0x12>
    }
}
 8001b1a:	bf00      	nop
 8001b1c:	bf00      	nop
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <memset>:
 8001b24:	4603      	mov	r3, r0
 8001b26:	4402      	add	r2, r0
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d100      	bne.n	8001b2e <memset+0xa>
 8001b2c:	4770      	bx	lr
 8001b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8001b32:	e7f9      	b.n	8001b28 <memset+0x4>

08001b34 <__libc_init_array>:
 8001b34:	b570      	push	{r4, r5, r6, lr}
 8001b36:	2600      	movs	r6, #0
 8001b38:	4d0c      	ldr	r5, [pc, #48]	@ (8001b6c <__libc_init_array+0x38>)
 8001b3a:	4c0d      	ldr	r4, [pc, #52]	@ (8001b70 <__libc_init_array+0x3c>)
 8001b3c:	1b64      	subs	r4, r4, r5
 8001b3e:	10a4      	asrs	r4, r4, #2
 8001b40:	42a6      	cmp	r6, r4
 8001b42:	d109      	bne.n	8001b58 <__libc_init_array+0x24>
 8001b44:	f000 f81a 	bl	8001b7c <_init>
 8001b48:	2600      	movs	r6, #0
 8001b4a:	4d0a      	ldr	r5, [pc, #40]	@ (8001b74 <__libc_init_array+0x40>)
 8001b4c:	4c0a      	ldr	r4, [pc, #40]	@ (8001b78 <__libc_init_array+0x44>)
 8001b4e:	1b64      	subs	r4, r4, r5
 8001b50:	10a4      	asrs	r4, r4, #2
 8001b52:	42a6      	cmp	r6, r4
 8001b54:	d105      	bne.n	8001b62 <__libc_init_array+0x2e>
 8001b56:	bd70      	pop	{r4, r5, r6, pc}
 8001b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b5c:	4798      	blx	r3
 8001b5e:	3601      	adds	r6, #1
 8001b60:	e7ee      	b.n	8001b40 <__libc_init_array+0xc>
 8001b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b66:	4798      	blx	r3
 8001b68:	3601      	adds	r6, #1
 8001b6a:	e7f2      	b.n	8001b52 <__libc_init_array+0x1e>
 8001b6c:	08001c00 	.word	0x08001c00
 8001b70:	08001c00 	.word	0x08001c00
 8001b74:	08001c00 	.word	0x08001c00
 8001b78:	08001c04 	.word	0x08001c04

08001b7c <_init>:
 8001b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b7e:	bf00      	nop
 8001b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b82:	bc08      	pop	{r3}
 8001b84:	469e      	mov	lr, r3
 8001b86:	4770      	bx	lr

08001b88 <_fini>:
 8001b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b8a:	bf00      	nop
 8001b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b8e:	bc08      	pop	{r3}
 8001b90:	469e      	mov	lr, r3
 8001b92:	4770      	bx	lr
