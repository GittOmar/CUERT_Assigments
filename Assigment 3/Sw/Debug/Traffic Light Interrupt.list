
Traffic Light Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d10  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08001e1c  08001e1c  00002e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001eb4  08001eb4  00003010  2**0
                  CONTENTS
  4 .ARM          00000000  08001eb4  08001eb4  00003010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001eb4  08001eb4  00003010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001eb4  08001eb4  00002eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001eb8  08001eb8  00002eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08001ebc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000010  08001ecc  00003010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08001ecc  00003030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000035fe  00000000  00000000  00003039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000119e  00000000  00000000  00006637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000490  00000000  00000000  000077d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000336  00000000  00000000  00007c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015dd6  00000000  00000000  00007f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005ab4  00000000  00000000  0001dd74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c3ba  00000000  00000000  00023828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009fbe2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000fa4  00000000  00000000  0009fc28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000a0bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08001e04 	.word	0x08001e04

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08001e04 	.word	0x08001e04

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa6e 	bl	8000630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f81c 	bl	8000190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f856 	bl	8000208 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  LCD16X2_Init(LCD16X2_1);
 800015c:	2000      	movs	r0, #0
 800015e:	f001 fb93 	bl	8001888 <LCD16X2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(CurrnetState){
 8000162:	4b0a      	ldr	r3, [pc, #40]	@ (800018c <main+0x40>)
 8000164:	781b      	ldrb	r3, [r3, #0]
 8000166:	2b02      	cmp	r3, #2
 8000168:	d00b      	beq.n	8000182 <main+0x36>
 800016a:	2b02      	cmp	r3, #2
 800016c:	dcf9      	bgt.n	8000162 <main+0x16>
 800016e:	2b00      	cmp	r3, #0
 8000170:	d004      	beq.n	800017c <main+0x30>
 8000172:	2b01      	cmp	r3, #1
 8000174:	d1f5      	bne.n	8000162 <main+0x16>
	  case NORMAL_STATE   :  NormalStateOperation();     break;
 8000176:	f000 f96b 	bl	8000450 <NormalStateOperation>
 800017a:	e005      	b.n	8000188 <main+0x3c>
	  case OFF_STATE      :  OffStateOperation();        break;
 800017c:	f000 f98e 	bl	800049c <OffStateOperation>
 8000180:	e002      	b.n	8000188 <main+0x3c>
	  case EMERGENCY_STOP :  EmergemcyStopOperation();   break;
 8000182:	f000 f9ab 	bl	80004dc <EmergemcyStopOperation>
 8000186:	bf00      	nop
	  switch(CurrnetState){
 8000188:	e7eb      	b.n	8000162 <main+0x16>
 800018a:	bf00      	nop
 800018c:	20000000 	.word	0x20000000

08000190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b090      	sub	sp, #64	@ 0x40
 8000194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000196:	f107 0318 	add.w	r3, r7, #24
 800019a:	2228      	movs	r2, #40	@ 0x28
 800019c:	2100      	movs	r1, #0
 800019e:	4618      	mov	r0, r3
 80001a0:	f001 fe04 	bl	8001dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	2200      	movs	r2, #0
 80001a8:	601a      	str	r2, [r3, #0]
 80001aa:	605a      	str	r2, [r3, #4]
 80001ac:	609a      	str	r2, [r3, #8]
 80001ae:	60da      	str	r2, [r3, #12]
 80001b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001b2:	2302      	movs	r3, #2
 80001b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b6:	2301      	movs	r3, #1
 80001b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ba:	2310      	movs	r3, #16
 80001bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001be:	2300      	movs	r3, #0
 80001c0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c2:	f107 0318 	add.w	r3, r7, #24
 80001c6:	4618      	mov	r0, r3
 80001c8:	f000 fd7a 	bl	8000cc0 <HAL_RCC_OscConfig>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d001      	beq.n	80001d6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001d2:	f000 f98f 	bl	80004f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d6:	230f      	movs	r3, #15
 80001d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001da:	2300      	movs	r3, #0
 80001dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001de:	2300      	movs	r3, #0
 80001e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001e2:	2300      	movs	r3, #0
 80001e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001ea:	1d3b      	adds	r3, r7, #4
 80001ec:	2100      	movs	r1, #0
 80001ee:	4618      	mov	r0, r3
 80001f0:	f000 ffe8 	bl	80011c4 <HAL_RCC_ClockConfig>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d001      	beq.n	80001fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001fa:	f000 f97b 	bl	80004f4 <Error_Handler>
  }
}
 80001fe:	bf00      	nop
 8000200:	3740      	adds	r7, #64	@ 0x40
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
	...

08000208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b088      	sub	sp, #32
 800020c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800020e:	f107 0310 	add.w	r3, r7, #16
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800021c:	4b35      	ldr	r3, [pc, #212]	@ (80002f4 <MX_GPIO_Init+0xec>)
 800021e:	699b      	ldr	r3, [r3, #24]
 8000220:	4a34      	ldr	r2, [pc, #208]	@ (80002f4 <MX_GPIO_Init+0xec>)
 8000222:	f043 0320 	orr.w	r3, r3, #32
 8000226:	6193      	str	r3, [r2, #24]
 8000228:	4b32      	ldr	r3, [pc, #200]	@ (80002f4 <MX_GPIO_Init+0xec>)
 800022a:	699b      	ldr	r3, [r3, #24]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	60fb      	str	r3, [r7, #12]
 8000232:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000234:	4b2f      	ldr	r3, [pc, #188]	@ (80002f4 <MX_GPIO_Init+0xec>)
 8000236:	699b      	ldr	r3, [r3, #24]
 8000238:	4a2e      	ldr	r2, [pc, #184]	@ (80002f4 <MX_GPIO_Init+0xec>)
 800023a:	f043 0304 	orr.w	r3, r3, #4
 800023e:	6193      	str	r3, [r2, #24]
 8000240:	4b2c      	ldr	r3, [pc, #176]	@ (80002f4 <MX_GPIO_Init+0xec>)
 8000242:	699b      	ldr	r3, [r3, #24]
 8000244:	f003 0304 	and.w	r3, r3, #4
 8000248:	60bb      	str	r3, [r7, #8]
 800024a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800024c:	4b29      	ldr	r3, [pc, #164]	@ (80002f4 <MX_GPIO_Init+0xec>)
 800024e:	699b      	ldr	r3, [r3, #24]
 8000250:	4a28      	ldr	r2, [pc, #160]	@ (80002f4 <MX_GPIO_Init+0xec>)
 8000252:	f043 0308 	orr.w	r3, r3, #8
 8000256:	6193      	str	r3, [r2, #24]
 8000258:	4b26      	ldr	r3, [pc, #152]	@ (80002f4 <MX_GPIO_Init+0xec>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	f003 0308 	and.w	r3, r3, #8
 8000260:	607b      	str	r3, [r7, #4]
 8000262:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Red_led_Pin|Yellow_Led_Pin|Green_Led_Pin|e_Pin, GPIO_PIN_RESET);
 8000264:	2200      	movs	r2, #0
 8000266:	21b8      	movs	r1, #184	@ 0xb8
 8000268:	4823      	ldr	r0, [pc, #140]	@ (80002f8 <MX_GPIO_Init+0xf0>)
 800026a:	f000 fcf9 	bl	8000c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS_Pin|D4_Pin|D5_Pin|D6_Pin
 800026e:	2200      	movs	r2, #0
 8000270:	f640 4107 	movw	r1, #3079	@ 0xc07
 8000274:	4821      	ldr	r0, [pc, #132]	@ (80002fc <MX_GPIO_Init+0xf4>)
 8000276:	f000 fcf3 	bl	8000c60 <HAL_GPIO_WritePin>
                          |D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Traffic_ON_OFF_Pin Ergency_Button_Pin */
  GPIO_InitStruct.Pin = Traffic_ON_OFF_Pin|Ergency_Button_Pin;
 800027a:	2306      	movs	r3, #6
 800027c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800027e:	4b20      	ldr	r3, [pc, #128]	@ (8000300 <MX_GPIO_Init+0xf8>)
 8000280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000282:	2302      	movs	r3, #2
 8000284:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000286:	f107 0310 	add.w	r3, r7, #16
 800028a:	4619      	mov	r1, r3
 800028c:	481a      	ldr	r0, [pc, #104]	@ (80002f8 <MX_GPIO_Init+0xf0>)
 800028e:	f000 fb63 	bl	8000958 <HAL_GPIO_Init>

  /*Configure GPIO pins : Red_led_Pin Yellow_Led_Pin Green_Led_Pin e_Pin */
  GPIO_InitStruct.Pin = Red_led_Pin|Yellow_Led_Pin|Green_Led_Pin|e_Pin;
 8000292:	23b8      	movs	r3, #184	@ 0xb8
 8000294:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000296:	2301      	movs	r3, #1
 8000298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029a:	2300      	movs	r3, #0
 800029c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800029e:	2302      	movs	r3, #2
 80002a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002a2:	f107 0310 	add.w	r3, r7, #16
 80002a6:	4619      	mov	r1, r3
 80002a8:	4813      	ldr	r0, [pc, #76]	@ (80002f8 <MX_GPIO_Init+0xf0>)
 80002aa:	f000 fb55 	bl	8000958 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin D4_Pin D5_Pin D6_Pin
                           D7_Pin */
  GPIO_InitStruct.Pin = RS_Pin|D4_Pin|D5_Pin|D6_Pin
 80002ae:	f640 4307 	movw	r3, #3079	@ 0xc07
 80002b2:	613b      	str	r3, [r7, #16]
                          |D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b4:	2301      	movs	r3, #1
 80002b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b8:	2300      	movs	r3, #0
 80002ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002bc:	2302      	movs	r3, #2
 80002be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002c0:	f107 0310 	add.w	r3, r7, #16
 80002c4:	4619      	mov	r1, r3
 80002c6:	480d      	ldr	r0, [pc, #52]	@ (80002fc <MX_GPIO_Init+0xf4>)
 80002c8:	f000 fb46 	bl	8000958 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80002cc:	2200      	movs	r2, #0
 80002ce:	2100      	movs	r1, #0
 80002d0:	2007      	movs	r0, #7
 80002d2:	f000 fb0a 	bl	80008ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80002d6:	2007      	movs	r0, #7
 80002d8:	f000 fb23 	bl	8000922 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 80002dc:	2200      	movs	r2, #0
 80002de:	2101      	movs	r1, #1
 80002e0:	2008      	movs	r0, #8
 80002e2:	f000 fb02 	bl	80008ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80002e6:	2008      	movs	r0, #8
 80002e8:	f000 fb1b 	bl	8000922 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002ec:	bf00      	nop
 80002ee:	3720      	adds	r7, #32
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	40021000 	.word	0x40021000
 80002f8:	40010800 	.word	0x40010800
 80002fc:	40010c00 	.word	0x40010c00
 8000300:	10110000 	.word	0x10110000

08000304 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	80fb      	strh	r3, [r7, #6]
	LCD16X2_Clear(LCD16X2_1);
 800030e:	2000      	movs	r0, #0
 8000310:	f001 fa3a 	bl	8001788 <LCD16X2_Clear>
	switch(GPIO_Pin){
 8000314:	88fb      	ldrh	r3, [r7, #6]
 8000316:	2b02      	cmp	r3, #2
 8000318:	d002      	beq.n	8000320 <HAL_GPIO_EXTI_Callback+0x1c>
 800031a:	2b04      	cmp	r3, #4
 800031c:	d010      	beq.n	8000340 <HAL_GPIO_EXTI_Callback+0x3c>
			CurrnetState = NORMAL_STATE;
		}else{CurrnetState = OFF_STATE;}
		break;
	default : {/*Nothing*/};
	}
}
 800031e:	e023      	b.n	8000368 <HAL_GPIO_EXTI_Callback+0x64>
		if((CurrnetState == NORMAL_STATE) || (CurrnetState == EMERGENCY_STOP)){
 8000320:	4b13      	ldr	r3, [pc, #76]	@ (8000370 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d003      	beq.n	8000330 <HAL_GPIO_EXTI_Callback+0x2c>
 8000328:	4b11      	ldr	r3, [pc, #68]	@ (8000370 <HAL_GPIO_EXTI_Callback+0x6c>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	2b02      	cmp	r3, #2
 800032e:	d103      	bne.n	8000338 <HAL_GPIO_EXTI_Callback+0x34>
			CurrnetState = OFF_STATE;
 8000330:	4b0f      	ldr	r3, [pc, #60]	@ (8000370 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000332:	2200      	movs	r2, #0
 8000334:	701a      	strb	r2, [r3, #0]
		break;
 8000336:	e017      	b.n	8000368 <HAL_GPIO_EXTI_Callback+0x64>
			CurrnetState = NORMAL_STATE;
 8000338:	4b0d      	ldr	r3, [pc, #52]	@ (8000370 <HAL_GPIO_EXTI_Callback+0x6c>)
 800033a:	2201      	movs	r2, #1
 800033c:	701a      	strb	r2, [r3, #0]
		break;
 800033e:	e013      	b.n	8000368 <HAL_GPIO_EXTI_Callback+0x64>
		if(CurrnetState == NORMAL_STATE){
 8000340:	4b0b      	ldr	r3, [pc, #44]	@ (8000370 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d103      	bne.n	8000350 <HAL_GPIO_EXTI_Callback+0x4c>
			CurrnetState = EMERGENCY_STOP;
 8000348:	4b09      	ldr	r3, [pc, #36]	@ (8000370 <HAL_GPIO_EXTI_Callback+0x6c>)
 800034a:	2202      	movs	r2, #2
 800034c:	701a      	strb	r2, [r3, #0]
		break;
 800034e:	e00a      	b.n	8000366 <HAL_GPIO_EXTI_Callback+0x62>
		}else if(CurrnetState == EMERGENCY_STOP){
 8000350:	4b07      	ldr	r3, [pc, #28]	@ (8000370 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2b02      	cmp	r3, #2
 8000356:	d103      	bne.n	8000360 <HAL_GPIO_EXTI_Callback+0x5c>
			CurrnetState = NORMAL_STATE;
 8000358:	4b05      	ldr	r3, [pc, #20]	@ (8000370 <HAL_GPIO_EXTI_Callback+0x6c>)
 800035a:	2201      	movs	r2, #1
 800035c:	701a      	strb	r2, [r3, #0]
		break;
 800035e:	e002      	b.n	8000366 <HAL_GPIO_EXTI_Callback+0x62>
		}else{CurrnetState = OFF_STATE;}
 8000360:	4b03      	ldr	r3, [pc, #12]	@ (8000370 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000362:	2200      	movs	r2, #0
 8000364:	701a      	strb	r2, [r3, #0]
		break;
 8000366:	bf00      	nop
}
 8000368:	bf00      	nop
 800036a:	3708      	adds	r7, #8
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	20000000 	.word	0x20000000

08000374 <TrafficLCD>:
void TrafficLCD(char *txt){
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	LCD16X2_Clear(LCD16X2_1);
 800037c:	2000      	movs	r0, #0
 800037e:	f001 fa03 	bl	8001788 <LCD16X2_Clear>
	LCD16X2_Set_Cursor(LCD16X2_1,1,1);
 8000382:	2201      	movs	r2, #1
 8000384:	2101      	movs	r1, #1
 8000386:	2000      	movs	r0, #0
 8000388:	f001 fa3e 	bl	8001808 <LCD16X2_Set_Cursor>
	LCD16X2_Write_String(LCD16X2_1,"Traffic : ON ");
 800038c:	490c      	ldr	r1, [pc, #48]	@ (80003c0 <TrafficLCD+0x4c>)
 800038e:	2000      	movs	r0, #0
 8000390:	f001 fcec 	bl	8001d6c <LCD16X2_Write_String>
	LCD16X2_Set_Cursor(LCD16X2_1,2,1);
 8000394:	2201      	movs	r2, #1
 8000396:	2102      	movs	r1, #2
 8000398:	2000      	movs	r0, #0
 800039a:	f001 fa35 	bl	8001808 <LCD16X2_Set_Cursor>
	LCD16X2_Write_String(LCD16X2_1,"Light : ");
 800039e:	4909      	ldr	r1, [pc, #36]	@ (80003c4 <TrafficLCD+0x50>)
 80003a0:	2000      	movs	r0, #0
 80003a2:	f001 fce3 	bl	8001d6c <LCD16X2_Write_String>
	LCD16X2_Set_Cursor(LCD16X2_1,2,9);
 80003a6:	2209      	movs	r2, #9
 80003a8:	2102      	movs	r1, #2
 80003aa:	2000      	movs	r0, #0
 80003ac:	f001 fa2c 	bl	8001808 <LCD16X2_Set_Cursor>
	LCD16X2_Write_String(LCD16X2_1,txt);
 80003b0:	6879      	ldr	r1, [r7, #4]
 80003b2:	2000      	movs	r0, #0
 80003b4:	f001 fcda 	bl	8001d6c <LCD16X2_Write_String>
}
 80003b8:	bf00      	nop
 80003ba:	3708      	adds	r7, #8
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	08001e1c 	.word	0x08001e1c
 80003c4:	08001e2c 	.word	0x08001e2c

080003c8 <SmartDelay>:
/* @brief solve the problem of delay when return from interrupt*/
void SmartDelay(uint16 delay){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	uint16 cnt = delay;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	60fb      	str	r3, [r7, #12]
	while(cnt--){
 80003d4:	e00a      	b.n	80003ec <SmartDelay+0x24>
		HAL_Delay(1);
 80003d6:	2001      	movs	r0, #1
 80003d8:	f000 f98c 	bl	80006f4 <HAL_Delay>
		if(CurrnetState != NORMAL_STATE){
 80003dc:	4b08      	ldr	r3, [pc, #32]	@ (8000400 <SmartDelay+0x38>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	2b01      	cmp	r3, #1
 80003e2:	d003      	beq.n	80003ec <SmartDelay+0x24>
		NORMAL_STATE_ENTRANCE_FLAG = GoOUT;
 80003e4:	4b07      	ldr	r3, [pc, #28]	@ (8000404 <SmartDelay+0x3c>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	701a      	strb	r2, [r3, #0]
		break;
 80003ea:	e005      	b.n	80003f8 <SmartDelay+0x30>
	while(cnt--){
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	1e5a      	subs	r2, r3, #1
 80003f0:	60fa      	str	r2, [r7, #12]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1ef      	bne.n	80003d6 <SmartDelay+0xe>
		}
	}
}
 80003f6:	bf00      	nop
 80003f8:	bf00      	nop
 80003fa:	3710      	adds	r7, #16
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	20000000 	.word	0x20000000
 8000404:	20000001 	.word	0x20000001

08000408 <TrafficSequance>:
void TrafficSequance(uint8 EntranceFlag,GPIO_TypeDef *Port , uint16_t Pin , char *txt){
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	60b9      	str	r1, [r7, #8]
 8000410:	607b      	str	r3, [r7, #4]
 8000412:	4603      	mov	r3, r0
 8000414:	73fb      	strb	r3, [r7, #15]
 8000416:	4613      	mov	r3, r2
 8000418:	81bb      	strh	r3, [r7, #12]
	if(EntranceFlag == ENTER){
 800041a:	7bfb      	ldrb	r3, [r7, #15]
 800041c:	2b01      	cmp	r3, #1
 800041e:	d112      	bne.n	8000446 <TrafficSequance+0x3e>
			HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_SET);
 8000420:	89bb      	ldrh	r3, [r7, #12]
 8000422:	2201      	movs	r2, #1
 8000424:	4619      	mov	r1, r3
 8000426:	68b8      	ldr	r0, [r7, #8]
 8000428:	f000 fc1a 	bl	8000c60 <HAL_GPIO_WritePin>
			TrafficLCD(txt);
 800042c:	6878      	ldr	r0, [r7, #4]
 800042e:	f7ff ffa1 	bl	8000374 <TrafficLCD>
			SmartDelay(2000);
 8000432:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000436:	f7ff ffc7 	bl	80003c8 <SmartDelay>
			HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 800043a:	89bb      	ldrh	r3, [r7, #12]
 800043c:	2200      	movs	r2, #0
 800043e:	4619      	mov	r1, r3
 8000440:	68b8      	ldr	r0, [r7, #8]
 8000442:	f000 fc0d 	bl	8000c60 <HAL_GPIO_WritePin>
	}
}
 8000446:	bf00      	nop
 8000448:	3710      	adds	r7, #16
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
	...

08000450 <NormalStateOperation>:
void NormalStateOperation(){
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
	NORMAL_STATE_ENTRANCE_FLAG = ENTER;
 8000454:	4b0c      	ldr	r3, [pc, #48]	@ (8000488 <NormalStateOperation+0x38>)
 8000456:	2201      	movs	r2, #1
 8000458:	701a      	strb	r2, [r3, #0]
	TrafficSequance(NORMAL_STATE_ENTRANCE_FLAG,RED_LED_PORT,RED_LED_PIN,"RED");
 800045a:	4b0b      	ldr	r3, [pc, #44]	@ (8000488 <NormalStateOperation+0x38>)
 800045c:	7818      	ldrb	r0, [r3, #0]
 800045e:	4b0b      	ldr	r3, [pc, #44]	@ (800048c <NormalStateOperation+0x3c>)
 8000460:	2208      	movs	r2, #8
 8000462:	490b      	ldr	r1, [pc, #44]	@ (8000490 <NormalStateOperation+0x40>)
 8000464:	f7ff ffd0 	bl	8000408 <TrafficSequance>
	TrafficSequance(NORMAL_STATE_ENTRANCE_FLAG,YELLOW_LED_PORT,YELLOW_LED_PIN,"YELLOW");
 8000468:	4b07      	ldr	r3, [pc, #28]	@ (8000488 <NormalStateOperation+0x38>)
 800046a:	7818      	ldrb	r0, [r3, #0]
 800046c:	4b09      	ldr	r3, [pc, #36]	@ (8000494 <NormalStateOperation+0x44>)
 800046e:	2210      	movs	r2, #16
 8000470:	4907      	ldr	r1, [pc, #28]	@ (8000490 <NormalStateOperation+0x40>)
 8000472:	f7ff ffc9 	bl	8000408 <TrafficSequance>
	TrafficSequance(NORMAL_STATE_ENTRANCE_FLAG,GREEN_LED_PORT,GREEN_LED_PIN,"GREEN");
 8000476:	4b04      	ldr	r3, [pc, #16]	@ (8000488 <NormalStateOperation+0x38>)
 8000478:	7818      	ldrb	r0, [r3, #0]
 800047a:	4b07      	ldr	r3, [pc, #28]	@ (8000498 <NormalStateOperation+0x48>)
 800047c:	2220      	movs	r2, #32
 800047e:	4904      	ldr	r1, [pc, #16]	@ (8000490 <NormalStateOperation+0x40>)
 8000480:	f7ff ffc2 	bl	8000408 <TrafficSequance>
}
 8000484:	bf00      	nop
 8000486:	bd80      	pop	{r7, pc}
 8000488:	20000001 	.word	0x20000001
 800048c:	08001e38 	.word	0x08001e38
 8000490:	40010800 	.word	0x40010800
 8000494:	08001e3c 	.word	0x08001e3c
 8000498:	08001e44 	.word	0x08001e44

0800049c <OffStateOperation>:

void OffStateOperation(){
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	LCD16X2_Set_Cursor(LCD16X2_1,1,1);
 80004a0:	2201      	movs	r2, #1
 80004a2:	2101      	movs	r1, #1
 80004a4:	2000      	movs	r0, #0
 80004a6:	f001 f9af 	bl	8001808 <LCD16X2_Set_Cursor>
	LCD16X2_Write_String(LCD16X2_1,"Traffic : OFF ");
 80004aa:	490a      	ldr	r1, [pc, #40]	@ (80004d4 <OffStateOperation+0x38>)
 80004ac:	2000      	movs	r0, #0
 80004ae:	f001 fc5d 	bl	8001d6c <LCD16X2_Write_String>
	/*off all lights*/
	HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
 80004b2:	2200      	movs	r2, #0
 80004b4:	2108      	movs	r1, #8
 80004b6:	4808      	ldr	r0, [pc, #32]	@ (80004d8 <OffStateOperation+0x3c>)
 80004b8:	f000 fbd2 	bl	8000c60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_LED_PORT, YELLOW_LED_PIN, GPIO_PIN_RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	2110      	movs	r1, #16
 80004c0:	4805      	ldr	r0, [pc, #20]	@ (80004d8 <OffStateOperation+0x3c>)
 80004c2:	f000 fbcd 	bl	8000c60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
 80004c6:	2200      	movs	r2, #0
 80004c8:	2120      	movs	r1, #32
 80004ca:	4803      	ldr	r0, [pc, #12]	@ (80004d8 <OffStateOperation+0x3c>)
 80004cc:	f000 fbc8 	bl	8000c60 <HAL_GPIO_WritePin>
}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	08001e4c 	.word	0x08001e4c
 80004d8:	40010800 	.word	0x40010800

080004dc <EmergemcyStopOperation>:

void EmergemcyStopOperation(){
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2108      	movs	r1, #8
 80004e4:	4802      	ldr	r0, [pc, #8]	@ (80004f0 <EmergemcyStopOperation+0x14>)
 80004e6:	f000 fbbb 	bl	8000c60 <HAL_GPIO_WritePin>
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40010800 	.word	0x40010800

080004f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f8:	b672      	cpsid	i
}
 80004fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <Error_Handler+0x8>

08000500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000506:	4b15      	ldr	r3, [pc, #84]	@ (800055c <HAL_MspInit+0x5c>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	4a14      	ldr	r2, [pc, #80]	@ (800055c <HAL_MspInit+0x5c>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6193      	str	r3, [r2, #24]
 8000512:	4b12      	ldr	r3, [pc, #72]	@ (800055c <HAL_MspInit+0x5c>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051e:	4b0f      	ldr	r3, [pc, #60]	@ (800055c <HAL_MspInit+0x5c>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	4a0e      	ldr	r2, [pc, #56]	@ (800055c <HAL_MspInit+0x5c>)
 8000524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000528:	61d3      	str	r3, [r2, #28]
 800052a:	4b0c      	ldr	r3, [pc, #48]	@ (800055c <HAL_MspInit+0x5c>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000536:	4b0a      	ldr	r3, [pc, #40]	@ (8000560 <HAL_MspInit+0x60>)
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	4a04      	ldr	r2, [pc, #16]	@ (8000560 <HAL_MspInit+0x60>)
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000552:	bf00      	nop
 8000554:	3714      	adds	r7, #20
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	40021000 	.word	0x40021000
 8000560:	40010000 	.word	0x40010000

08000564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <NMI_Handler+0x4>

0800056c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000570:	bf00      	nop
 8000572:	e7fd      	b.n	8000570 <HardFault_Handler+0x4>

08000574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <MemManage_Handler+0x4>

0800057c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <BusFault_Handler+0x4>

08000584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <UsageFault_Handler+0x4>

0800058c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr

08000598 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr

080005a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr

080005b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b4:	f000 f882 	bl	80006bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}

080005bc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Traffic_ON_OFF_Pin);
 80005c0:	2002      	movs	r0, #2
 80005c2:	f000 fb65 	bl	8000c90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}

080005ca <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Ergency_Button_Pin);
 80005ce:	2004      	movs	r0, #4
 80005d0:	f000 fb5e 	bl	8000c90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr

080005e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005e4:	f7ff fff8 	bl	80005d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e8:	480b      	ldr	r0, [pc, #44]	@ (8000618 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005ea:	490c      	ldr	r1, [pc, #48]	@ (800061c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000620 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f0:	e002      	b.n	80005f8 <LoopCopyDataInit>

080005f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f6:	3304      	adds	r3, #4

080005f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005fc:	d3f9      	bcc.n	80005f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fe:	4a09      	ldr	r2, [pc, #36]	@ (8000624 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000600:	4c09      	ldr	r4, [pc, #36]	@ (8000628 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000604:	e001      	b.n	800060a <LoopFillZerobss>

08000606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000608:	3204      	adds	r2, #4

0800060a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800060c:	d3fb      	bcc.n	8000606 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800060e:	f001 fbd5 	bl	8001dbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000612:	f7ff fd9b 	bl	800014c <main>
  bx lr
 8000616:	4770      	bx	lr
  ldr r0, =_sdata
 8000618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800061c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000620:	08001ebc 	.word	0x08001ebc
  ldr r2, =_sbss
 8000624:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000628:	20000030 	.word	0x20000030

0800062c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800062c:	e7fe      	b.n	800062c <ADC1_2_IRQHandler>
	...

08000630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000634:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <HAL_Init+0x28>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a07      	ldr	r2, [pc, #28]	@ (8000658 <HAL_Init+0x28>)
 800063a:	f043 0310 	orr.w	r3, r3, #16
 800063e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000640:	2003      	movs	r0, #3
 8000642:	f000 f947 	bl	80008d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000646:	200f      	movs	r0, #15
 8000648:	f000 f808 	bl	800065c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800064c:	f7ff ff58 	bl	8000500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000650:	2300      	movs	r3, #0
}
 8000652:	4618      	mov	r0, r3
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40022000 	.word	0x40022000

0800065c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000664:	4b12      	ldr	r3, [pc, #72]	@ (80006b0 <HAL_InitTick+0x54>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4b12      	ldr	r3, [pc, #72]	@ (80006b4 <HAL_InitTick+0x58>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4619      	mov	r1, r3
 800066e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000672:	fbb3 f3f1 	udiv	r3, r3, r1
 8000676:	fbb2 f3f3 	udiv	r3, r2, r3
 800067a:	4618      	mov	r0, r3
 800067c:	f000 f95f 	bl	800093e <HAL_SYSTICK_Config>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000686:	2301      	movs	r3, #1
 8000688:	e00e      	b.n	80006a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2b0f      	cmp	r3, #15
 800068e:	d80a      	bhi.n	80006a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000690:	2200      	movs	r2, #0
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	f04f 30ff 	mov.w	r0, #4294967295
 8000698:	f000 f927 	bl	80008ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800069c:	4a06      	ldr	r2, [pc, #24]	@ (80006b8 <HAL_InitTick+0x5c>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006a2:	2300      	movs	r3, #0
 80006a4:	e000      	b.n	80006a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006a6:	2301      	movs	r3, #1
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000004 	.word	0x20000004
 80006b4:	2000000c 	.word	0x2000000c
 80006b8:	20000008 	.word	0x20000008

080006bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006c0:	4b05      	ldr	r3, [pc, #20]	@ (80006d8 <HAL_IncTick+0x1c>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b05      	ldr	r3, [pc, #20]	@ (80006dc <HAL_IncTick+0x20>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4413      	add	r3, r2
 80006cc:	4a03      	ldr	r2, [pc, #12]	@ (80006dc <HAL_IncTick+0x20>)
 80006ce:	6013      	str	r3, [r2, #0]
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr
 80006d8:	2000000c 	.word	0x2000000c
 80006dc:	2000002c 	.word	0x2000002c

080006e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return uwTick;
 80006e4:	4b02      	ldr	r3, [pc, #8]	@ (80006f0 <HAL_GetTick+0x10>)
 80006e6:	681b      	ldr	r3, [r3, #0]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	2000002c 	.word	0x2000002c

080006f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006fc:	f7ff fff0 	bl	80006e0 <HAL_GetTick>
 8000700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800070c:	d005      	beq.n	800071a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800070e:	4b0a      	ldr	r3, [pc, #40]	@ (8000738 <HAL_Delay+0x44>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	4413      	add	r3, r2
 8000718:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800071a:	bf00      	nop
 800071c:	f7ff ffe0 	bl	80006e0 <HAL_GetTick>
 8000720:	4602      	mov	r2, r0
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	68fa      	ldr	r2, [r7, #12]
 8000728:	429a      	cmp	r2, r3
 800072a:	d8f7      	bhi.n	800071c <HAL_Delay+0x28>
  {
  }
}
 800072c:	bf00      	nop
 800072e:	bf00      	nop
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	2000000c 	.word	0x2000000c

0800073c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f003 0307 	and.w	r3, r3, #7
 800074a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800074c:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <__NVIC_SetPriorityGrouping+0x44>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000752:	68ba      	ldr	r2, [r7, #8]
 8000754:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000758:	4013      	ands	r3, r2
 800075a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000764:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800076c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800076e:	4a04      	ldr	r2, [pc, #16]	@ (8000780 <__NVIC_SetPriorityGrouping+0x44>)
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	60d3      	str	r3, [r2, #12]
}
 8000774:	bf00      	nop
 8000776:	3714      	adds	r7, #20
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000788:	4b04      	ldr	r3, [pc, #16]	@ (800079c <__NVIC_GetPriorityGrouping+0x18>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	0a1b      	lsrs	r3, r3, #8
 800078e:	f003 0307 	and.w	r3, r3, #7
}
 8000792:	4618      	mov	r0, r3
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	db0b      	blt.n	80007ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	f003 021f 	and.w	r2, r3, #31
 80007b8:	4906      	ldr	r1, [pc, #24]	@ (80007d4 <__NVIC_EnableIRQ+0x34>)
 80007ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007be:	095b      	lsrs	r3, r3, #5
 80007c0:	2001      	movs	r0, #1
 80007c2:	fa00 f202 	lsl.w	r2, r0, r2
 80007c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	e000e100 	.word	0xe000e100

080007d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	6039      	str	r1, [r7, #0]
 80007e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	db0a      	blt.n	8000802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	490c      	ldr	r1, [pc, #48]	@ (8000824 <__NVIC_SetPriority+0x4c>)
 80007f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f6:	0112      	lsls	r2, r2, #4
 80007f8:	b2d2      	uxtb	r2, r2
 80007fa:	440b      	add	r3, r1
 80007fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000800:	e00a      	b.n	8000818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4908      	ldr	r1, [pc, #32]	@ (8000828 <__NVIC_SetPriority+0x50>)
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	f003 030f 	and.w	r3, r3, #15
 800080e:	3b04      	subs	r3, #4
 8000810:	0112      	lsls	r2, r2, #4
 8000812:	b2d2      	uxtb	r2, r2
 8000814:	440b      	add	r3, r1
 8000816:	761a      	strb	r2, [r3, #24]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	e000e100 	.word	0xe000e100
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800082c:	b480      	push	{r7}
 800082e:	b089      	sub	sp, #36	@ 0x24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f003 0307 	and.w	r3, r3, #7
 800083e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	f1c3 0307 	rsb	r3, r3, #7
 8000846:	2b04      	cmp	r3, #4
 8000848:	bf28      	it	cs
 800084a:	2304      	movcs	r3, #4
 800084c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3304      	adds	r3, #4
 8000852:	2b06      	cmp	r3, #6
 8000854:	d902      	bls.n	800085c <NVIC_EncodePriority+0x30>
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	3b03      	subs	r3, #3
 800085a:	e000      	b.n	800085e <NVIC_EncodePriority+0x32>
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000860:	f04f 32ff 	mov.w	r2, #4294967295
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	43da      	mvns	r2, r3
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	401a      	ands	r2, r3
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000874:	f04f 31ff 	mov.w	r1, #4294967295
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	fa01 f303 	lsl.w	r3, r1, r3
 800087e:	43d9      	mvns	r1, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000884:	4313      	orrs	r3, r2
         );
}
 8000886:	4618      	mov	r0, r3
 8000888:	3724      	adds	r7, #36	@ 0x24
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3b01      	subs	r3, #1
 800089c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008a0:	d301      	bcc.n	80008a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008a2:	2301      	movs	r3, #1
 80008a4:	e00f      	b.n	80008c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008a6:	4a0a      	ldr	r2, [pc, #40]	@ (80008d0 <SysTick_Config+0x40>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ae:	210f      	movs	r1, #15
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	f7ff ff90 	bl	80007d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b8:	4b05      	ldr	r3, [pc, #20]	@ (80008d0 <SysTick_Config+0x40>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008be:	4b04      	ldr	r3, [pc, #16]	@ (80008d0 <SysTick_Config+0x40>)
 80008c0:	2207      	movs	r2, #7
 80008c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	e000e010 	.word	0xe000e010

080008d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ff2d 	bl	800073c <__NVIC_SetPriorityGrouping>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b086      	sub	sp, #24
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	4603      	mov	r3, r0
 80008f2:	60b9      	str	r1, [r7, #8]
 80008f4:	607a      	str	r2, [r7, #4]
 80008f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008fc:	f7ff ff42 	bl	8000784 <__NVIC_GetPriorityGrouping>
 8000900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	68b9      	ldr	r1, [r7, #8]
 8000906:	6978      	ldr	r0, [r7, #20]
 8000908:	f7ff ff90 	bl	800082c <NVIC_EncodePriority>
 800090c:	4602      	mov	r2, r0
 800090e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000912:	4611      	mov	r1, r2
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff5f 	bl	80007d8 <__NVIC_SetPriority>
}
 800091a:	bf00      	nop
 800091c:	3718      	adds	r7, #24
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	4603      	mov	r3, r0
 800092a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800092c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff35 	bl	80007a0 <__NVIC_EnableIRQ>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff ffa2 	bl	8000890 <SysTick_Config>
 800094c:	4603      	mov	r3, r0
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000958:	b480      	push	{r7}
 800095a:	b08b      	sub	sp, #44	@ 0x2c
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800096a:	e169      	b.n	8000c40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800096c:	2201      	movs	r2, #1
 800096e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	69fa      	ldr	r2, [r7, #28]
 800097c:	4013      	ands	r3, r2
 800097e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	429a      	cmp	r2, r3
 8000986:	f040 8158 	bne.w	8000c3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	4a9a      	ldr	r2, [pc, #616]	@ (8000bf8 <HAL_GPIO_Init+0x2a0>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d05e      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
 8000994:	4a98      	ldr	r2, [pc, #608]	@ (8000bf8 <HAL_GPIO_Init+0x2a0>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d875      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 800099a:	4a98      	ldr	r2, [pc, #608]	@ (8000bfc <HAL_GPIO_Init+0x2a4>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d058      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
 80009a0:	4a96      	ldr	r2, [pc, #600]	@ (8000bfc <HAL_GPIO_Init+0x2a4>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d86f      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 80009a6:	4a96      	ldr	r2, [pc, #600]	@ (8000c00 <HAL_GPIO_Init+0x2a8>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d052      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
 80009ac:	4a94      	ldr	r2, [pc, #592]	@ (8000c00 <HAL_GPIO_Init+0x2a8>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d869      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 80009b2:	4a94      	ldr	r2, [pc, #592]	@ (8000c04 <HAL_GPIO_Init+0x2ac>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d04c      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
 80009b8:	4a92      	ldr	r2, [pc, #584]	@ (8000c04 <HAL_GPIO_Init+0x2ac>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d863      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 80009be:	4a92      	ldr	r2, [pc, #584]	@ (8000c08 <HAL_GPIO_Init+0x2b0>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d046      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
 80009c4:	4a90      	ldr	r2, [pc, #576]	@ (8000c08 <HAL_GPIO_Init+0x2b0>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d85d      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 80009ca:	2b12      	cmp	r3, #18
 80009cc:	d82a      	bhi.n	8000a24 <HAL_GPIO_Init+0xcc>
 80009ce:	2b12      	cmp	r3, #18
 80009d0:	d859      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 80009d2:	a201      	add	r2, pc, #4	@ (adr r2, 80009d8 <HAL_GPIO_Init+0x80>)
 80009d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d8:	08000a53 	.word	0x08000a53
 80009dc:	08000a2d 	.word	0x08000a2d
 80009e0:	08000a3f 	.word	0x08000a3f
 80009e4:	08000a81 	.word	0x08000a81
 80009e8:	08000a87 	.word	0x08000a87
 80009ec:	08000a87 	.word	0x08000a87
 80009f0:	08000a87 	.word	0x08000a87
 80009f4:	08000a87 	.word	0x08000a87
 80009f8:	08000a87 	.word	0x08000a87
 80009fc:	08000a87 	.word	0x08000a87
 8000a00:	08000a87 	.word	0x08000a87
 8000a04:	08000a87 	.word	0x08000a87
 8000a08:	08000a87 	.word	0x08000a87
 8000a0c:	08000a87 	.word	0x08000a87
 8000a10:	08000a87 	.word	0x08000a87
 8000a14:	08000a87 	.word	0x08000a87
 8000a18:	08000a87 	.word	0x08000a87
 8000a1c:	08000a35 	.word	0x08000a35
 8000a20:	08000a49 	.word	0x08000a49
 8000a24:	4a79      	ldr	r2, [pc, #484]	@ (8000c0c <HAL_GPIO_Init+0x2b4>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d013      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a2a:	e02c      	b.n	8000a86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	623b      	str	r3, [r7, #32]
          break;
 8000a32:	e029      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	3304      	adds	r3, #4
 8000a3a:	623b      	str	r3, [r7, #32]
          break;
 8000a3c:	e024      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	68db      	ldr	r3, [r3, #12]
 8000a42:	3308      	adds	r3, #8
 8000a44:	623b      	str	r3, [r7, #32]
          break;
 8000a46:	e01f      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	330c      	adds	r3, #12
 8000a4e:	623b      	str	r3, [r7, #32]
          break;
 8000a50:	e01a      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d102      	bne.n	8000a60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a5a:	2304      	movs	r3, #4
 8000a5c:	623b      	str	r3, [r7, #32]
          break;
 8000a5e:	e013      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d105      	bne.n	8000a74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a68:	2308      	movs	r3, #8
 8000a6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	69fa      	ldr	r2, [r7, #28]
 8000a70:	611a      	str	r2, [r3, #16]
          break;
 8000a72:	e009      	b.n	8000a88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a74:	2308      	movs	r3, #8
 8000a76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	69fa      	ldr	r2, [r7, #28]
 8000a7c:	615a      	str	r2, [r3, #20]
          break;
 8000a7e:	e003      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]
          break;
 8000a84:	e000      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          break;
 8000a86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	2bff      	cmp	r3, #255	@ 0xff
 8000a8c:	d801      	bhi.n	8000a92 <HAL_GPIO_Init+0x13a>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	e001      	b.n	8000a96 <HAL_GPIO_Init+0x13e>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3304      	adds	r3, #4
 8000a96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	2bff      	cmp	r3, #255	@ 0xff
 8000a9c:	d802      	bhi.n	8000aa4 <HAL_GPIO_Init+0x14c>
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	e002      	b.n	8000aaa <HAL_GPIO_Init+0x152>
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa6:	3b08      	subs	r3, #8
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	210f      	movs	r1, #15
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	401a      	ands	r2, r3
 8000abc:	6a39      	ldr	r1, [r7, #32]
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	f000 80b1 	beq.w	8000c3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ad8:	4b4d      	ldr	r3, [pc, #308]	@ (8000c10 <HAL_GPIO_Init+0x2b8>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	4a4c      	ldr	r2, [pc, #304]	@ (8000c10 <HAL_GPIO_Init+0x2b8>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	6193      	str	r3, [r2, #24]
 8000ae4:	4b4a      	ldr	r3, [pc, #296]	@ (8000c10 <HAL_GPIO_Init+0x2b8>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000af0:	4a48      	ldr	r2, [pc, #288]	@ (8000c14 <HAL_GPIO_Init+0x2bc>)
 8000af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af4:	089b      	lsrs	r3, r3, #2
 8000af6:	3302      	adds	r3, #2
 8000af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000afc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b00:	f003 0303 	and.w	r3, r3, #3
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	220f      	movs	r2, #15
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	4013      	ands	r3, r2
 8000b12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a40      	ldr	r2, [pc, #256]	@ (8000c18 <HAL_GPIO_Init+0x2c0>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d013      	beq.n	8000b44 <HAL_GPIO_Init+0x1ec>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a3f      	ldr	r2, [pc, #252]	@ (8000c1c <HAL_GPIO_Init+0x2c4>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d00d      	beq.n	8000b40 <HAL_GPIO_Init+0x1e8>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a3e      	ldr	r2, [pc, #248]	@ (8000c20 <HAL_GPIO_Init+0x2c8>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d007      	beq.n	8000b3c <HAL_GPIO_Init+0x1e4>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a3d      	ldr	r2, [pc, #244]	@ (8000c24 <HAL_GPIO_Init+0x2cc>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d101      	bne.n	8000b38 <HAL_GPIO_Init+0x1e0>
 8000b34:	2303      	movs	r3, #3
 8000b36:	e006      	b.n	8000b46 <HAL_GPIO_Init+0x1ee>
 8000b38:	2304      	movs	r3, #4
 8000b3a:	e004      	b.n	8000b46 <HAL_GPIO_Init+0x1ee>
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	e002      	b.n	8000b46 <HAL_GPIO_Init+0x1ee>
 8000b40:	2301      	movs	r3, #1
 8000b42:	e000      	b.n	8000b46 <HAL_GPIO_Init+0x1ee>
 8000b44:	2300      	movs	r3, #0
 8000b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b48:	f002 0203 	and.w	r2, r2, #3
 8000b4c:	0092      	lsls	r2, r2, #2
 8000b4e:	4093      	lsls	r3, r2
 8000b50:	68fa      	ldr	r2, [r7, #12]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b56:	492f      	ldr	r1, [pc, #188]	@ (8000c14 <HAL_GPIO_Init+0x2bc>)
 8000b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b5a:	089b      	lsrs	r3, r3, #2
 8000b5c:	3302      	adds	r3, #2
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d006      	beq.n	8000b7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b70:	4b2d      	ldr	r3, [pc, #180]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b72:	689a      	ldr	r2, [r3, #8]
 8000b74:	492c      	ldr	r1, [pc, #176]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	608b      	str	r3, [r1, #8]
 8000b7c:	e006      	b.n	8000b8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b80:	689a      	ldr	r2, [r3, #8]
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	43db      	mvns	r3, r3
 8000b86:	4928      	ldr	r1, [pc, #160]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b88:	4013      	ands	r3, r2
 8000b8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d006      	beq.n	8000ba6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b98:	4b23      	ldr	r3, [pc, #140]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b9a:	68da      	ldr	r2, [r3, #12]
 8000b9c:	4922      	ldr	r1, [pc, #136]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	60cb      	str	r3, [r1, #12]
 8000ba4:	e006      	b.n	8000bb4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ba6:	4b20      	ldr	r3, [pc, #128]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000ba8:	68da      	ldr	r2, [r3, #12]
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	43db      	mvns	r3, r3
 8000bae:	491e      	ldr	r1, [pc, #120]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d006      	beq.n	8000bce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bc0:	4b19      	ldr	r3, [pc, #100]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bc2:	685a      	ldr	r2, [r3, #4]
 8000bc4:	4918      	ldr	r1, [pc, #96]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	604b      	str	r3, [r1, #4]
 8000bcc:	e006      	b.n	8000bdc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bce:	4b16      	ldr	r3, [pc, #88]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bd0:	685a      	ldr	r2, [r3, #4]
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	4914      	ldr	r1, [pc, #80]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bd8:	4013      	ands	r3, r2
 8000bda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d021      	beq.n	8000c2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000be8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	490e      	ldr	r1, [pc, #56]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	600b      	str	r3, [r1, #0]
 8000bf4:	e021      	b.n	8000c3a <HAL_GPIO_Init+0x2e2>
 8000bf6:	bf00      	nop
 8000bf8:	10320000 	.word	0x10320000
 8000bfc:	10310000 	.word	0x10310000
 8000c00:	10220000 	.word	0x10220000
 8000c04:	10210000 	.word	0x10210000
 8000c08:	10120000 	.word	0x10120000
 8000c0c:	10110000 	.word	0x10110000
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40010000 	.word	0x40010000
 8000c18:	40010800 	.word	0x40010800
 8000c1c:	40010c00 	.word	0x40010c00
 8000c20:	40011000 	.word	0x40011000
 8000c24:	40011400 	.word	0x40011400
 8000c28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <HAL_GPIO_Init+0x304>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	43db      	mvns	r3, r3
 8000c34:	4909      	ldr	r1, [pc, #36]	@ (8000c5c <HAL_GPIO_Init+0x304>)
 8000c36:	4013      	ands	r3, r2
 8000c38:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c46:	fa22 f303 	lsr.w	r3, r2, r3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f47f ae8e 	bne.w	800096c <HAL_GPIO_Init+0x14>
  }
}
 8000c50:	bf00      	nop
 8000c52:	bf00      	nop
 8000c54:	372c      	adds	r7, #44	@ 0x2c
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	40010400 	.word	0x40010400

08000c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	807b      	strh	r3, [r7, #2]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c70:	787b      	ldrb	r3, [r7, #1]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d003      	beq.n	8000c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c76:	887a      	ldrh	r2, [r7, #2]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c7c:	e003      	b.n	8000c86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c7e:	887b      	ldrh	r3, [r7, #2]
 8000c80:	041a      	lsls	r2, r3, #16
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	611a      	str	r2, [r3, #16]
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c9a:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c9c:	695a      	ldr	r2, [r3, #20]
 8000c9e:	88fb      	ldrh	r3, [r7, #6]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d006      	beq.n	8000cb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ca6:	4a05      	ldr	r2, [pc, #20]	@ (8000cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ca8:	88fb      	ldrh	r3, [r7, #6]
 8000caa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000cac:	88fb      	ldrh	r3, [r7, #6]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fb28 	bl	8000304 <HAL_GPIO_EXTI_Callback>
  }
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40010400 	.word	0x40010400

08000cc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d101      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e272      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f000 8087 	beq.w	8000dee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ce0:	4b92      	ldr	r3, [pc, #584]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f003 030c 	and.w	r3, r3, #12
 8000ce8:	2b04      	cmp	r3, #4
 8000cea:	d00c      	beq.n	8000d06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cec:	4b8f      	ldr	r3, [pc, #572]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f003 030c 	and.w	r3, r3, #12
 8000cf4:	2b08      	cmp	r3, #8
 8000cf6:	d112      	bne.n	8000d1e <HAL_RCC_OscConfig+0x5e>
 8000cf8:	4b8c      	ldr	r3, [pc, #560]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d04:	d10b      	bne.n	8000d1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d06:	4b89      	ldr	r3, [pc, #548]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d06c      	beq.n	8000dec <HAL_RCC_OscConfig+0x12c>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d168      	bne.n	8000dec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e24c      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d26:	d106      	bne.n	8000d36 <HAL_RCC_OscConfig+0x76>
 8000d28:	4b80      	ldr	r3, [pc, #512]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a7f      	ldr	r2, [pc, #508]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	e02e      	b.n	8000d94 <HAL_RCC_OscConfig+0xd4>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d10c      	bne.n	8000d58 <HAL_RCC_OscConfig+0x98>
 8000d3e:	4b7b      	ldr	r3, [pc, #492]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a7a      	ldr	r2, [pc, #488]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d48:	6013      	str	r3, [r2, #0]
 8000d4a:	4b78      	ldr	r3, [pc, #480]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a77      	ldr	r2, [pc, #476]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d54:	6013      	str	r3, [r2, #0]
 8000d56:	e01d      	b.n	8000d94 <HAL_RCC_OscConfig+0xd4>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d60:	d10c      	bne.n	8000d7c <HAL_RCC_OscConfig+0xbc>
 8000d62:	4b72      	ldr	r3, [pc, #456]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a71      	ldr	r2, [pc, #452]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d6c:	6013      	str	r3, [r2, #0]
 8000d6e:	4b6f      	ldr	r3, [pc, #444]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a6e      	ldr	r2, [pc, #440]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d78:	6013      	str	r3, [r2, #0]
 8000d7a:	e00b      	b.n	8000d94 <HAL_RCC_OscConfig+0xd4>
 8000d7c:	4b6b      	ldr	r3, [pc, #428]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a6a      	ldr	r2, [pc, #424]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d86:	6013      	str	r3, [r2, #0]
 8000d88:	4b68      	ldr	r3, [pc, #416]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a67      	ldr	r2, [pc, #412]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d013      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d9c:	f7ff fca0 	bl	80006e0 <HAL_GetTick>
 8000da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da2:	e008      	b.n	8000db6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000da4:	f7ff fc9c 	bl	80006e0 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	2b64      	cmp	r3, #100	@ 0x64
 8000db0:	d901      	bls.n	8000db6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000db2:	2303      	movs	r3, #3
 8000db4:	e200      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db6:	4b5d      	ldr	r3, [pc, #372]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d0f0      	beq.n	8000da4 <HAL_RCC_OscConfig+0xe4>
 8000dc2:	e014      	b.n	8000dee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc4:	f7ff fc8c 	bl	80006e0 <HAL_GetTick>
 8000dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dca:	e008      	b.n	8000dde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dcc:	f7ff fc88 	bl	80006e0 <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b64      	cmp	r3, #100	@ 0x64
 8000dd8:	d901      	bls.n	8000dde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e1ec      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dde:	4b53      	ldr	r3, [pc, #332]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d1f0      	bne.n	8000dcc <HAL_RCC_OscConfig+0x10c>
 8000dea:	e000      	b.n	8000dee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d063      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dfa:	4b4c      	ldr	r3, [pc, #304]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 030c 	and.w	r3, r3, #12
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d00b      	beq.n	8000e1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e06:	4b49      	ldr	r3, [pc, #292]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 030c 	and.w	r3, r3, #12
 8000e0e:	2b08      	cmp	r3, #8
 8000e10:	d11c      	bne.n	8000e4c <HAL_RCC_OscConfig+0x18c>
 8000e12:	4b46      	ldr	r3, [pc, #280]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d116      	bne.n	8000e4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e1e:	4b43      	ldr	r3, [pc, #268]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d005      	beq.n	8000e36 <HAL_RCC_OscConfig+0x176>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	691b      	ldr	r3, [r3, #16]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d001      	beq.n	8000e36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e1c0      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e36:	4b3d      	ldr	r3, [pc, #244]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	00db      	lsls	r3, r3, #3
 8000e44:	4939      	ldr	r1, [pc, #228]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e46:	4313      	orrs	r3, r2
 8000e48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e4a:	e03a      	b.n	8000ec2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	691b      	ldr	r3, [r3, #16]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d020      	beq.n	8000e96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e54:	4b36      	ldr	r3, [pc, #216]	@ (8000f30 <HAL_RCC_OscConfig+0x270>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5a:	f7ff fc41 	bl	80006e0 <HAL_GetTick>
 8000e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e60:	e008      	b.n	8000e74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e62:	f7ff fc3d 	bl	80006e0 <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d901      	bls.n	8000e74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e70:	2303      	movs	r3, #3
 8000e72:	e1a1      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e74:	4b2d      	ldr	r3, [pc, #180]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d0f0      	beq.n	8000e62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e80:	4b2a      	ldr	r3, [pc, #168]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	695b      	ldr	r3, [r3, #20]
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	4927      	ldr	r1, [pc, #156]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e90:	4313      	orrs	r3, r2
 8000e92:	600b      	str	r3, [r1, #0]
 8000e94:	e015      	b.n	8000ec2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e96:	4b26      	ldr	r3, [pc, #152]	@ (8000f30 <HAL_RCC_OscConfig+0x270>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9c:	f7ff fc20 	bl	80006e0 <HAL_GetTick>
 8000ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ea2:	e008      	b.n	8000eb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ea4:	f7ff fc1c 	bl	80006e0 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d901      	bls.n	8000eb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e180      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1f0      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0308 	and.w	r3, r3, #8
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d03a      	beq.n	8000f44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d019      	beq.n	8000f0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ed6:	4b17      	ldr	r3, [pc, #92]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000edc:	f7ff fc00 	bl	80006e0 <HAL_GetTick>
 8000ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ee2:	e008      	b.n	8000ef6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ee4:	f7ff fbfc 	bl	80006e0 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d901      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e160      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0f0      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f02:	2001      	movs	r0, #1
 8000f04:	f000 fa9c 	bl	8001440 <RCC_Delay>
 8000f08:	e01c      	b.n	8000f44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f10:	f7ff fbe6 	bl	80006e0 <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f16:	e00f      	b.n	8000f38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f18:	f7ff fbe2 	bl	80006e0 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d908      	bls.n	8000f38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e146      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	42420000 	.word	0x42420000
 8000f34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f38:	4b92      	ldr	r3, [pc, #584]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1e9      	bne.n	8000f18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 0304 	and.w	r3, r3, #4
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f000 80a6 	beq.w	800109e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f52:	2300      	movs	r3, #0
 8000f54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f56:	4b8b      	ldr	r3, [pc, #556]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10d      	bne.n	8000f7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f62:	4b88      	ldr	r3, [pc, #544]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	4a87      	ldr	r2, [pc, #540]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000f68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f6c:	61d3      	str	r3, [r2, #28]
 8000f6e:	4b85      	ldr	r3, [pc, #532]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f7e:	4b82      	ldr	r3, [pc, #520]	@ (8001188 <HAL_RCC_OscConfig+0x4c8>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d118      	bne.n	8000fbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f8a:	4b7f      	ldr	r3, [pc, #508]	@ (8001188 <HAL_RCC_OscConfig+0x4c8>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a7e      	ldr	r2, [pc, #504]	@ (8001188 <HAL_RCC_OscConfig+0x4c8>)
 8000f90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f96:	f7ff fba3 	bl	80006e0 <HAL_GetTick>
 8000f9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f9c:	e008      	b.n	8000fb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f9e:	f7ff fb9f 	bl	80006e0 <HAL_GetTick>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b64      	cmp	r3, #100	@ 0x64
 8000faa:	d901      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e103      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb0:	4b75      	ldr	r3, [pc, #468]	@ (8001188 <HAL_RCC_OscConfig+0x4c8>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d0f0      	beq.n	8000f9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d106      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x312>
 8000fc4:	4b6f      	ldr	r3, [pc, #444]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	4a6e      	ldr	r2, [pc, #440]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	6213      	str	r3, [r2, #32]
 8000fd0:	e02d      	b.n	800102e <HAL_RCC_OscConfig+0x36e>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d10c      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x334>
 8000fda:	4b6a      	ldr	r3, [pc, #424]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000fdc:	6a1b      	ldr	r3, [r3, #32]
 8000fde:	4a69      	ldr	r2, [pc, #420]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000fe0:	f023 0301 	bic.w	r3, r3, #1
 8000fe4:	6213      	str	r3, [r2, #32]
 8000fe6:	4b67      	ldr	r3, [pc, #412]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000fe8:	6a1b      	ldr	r3, [r3, #32]
 8000fea:	4a66      	ldr	r2, [pc, #408]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	f023 0304 	bic.w	r3, r3, #4
 8000ff0:	6213      	str	r3, [r2, #32]
 8000ff2:	e01c      	b.n	800102e <HAL_RCC_OscConfig+0x36e>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	2b05      	cmp	r3, #5
 8000ffa:	d10c      	bne.n	8001016 <HAL_RCC_OscConfig+0x356>
 8000ffc:	4b61      	ldr	r3, [pc, #388]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	4a60      	ldr	r2, [pc, #384]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001002:	f043 0304 	orr.w	r3, r3, #4
 8001006:	6213      	str	r3, [r2, #32]
 8001008:	4b5e      	ldr	r3, [pc, #376]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 800100a:	6a1b      	ldr	r3, [r3, #32]
 800100c:	4a5d      	ldr	r2, [pc, #372]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6213      	str	r3, [r2, #32]
 8001014:	e00b      	b.n	800102e <HAL_RCC_OscConfig+0x36e>
 8001016:	4b5b      	ldr	r3, [pc, #364]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001018:	6a1b      	ldr	r3, [r3, #32]
 800101a:	4a5a      	ldr	r2, [pc, #360]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 800101c:	f023 0301 	bic.w	r3, r3, #1
 8001020:	6213      	str	r3, [r2, #32]
 8001022:	4b58      	ldr	r3, [pc, #352]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001024:	6a1b      	ldr	r3, [r3, #32]
 8001026:	4a57      	ldr	r2, [pc, #348]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001028:	f023 0304 	bic.w	r3, r3, #4
 800102c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d015      	beq.n	8001062 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001036:	f7ff fb53 	bl	80006e0 <HAL_GetTick>
 800103a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800103c:	e00a      	b.n	8001054 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800103e:	f7ff fb4f 	bl	80006e0 <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	f241 3288 	movw	r2, #5000	@ 0x1388
 800104c:	4293      	cmp	r3, r2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e0b1      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001054:	4b4b      	ldr	r3, [pc, #300]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0ee      	beq.n	800103e <HAL_RCC_OscConfig+0x37e>
 8001060:	e014      	b.n	800108c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001062:	f7ff fb3d 	bl	80006e0 <HAL_GetTick>
 8001066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001068:	e00a      	b.n	8001080 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800106a:	f7ff fb39 	bl	80006e0 <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001078:	4293      	cmp	r3, r2
 800107a:	d901      	bls.n	8001080 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e09b      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001080:	4b40      	ldr	r3, [pc, #256]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001082:	6a1b      	ldr	r3, [r3, #32]
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1ee      	bne.n	800106a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800108c:	7dfb      	ldrb	r3, [r7, #23]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d105      	bne.n	800109e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001092:	4b3c      	ldr	r3, [pc, #240]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	4a3b      	ldr	r2, [pc, #236]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001098:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800109c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 8087 	beq.w	80011b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010a8:	4b36      	ldr	r3, [pc, #216]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 030c 	and.w	r3, r3, #12
 80010b0:	2b08      	cmp	r3, #8
 80010b2:	d061      	beq.n	8001178 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69db      	ldr	r3, [r3, #28]
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d146      	bne.n	800114a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010bc:	4b33      	ldr	r3, [pc, #204]	@ (800118c <HAL_RCC_OscConfig+0x4cc>)
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c2:	f7ff fb0d 	bl	80006e0 <HAL_GetTick>
 80010c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010c8:	e008      	b.n	80010dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ca:	f7ff fb09 	bl	80006e0 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d901      	bls.n	80010dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e06d      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010dc:	4b29      	ldr	r3, [pc, #164]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1f0      	bne.n	80010ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010f0:	d108      	bne.n	8001104 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010f2:	4b24      	ldr	r3, [pc, #144]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	4921      	ldr	r1, [pc, #132]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001100:	4313      	orrs	r3, r2
 8001102:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001104:	4b1f      	ldr	r3, [pc, #124]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a19      	ldr	r1, [r3, #32]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001114:	430b      	orrs	r3, r1
 8001116:	491b      	ldr	r1, [pc, #108]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001118:	4313      	orrs	r3, r2
 800111a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800111c:	4b1b      	ldr	r3, [pc, #108]	@ (800118c <HAL_RCC_OscConfig+0x4cc>)
 800111e:	2201      	movs	r2, #1
 8001120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001122:	f7ff fadd 	bl	80006e0 <HAL_GetTick>
 8001126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800112a:	f7ff fad9 	bl	80006e0 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e03d      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800113c:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0f0      	beq.n	800112a <HAL_RCC_OscConfig+0x46a>
 8001148:	e035      	b.n	80011b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800114a:	4b10      	ldr	r3, [pc, #64]	@ (800118c <HAL_RCC_OscConfig+0x4cc>)
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff fac6 	bl	80006e0 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001158:	f7ff fac2 	bl	80006e0 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e026      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116a:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0x498>
 8001176:	e01e      	b.n	80011b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d107      	bne.n	8001190 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e019      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
 8001184:	40021000 	.word	0x40021000
 8001188:	40007000 	.word	0x40007000
 800118c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001190:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <HAL_RCC_OscConfig+0x500>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d106      	bne.n	80011b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d001      	beq.n	80011b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e000      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40021000 	.word	0x40021000

080011c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d101      	bne.n	80011d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e0d0      	b.n	800137a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011d8:	4b6a      	ldr	r3, [pc, #424]	@ (8001384 <HAL_RCC_ClockConfig+0x1c0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0307 	and.w	r3, r3, #7
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d910      	bls.n	8001208 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011e6:	4b67      	ldr	r3, [pc, #412]	@ (8001384 <HAL_RCC_ClockConfig+0x1c0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f023 0207 	bic.w	r2, r3, #7
 80011ee:	4965      	ldr	r1, [pc, #404]	@ (8001384 <HAL_RCC_ClockConfig+0x1c0>)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011f6:	4b63      	ldr	r3, [pc, #396]	@ (8001384 <HAL_RCC_ClockConfig+0x1c0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	429a      	cmp	r2, r3
 8001202:	d001      	beq.n	8001208 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e0b8      	b.n	800137a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d020      	beq.n	8001256 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b00      	cmp	r3, #0
 800121e:	d005      	beq.n	800122c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001220:	4b59      	ldr	r3, [pc, #356]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	4a58      	ldr	r2, [pc, #352]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 8001226:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800122a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0308 	and.w	r3, r3, #8
 8001234:	2b00      	cmp	r3, #0
 8001236:	d005      	beq.n	8001244 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001238:	4b53      	ldr	r3, [pc, #332]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	4a52      	ldr	r2, [pc, #328]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 800123e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001242:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001244:	4b50      	ldr	r3, [pc, #320]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	494d      	ldr	r1, [pc, #308]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 8001252:	4313      	orrs	r3, r2
 8001254:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d040      	beq.n	80012e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d107      	bne.n	800127a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126a:	4b47      	ldr	r3, [pc, #284]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d115      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e07f      	b.n	800137a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b02      	cmp	r3, #2
 8001280:	d107      	bne.n	8001292 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001282:	4b41      	ldr	r3, [pc, #260]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d109      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e073      	b.n	800137a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001292:	4b3d      	ldr	r3, [pc, #244]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e06b      	b.n	800137a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012a2:	4b39      	ldr	r3, [pc, #228]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f023 0203 	bic.w	r2, r3, #3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	4936      	ldr	r1, [pc, #216]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 80012b0:	4313      	orrs	r3, r2
 80012b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012b4:	f7ff fa14 	bl	80006e0 <HAL_GetTick>
 80012b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ba:	e00a      	b.n	80012d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012bc:	f7ff fa10 	bl	80006e0 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e053      	b.n	800137a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 020c 	and.w	r2, r3, #12
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d1eb      	bne.n	80012bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012e4:	4b27      	ldr	r3, [pc, #156]	@ (8001384 <HAL_RCC_ClockConfig+0x1c0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d210      	bcs.n	8001314 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012f2:	4b24      	ldr	r3, [pc, #144]	@ (8001384 <HAL_RCC_ClockConfig+0x1c0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f023 0207 	bic.w	r2, r3, #7
 80012fa:	4922      	ldr	r1, [pc, #136]	@ (8001384 <HAL_RCC_ClockConfig+0x1c0>)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	4313      	orrs	r3, r2
 8001300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001302:	4b20      	ldr	r3, [pc, #128]	@ (8001384 <HAL_RCC_ClockConfig+0x1c0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	429a      	cmp	r2, r3
 800130e:	d001      	beq.n	8001314 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e032      	b.n	800137a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	2b00      	cmp	r3, #0
 800131e:	d008      	beq.n	8001332 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001320:	4b19      	ldr	r3, [pc, #100]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	4916      	ldr	r1, [pc, #88]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 800132e:	4313      	orrs	r3, r2
 8001330:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	2b00      	cmp	r3, #0
 800133c:	d009      	beq.n	8001352 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800133e:	4b12      	ldr	r3, [pc, #72]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	490e      	ldr	r1, [pc, #56]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 800134e:	4313      	orrs	r3, r2
 8001350:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001352:	f000 f821 	bl	8001398 <HAL_RCC_GetSysClockFreq>
 8001356:	4602      	mov	r2, r0
 8001358:	4b0b      	ldr	r3, [pc, #44]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	091b      	lsrs	r3, r3, #4
 800135e:	f003 030f 	and.w	r3, r3, #15
 8001362:	490a      	ldr	r1, [pc, #40]	@ (800138c <HAL_RCC_ClockConfig+0x1c8>)
 8001364:	5ccb      	ldrb	r3, [r1, r3]
 8001366:	fa22 f303 	lsr.w	r3, r2, r3
 800136a:	4a09      	ldr	r2, [pc, #36]	@ (8001390 <HAL_RCC_ClockConfig+0x1cc>)
 800136c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800136e:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <HAL_RCC_ClockConfig+0x1d0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f972 	bl	800065c <HAL_InitTick>

  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40022000 	.word	0x40022000
 8001388:	40021000 	.word	0x40021000
 800138c:	08001e5c 	.word	0x08001e5c
 8001390:	20000004 	.word	0x20000004
 8001394:	20000008 	.word	0x20000008

08001398 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001398:	b480      	push	{r7}
 800139a:	b087      	sub	sp, #28
 800139c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013b2:	4b1e      	ldr	r3, [pc, #120]	@ (800142c <HAL_RCC_GetSysClockFreq+0x94>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f003 030c 	and.w	r3, r3, #12
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d002      	beq.n	80013c8 <HAL_RCC_GetSysClockFreq+0x30>
 80013c2:	2b08      	cmp	r3, #8
 80013c4:	d003      	beq.n	80013ce <HAL_RCC_GetSysClockFreq+0x36>
 80013c6:	e027      	b.n	8001418 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013c8:	4b19      	ldr	r3, [pc, #100]	@ (8001430 <HAL_RCC_GetSysClockFreq+0x98>)
 80013ca:	613b      	str	r3, [r7, #16]
      break;
 80013cc:	e027      	b.n	800141e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	0c9b      	lsrs	r3, r3, #18
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	4a17      	ldr	r2, [pc, #92]	@ (8001434 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013d8:	5cd3      	ldrb	r3, [r2, r3]
 80013da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d010      	beq.n	8001408 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013e6:	4b11      	ldr	r3, [pc, #68]	@ (800142c <HAL_RCC_GetSysClockFreq+0x94>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	0c5b      	lsrs	r3, r3, #17
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	4a11      	ldr	r2, [pc, #68]	@ (8001438 <HAL_RCC_GetSysClockFreq+0xa0>)
 80013f2:	5cd3      	ldrb	r3, [r2, r3]
 80013f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001430 <HAL_RCC_GetSysClockFreq+0x98>)
 80013fa:	fb03 f202 	mul.w	r2, r3, r2
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	fbb2 f3f3 	udiv	r3, r2, r3
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	e004      	b.n	8001412 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a0c      	ldr	r2, [pc, #48]	@ (800143c <HAL_RCC_GetSysClockFreq+0xa4>)
 800140c:	fb02 f303 	mul.w	r3, r2, r3
 8001410:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	613b      	str	r3, [r7, #16]
      break;
 8001416:	e002      	b.n	800141e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001418:	4b05      	ldr	r3, [pc, #20]	@ (8001430 <HAL_RCC_GetSysClockFreq+0x98>)
 800141a:	613b      	str	r3, [r7, #16]
      break;
 800141c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800141e:	693b      	ldr	r3, [r7, #16]
}
 8001420:	4618      	mov	r0, r3
 8001422:	371c      	adds	r7, #28
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40021000 	.word	0x40021000
 8001430:	007a1200 	.word	0x007a1200
 8001434:	08001e6c 	.word	0x08001e6c
 8001438:	08001e7c 	.word	0x08001e7c
 800143c:	003d0900 	.word	0x003d0900

08001440 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001448:	4b0a      	ldr	r3, [pc, #40]	@ (8001474 <RCC_Delay+0x34>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a0a      	ldr	r2, [pc, #40]	@ (8001478 <RCC_Delay+0x38>)
 800144e:	fba2 2303 	umull	r2, r3, r2, r3
 8001452:	0a5b      	lsrs	r3, r3, #9
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	fb02 f303 	mul.w	r3, r2, r3
 800145a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800145c:	bf00      	nop
  }
  while (Delay --);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	1e5a      	subs	r2, r3, #1
 8001462:	60fa      	str	r2, [r7, #12]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1f9      	bne.n	800145c <RCC_Delay+0x1c>
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	20000004 	.word	0x20000004
 8001478:	10624dd3 	.word	0x10624dd3

0800147c <LCD16X2_DATA>:
#include "../../Util/Util.h"

//-----[ Alphanumeric LCD16X2 Functions ]-----

void LCD16X2_DATA(uint8_t LCD16X2_Index, unsigned char Data)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	460a      	mov	r2, r1
 8001486:	71fb      	strb	r3, [r7, #7]
 8001488:	4613      	mov	r3, r2
 800148a:	71bb      	strb	r3, [r7, #6]
    if(Data & 1)
 800148c:	79bb      	ldrb	r3, [r7, #6]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b00      	cmp	r3, #0
 8001494:	d014      	beq.n	80014c0 <LCD16X2_DATA+0x44>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D4_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D4_PINx, 1);
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	4a5a      	ldr	r2, [pc, #360]	@ (8001604 <LCD16X2_DATA+0x188>)
 800149a:	2134      	movs	r1, #52	@ 0x34
 800149c:	fb01 f303 	mul.w	r3, r1, r3
 80014a0:	4413      	add	r3, r2
 80014a2:	3304      	adds	r3, #4
 80014a4:	6818      	ldr	r0, [r3, #0]
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	4a56      	ldr	r2, [pc, #344]	@ (8001604 <LCD16X2_DATA+0x188>)
 80014aa:	2134      	movs	r1, #52	@ 0x34
 80014ac:	fb01 f303 	mul.w	r3, r1, r3
 80014b0:	4413      	add	r3, r2
 80014b2:	3308      	adds	r3, #8
 80014b4:	881b      	ldrh	r3, [r3, #0]
 80014b6:	2201      	movs	r2, #1
 80014b8:	4619      	mov	r1, r3
 80014ba:	f7ff fbd1 	bl	8000c60 <HAL_GPIO_WritePin>
 80014be:	e013      	b.n	80014e8 <LCD16X2_DATA+0x6c>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D4_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D4_PINx, 0);
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	4a50      	ldr	r2, [pc, #320]	@ (8001604 <LCD16X2_DATA+0x188>)
 80014c4:	2134      	movs	r1, #52	@ 0x34
 80014c6:	fb01 f303 	mul.w	r3, r1, r3
 80014ca:	4413      	add	r3, r2
 80014cc:	3304      	adds	r3, #4
 80014ce:	6818      	ldr	r0, [r3, #0]
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	4a4c      	ldr	r2, [pc, #304]	@ (8001604 <LCD16X2_DATA+0x188>)
 80014d4:	2134      	movs	r1, #52	@ 0x34
 80014d6:	fb01 f303 	mul.w	r3, r1, r3
 80014da:	4413      	add	r3, r2
 80014dc:	3308      	adds	r3, #8
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	2200      	movs	r2, #0
 80014e2:	4619      	mov	r1, r3
 80014e4:	f7ff fbbc 	bl	8000c60 <HAL_GPIO_WritePin>
    if(Data & 2)
 80014e8:	79bb      	ldrb	r3, [r7, #6]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d014      	beq.n	800151c <LCD16X2_DATA+0xa0>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D5_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D5_PINx, 1);
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	4a43      	ldr	r2, [pc, #268]	@ (8001604 <LCD16X2_DATA+0x188>)
 80014f6:	2134      	movs	r1, #52	@ 0x34
 80014f8:	fb01 f303 	mul.w	r3, r1, r3
 80014fc:	4413      	add	r3, r2
 80014fe:	330c      	adds	r3, #12
 8001500:	6818      	ldr	r0, [r3, #0]
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	4a3f      	ldr	r2, [pc, #252]	@ (8001604 <LCD16X2_DATA+0x188>)
 8001506:	2134      	movs	r1, #52	@ 0x34
 8001508:	fb01 f303 	mul.w	r3, r1, r3
 800150c:	4413      	add	r3, r2
 800150e:	3310      	adds	r3, #16
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	2201      	movs	r2, #1
 8001514:	4619      	mov	r1, r3
 8001516:	f7ff fba3 	bl	8000c60 <HAL_GPIO_WritePin>
 800151a:	e013      	b.n	8001544 <LCD16X2_DATA+0xc8>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D5_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D5_PINx, 0);
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	4a39      	ldr	r2, [pc, #228]	@ (8001604 <LCD16X2_DATA+0x188>)
 8001520:	2134      	movs	r1, #52	@ 0x34
 8001522:	fb01 f303 	mul.w	r3, r1, r3
 8001526:	4413      	add	r3, r2
 8001528:	330c      	adds	r3, #12
 800152a:	6818      	ldr	r0, [r3, #0]
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	4a35      	ldr	r2, [pc, #212]	@ (8001604 <LCD16X2_DATA+0x188>)
 8001530:	2134      	movs	r1, #52	@ 0x34
 8001532:	fb01 f303 	mul.w	r3, r1, r3
 8001536:	4413      	add	r3, r2
 8001538:	3310      	adds	r3, #16
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	2200      	movs	r2, #0
 800153e:	4619      	mov	r1, r3
 8001540:	f7ff fb8e 	bl	8000c60 <HAL_GPIO_WritePin>
    if(Data & 4)
 8001544:	79bb      	ldrb	r3, [r7, #6]
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	2b00      	cmp	r3, #0
 800154c:	d014      	beq.n	8001578 <LCD16X2_DATA+0xfc>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D6_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D6_PINx, 1);
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	4a2c      	ldr	r2, [pc, #176]	@ (8001604 <LCD16X2_DATA+0x188>)
 8001552:	2134      	movs	r1, #52	@ 0x34
 8001554:	fb01 f303 	mul.w	r3, r1, r3
 8001558:	4413      	add	r3, r2
 800155a:	3314      	adds	r3, #20
 800155c:	6818      	ldr	r0, [r3, #0]
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	4a28      	ldr	r2, [pc, #160]	@ (8001604 <LCD16X2_DATA+0x188>)
 8001562:	2134      	movs	r1, #52	@ 0x34
 8001564:	fb01 f303 	mul.w	r3, r1, r3
 8001568:	4413      	add	r3, r2
 800156a:	3318      	adds	r3, #24
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	2201      	movs	r2, #1
 8001570:	4619      	mov	r1, r3
 8001572:	f7ff fb75 	bl	8000c60 <HAL_GPIO_WritePin>
 8001576:	e013      	b.n	80015a0 <LCD16X2_DATA+0x124>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D6_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D6_PINx, 0);
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	4a22      	ldr	r2, [pc, #136]	@ (8001604 <LCD16X2_DATA+0x188>)
 800157c:	2134      	movs	r1, #52	@ 0x34
 800157e:	fb01 f303 	mul.w	r3, r1, r3
 8001582:	4413      	add	r3, r2
 8001584:	3314      	adds	r3, #20
 8001586:	6818      	ldr	r0, [r3, #0]
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	4a1e      	ldr	r2, [pc, #120]	@ (8001604 <LCD16X2_DATA+0x188>)
 800158c:	2134      	movs	r1, #52	@ 0x34
 800158e:	fb01 f303 	mul.w	r3, r1, r3
 8001592:	4413      	add	r3, r2
 8001594:	3318      	adds	r3, #24
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	2200      	movs	r2, #0
 800159a:	4619      	mov	r1, r3
 800159c:	f7ff fb60 	bl	8000c60 <HAL_GPIO_WritePin>
    if(Data & 8)
 80015a0:	79bb      	ldrb	r3, [r7, #6]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d014      	beq.n	80015d4 <LCD16X2_DATA+0x158>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D7_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D7_PINx, 1);
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	4a15      	ldr	r2, [pc, #84]	@ (8001604 <LCD16X2_DATA+0x188>)
 80015ae:	2134      	movs	r1, #52	@ 0x34
 80015b0:	fb01 f303 	mul.w	r3, r1, r3
 80015b4:	4413      	add	r3, r2
 80015b6:	331c      	adds	r3, #28
 80015b8:	6818      	ldr	r0, [r3, #0]
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	4a11      	ldr	r2, [pc, #68]	@ (8001604 <LCD16X2_DATA+0x188>)
 80015be:	2134      	movs	r1, #52	@ 0x34
 80015c0:	fb01 f303 	mul.w	r3, r1, r3
 80015c4:	4413      	add	r3, r2
 80015c6:	3320      	adds	r3, #32
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	2201      	movs	r2, #1
 80015cc:	4619      	mov	r1, r3
 80015ce:	f7ff fb47 	bl	8000c60 <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D7_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D7_PINx, 0);
}
 80015d2:	e013      	b.n	80015fc <LCD16X2_DATA+0x180>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D7_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D7_PINx, 0);
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001604 <LCD16X2_DATA+0x188>)
 80015d8:	2134      	movs	r1, #52	@ 0x34
 80015da:	fb01 f303 	mul.w	r3, r1, r3
 80015de:	4413      	add	r3, r2
 80015e0:	331c      	adds	r3, #28
 80015e2:	6818      	ldr	r0, [r3, #0]
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	4a07      	ldr	r2, [pc, #28]	@ (8001604 <LCD16X2_DATA+0x188>)
 80015e8:	2134      	movs	r1, #52	@ 0x34
 80015ea:	fb01 f303 	mul.w	r3, r1, r3
 80015ee:	4413      	add	r3, r2
 80015f0:	3320      	adds	r3, #32
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	2200      	movs	r2, #0
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff fb32 	bl	8000c60 <HAL_GPIO_WritePin>
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	08001e80 	.word	0x08001e80

08001608 <LCD16X2_CMD>:

void LCD16X2_CMD(uint8_t LCD16X2_Index, unsigned char CMD)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	460a      	mov	r2, r1
 8001612:	71fb      	strb	r3, [r7, #7]
 8001614:	4613      	mov	r3, r2
 8001616:	71bb      	strb	r3, [r7, #6]
    // Select Command Register
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].RS_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].RS_PINx, 0);
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	4a57      	ldr	r2, [pc, #348]	@ (8001778 <LCD16X2_CMD+0x170>)
 800161c:	2134      	movs	r1, #52	@ 0x34
 800161e:	fb01 f303 	mul.w	r3, r1, r3
 8001622:	4413      	add	r3, r2
 8001624:	332c      	adds	r3, #44	@ 0x2c
 8001626:	6818      	ldr	r0, [r3, #0]
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	4a53      	ldr	r2, [pc, #332]	@ (8001778 <LCD16X2_CMD+0x170>)
 800162c:	2134      	movs	r1, #52	@ 0x34
 800162e:	fb01 f303 	mul.w	r3, r1, r3
 8001632:	4413      	add	r3, r2
 8001634:	3330      	adds	r3, #48	@ 0x30
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	2200      	movs	r2, #0
 800163a:	4619      	mov	r1, r3
 800163c:	f7ff fb10 	bl	8000c60 <HAL_GPIO_WritePin>
    // Move The Command Data To LCD
	LCD16X2_DATA(LCD16X2_Index, CMD);
 8001640:	79ba      	ldrb	r2, [r7, #6]
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	4611      	mov	r1, r2
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ff18 	bl	800147c <LCD16X2_DATA>
    // Send The EN Clock Signal
    HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	4a4a      	ldr	r2, [pc, #296]	@ (8001778 <LCD16X2_CMD+0x170>)
 8001650:	2134      	movs	r1, #52	@ 0x34
 8001652:	fb01 f303 	mul.w	r3, r1, r3
 8001656:	4413      	add	r3, r2
 8001658:	3324      	adds	r3, #36	@ 0x24
 800165a:	6818      	ldr	r0, [r3, #0]
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	4a46      	ldr	r2, [pc, #280]	@ (8001778 <LCD16X2_CMD+0x170>)
 8001660:	2134      	movs	r1, #52	@ 0x34
 8001662:	fb01 f303 	mul.w	r3, r1, r3
 8001666:	4413      	add	r3, r2
 8001668:	3328      	adds	r3, #40	@ 0x28
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	2200      	movs	r2, #0
 800166e:	4619      	mov	r1, r3
 8001670:	f7ff faf6 	bl	8000c60 <HAL_GPIO_WritePin>
    DELAY_US(5);
 8001674:	4b41      	ldr	r3, [pc, #260]	@ (800177c <LCD16X2_CMD+0x174>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	61fb      	str	r3, [r7, #28]
 800167a:	4b41      	ldr	r3, [pc, #260]	@ (8001780 <LCD16X2_CMD+0x178>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a41      	ldr	r2, [pc, #260]	@ (8001784 <LCD16X2_CMD+0x17c>)
 8001680:	fba2 2303 	umull	r2, r3, r2, r3
 8001684:	0c9a      	lsrs	r2, r3, #18
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	441a      	add	r2, r3
 800168c:	4b3c      	ldr	r3, [pc, #240]	@ (8001780 <LCD16X2_CMD+0x178>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	493c      	ldr	r1, [pc, #240]	@ (8001784 <LCD16X2_CMD+0x17c>)
 8001692:	fba1 1303 	umull	r1, r3, r1, r3
 8001696:	0c9b      	lsrs	r3, r3, #18
 8001698:	085b      	lsrs	r3, r3, #1
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	61bb      	str	r3, [r7, #24]
 800169e:	4b37      	ldr	r3, [pc, #220]	@ (800177c <LCD16X2_CMD+0x174>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	69fa      	ldr	r2, [r7, #28]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d8f8      	bhi.n	800169e <LCD16X2_CMD+0x96>
    HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 1);
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	4a32      	ldr	r2, [pc, #200]	@ (8001778 <LCD16X2_CMD+0x170>)
 80016b0:	2134      	movs	r1, #52	@ 0x34
 80016b2:	fb01 f303 	mul.w	r3, r1, r3
 80016b6:	4413      	add	r3, r2
 80016b8:	3324      	adds	r3, #36	@ 0x24
 80016ba:	6818      	ldr	r0, [r3, #0]
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	4a2e      	ldr	r2, [pc, #184]	@ (8001778 <LCD16X2_CMD+0x170>)
 80016c0:	2134      	movs	r1, #52	@ 0x34
 80016c2:	fb01 f303 	mul.w	r3, r1, r3
 80016c6:	4413      	add	r3, r2
 80016c8:	3328      	adds	r3, #40	@ 0x28
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	2201      	movs	r2, #1
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7ff fac6 	bl	8000c60 <HAL_GPIO_WritePin>
    DELAY_US(5);
 80016d4:	4b29      	ldr	r3, [pc, #164]	@ (800177c <LCD16X2_CMD+0x174>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	4b29      	ldr	r3, [pc, #164]	@ (8001780 <LCD16X2_CMD+0x178>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a29      	ldr	r2, [pc, #164]	@ (8001784 <LCD16X2_CMD+0x17c>)
 80016e0:	fba2 2303 	umull	r2, r3, r2, r3
 80016e4:	0c9a      	lsrs	r2, r3, #18
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	441a      	add	r2, r3
 80016ec:	4b24      	ldr	r3, [pc, #144]	@ (8001780 <LCD16X2_CMD+0x178>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4924      	ldr	r1, [pc, #144]	@ (8001784 <LCD16X2_CMD+0x17c>)
 80016f2:	fba1 1303 	umull	r1, r3, r1, r3
 80016f6:	0c9b      	lsrs	r3, r3, #18
 80016f8:	085b      	lsrs	r3, r3, #1
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	4b1f      	ldr	r3, [pc, #124]	@ (800177c <LCD16X2_CMD+0x174>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	429a      	cmp	r2, r3
 800170a:	d8f8      	bhi.n	80016fe <LCD16X2_CMD+0xf6>
    HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	4a1a      	ldr	r2, [pc, #104]	@ (8001778 <LCD16X2_CMD+0x170>)
 8001710:	2134      	movs	r1, #52	@ 0x34
 8001712:	fb01 f303 	mul.w	r3, r1, r3
 8001716:	4413      	add	r3, r2
 8001718:	3324      	adds	r3, #36	@ 0x24
 800171a:	6818      	ldr	r0, [r3, #0]
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	4a16      	ldr	r2, [pc, #88]	@ (8001778 <LCD16X2_CMD+0x170>)
 8001720:	2134      	movs	r1, #52	@ 0x34
 8001722:	fb01 f303 	mul.w	r3, r1, r3
 8001726:	4413      	add	r3, r2
 8001728:	3328      	adds	r3, #40	@ 0x28
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	2200      	movs	r2, #0
 800172e:	4619      	mov	r1, r3
 8001730:	f7ff fa96 	bl	8000c60 <HAL_GPIO_WritePin>
    DELAY_US(100);
 8001734:	4b11      	ldr	r3, [pc, #68]	@ (800177c <LCD16X2_CMD+0x174>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	4b11      	ldr	r3, [pc, #68]	@ (8001780 <LCD16X2_CMD+0x178>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a11      	ldr	r2, [pc, #68]	@ (8001784 <LCD16X2_CMD+0x17c>)
 8001740:	fba2 2303 	umull	r2, r3, r2, r3
 8001744:	0c9b      	lsrs	r3, r3, #18
 8001746:	2264      	movs	r2, #100	@ 0x64
 8001748:	fb03 f202 	mul.w	r2, r3, r2
 800174c:	4b0c      	ldr	r3, [pc, #48]	@ (8001780 <LCD16X2_CMD+0x178>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	490c      	ldr	r1, [pc, #48]	@ (8001784 <LCD16X2_CMD+0x17c>)
 8001752:	fba1 1303 	umull	r1, r3, r1, r3
 8001756:	0c9b      	lsrs	r3, r3, #18
 8001758:	085b      	lsrs	r3, r3, #1
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	4b07      	ldr	r3, [pc, #28]	@ (800177c <LCD16X2_CMD+0x174>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	429a      	cmp	r2, r3
 800176a:	d8f8      	bhi.n	800175e <LCD16X2_CMD+0x156>
}
 800176c:	bf00      	nop
 800176e:	bf00      	nop
 8001770:	3720      	adds	r7, #32
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	08001e80 	.word	0x08001e80
 800177c:	e000e010 	.word	0xe000e010
 8001780:	20000004 	.word	0x20000004
 8001784:	431bde83 	.word	0x431bde83

08001788 <LCD16X2_Clear>:

void LCD16X2_Clear(uint8_t LCD16X2_Index)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
	LCD16X2_CMD(LCD16X2_Index, 0);
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ff36 	bl	8001608 <LCD16X2_CMD>
	LCD16X2_CMD(LCD16X2_Index, 1);
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	2101      	movs	r1, #1
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff31 	bl	8001608 <LCD16X2_CMD>
    DELAY_MS(2);
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	e01f      	b.n	80017ec <LCD16X2_Clear+0x64>
 80017ac:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <LCD16X2_Clear+0x74>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	4b13      	ldr	r3, [pc, #76]	@ (8001800 <LCD16X2_Clear+0x78>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a13      	ldr	r2, [pc, #76]	@ (8001804 <LCD16X2_Clear+0x7c>)
 80017b8:	fba2 2303 	umull	r2, r3, r2, r3
 80017bc:	0c9b      	lsrs	r3, r3, #18
 80017be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80017c2:	fb03 f202 	mul.w	r2, r3, r2
 80017c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001800 <LCD16X2_Clear+0x78>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	490e      	ldr	r1, [pc, #56]	@ (8001804 <LCD16X2_Clear+0x7c>)
 80017cc:	fba1 1303 	umull	r1, r3, r1, r3
 80017d0:	0c9b      	lsrs	r3, r3, #18
 80017d2:	085b      	lsrs	r3, r3, #1
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	4b08      	ldr	r3, [pc, #32]	@ (80017fc <LCD16X2_Clear+0x74>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d8f8      	bhi.n	80017d8 <LCD16X2_Clear+0x50>
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	3301      	adds	r3, #1
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d9dc      	bls.n	80017ac <LCD16X2_Clear+0x24>
}
 80017f2:	bf00      	nop
 80017f4:	bf00      	nop
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	e000e010 	.word	0xe000e010
 8001800:	20000004 	.word	0x20000004
 8001804:	431bde83 	.word	0x431bde83

08001808 <LCD16X2_Set_Cursor>:

void LCD16X2_Set_Cursor(uint8_t LCD16X2_Index, unsigned char r, unsigned char c)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
 8001812:	460b      	mov	r3, r1
 8001814:	71bb      	strb	r3, [r7, #6]
 8001816:	4613      	mov	r3, r2
 8001818:	717b      	strb	r3, [r7, #5]
    unsigned char Temp,Low4,High4;
    if(r == 1)
 800181a:	79bb      	ldrb	r3, [r7, #6]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d115      	bne.n	800184c <LCD16X2_Set_Cursor+0x44>
    {
      Temp  = 0x80 + c - 1; //0x80 is used to move the cursor
 8001820:	797b      	ldrb	r3, [r7, #5]
 8001822:	337f      	adds	r3, #127	@ 0x7f
 8001824:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 8001826:	7bfb      	ldrb	r3, [r7, #15]
 8001828:	091b      	lsrs	r3, r3, #4
 800182a:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 800182c:	7bfb      	ldrb	r3, [r7, #15]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	737b      	strb	r3, [r7, #13]
      LCD16X2_CMD(LCD16X2_Index, High4);
 8001834:	7bba      	ldrb	r2, [r7, #14]
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	4611      	mov	r1, r2
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fee4 	bl	8001608 <LCD16X2_CMD>
      LCD16X2_CMD(LCD16X2_Index, Low4);
 8001840:	7b7a      	ldrb	r2, [r7, #13]
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	4611      	mov	r1, r2
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fede 	bl	8001608 <LCD16X2_CMD>
    }
    if(r == 2)
 800184c:	79bb      	ldrb	r3, [r7, #6]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d115      	bne.n	800187e <LCD16X2_Set_Cursor+0x76>
    {
      Temp  = 0xC0 + c - 1;
 8001852:	797b      	ldrb	r3, [r7, #5]
 8001854:	3b41      	subs	r3, #65	@ 0x41
 8001856:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	091b      	lsrs	r3, r3, #4
 800185c:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	f003 030f 	and.w	r3, r3, #15
 8001864:	737b      	strb	r3, [r7, #13]
      LCD16X2_CMD(LCD16X2_Index, High4);
 8001866:	7bba      	ldrb	r2, [r7, #14]
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	4611      	mov	r1, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fecb 	bl	8001608 <LCD16X2_CMD>
      LCD16X2_CMD(LCD16X2_Index, Low4);
 8001872:	7b7a      	ldrb	r2, [r7, #13]
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	4611      	mov	r1, r2
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fec5 	bl	8001608 <LCD16X2_CMD>
    }
}
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <LCD16X2_Init>:

void LCD16X2_Init(uint8_t LCD16X2_Index)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08e      	sub	sp, #56	@ 0x38
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 8001892:	bf00      	nop
 8001894:	f7fe ff24 	bl	80006e0 <HAL_GetTick>
 8001898:	4603      	mov	r3, r0
 800189a:	2b31      	cmp	r3, #49	@ 0x31
 800189c:	d9fa      	bls.n	8001894 <LCD16X2_Init+0xc>
	// The Init. Procedure As Described In The Datasheet
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].RS_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].RS_PINx, 0);
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	4a7c      	ldr	r2, [pc, #496]	@ (8001a94 <LCD16X2_Init+0x20c>)
 80018a2:	2134      	movs	r1, #52	@ 0x34
 80018a4:	fb01 f303 	mul.w	r3, r1, r3
 80018a8:	4413      	add	r3, r2
 80018aa:	332c      	adds	r3, #44	@ 0x2c
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	4a78      	ldr	r2, [pc, #480]	@ (8001a94 <LCD16X2_Init+0x20c>)
 80018b2:	2134      	movs	r1, #52	@ 0x34
 80018b4:	fb01 f303 	mul.w	r3, r1, r3
 80018b8:	4413      	add	r3, r2
 80018ba:	3330      	adds	r3, #48	@ 0x30
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	2200      	movs	r2, #0
 80018c0:	4619      	mov	r1, r3
 80018c2:	f7ff f9cd 	bl	8000c60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	4a72      	ldr	r2, [pc, #456]	@ (8001a94 <LCD16X2_Init+0x20c>)
 80018ca:	2134      	movs	r1, #52	@ 0x34
 80018cc:	fb01 f303 	mul.w	r3, r1, r3
 80018d0:	4413      	add	r3, r2
 80018d2:	3324      	adds	r3, #36	@ 0x24
 80018d4:	6818      	ldr	r0, [r3, #0]
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	4a6e      	ldr	r2, [pc, #440]	@ (8001a94 <LCD16X2_Init+0x20c>)
 80018da:	2134      	movs	r1, #52	@ 0x34
 80018dc:	fb01 f303 	mul.w	r3, r1, r3
 80018e0:	4413      	add	r3, r2
 80018e2:	3328      	adds	r3, #40	@ 0x28
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	2200      	movs	r2, #0
 80018e8:	4619      	mov	r1, r3
 80018ea:	f7ff f9b9 	bl	8000c60 <HAL_GPIO_WritePin>
    // Init in 4-Bit Data Mode
	LCD16X2_DATA(LCD16X2_Index, 0x00);
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fdc2 	bl	800147c <LCD16X2_DATA>
    DELAY_MS(150);
 80018f8:	2300      	movs	r3, #0
 80018fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80018fc:	e01f      	b.n	800193e <LCD16X2_Init+0xb6>
 80018fe:	4b66      	ldr	r3, [pc, #408]	@ (8001a98 <LCD16X2_Init+0x210>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	4b65      	ldr	r3, [pc, #404]	@ (8001a9c <LCD16X2_Init+0x214>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a65      	ldr	r2, [pc, #404]	@ (8001aa0 <LCD16X2_Init+0x218>)
 800190a:	fba2 2303 	umull	r2, r3, r2, r3
 800190e:	0c9b      	lsrs	r3, r3, #18
 8001910:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001914:	fb03 f202 	mul.w	r2, r3, r2
 8001918:	4b60      	ldr	r3, [pc, #384]	@ (8001a9c <LCD16X2_Init+0x214>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4960      	ldr	r1, [pc, #384]	@ (8001aa0 <LCD16X2_Init+0x218>)
 800191e:	fba1 1303 	umull	r1, r3, r1, r3
 8001922:	0c9b      	lsrs	r3, r3, #18
 8001924:	085b      	lsrs	r3, r3, #1
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	4b5b      	ldr	r3, [pc, #364]	@ (8001a98 <LCD16X2_Init+0x210>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	429a      	cmp	r2, r3
 8001936:	d8f8      	bhi.n	800192a <LCD16X2_Init+0xa2>
 8001938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800193a:	3301      	adds	r3, #1
 800193c:	637b      	str	r3, [r7, #52]	@ 0x34
 800193e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001940:	2b95      	cmp	r3, #149	@ 0x95
 8001942:	d9dc      	bls.n	80018fe <LCD16X2_Init+0x76>
    LCD16X2_CMD(LCD16X2_Index, 0x03);
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	2103      	movs	r1, #3
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fe5d 	bl	8001608 <LCD16X2_CMD>
    DELAY_MS(5);
 800194e:	2300      	movs	r3, #0
 8001950:	633b      	str	r3, [r7, #48]	@ 0x30
 8001952:	e01f      	b.n	8001994 <LCD16X2_Init+0x10c>
 8001954:	4b50      	ldr	r3, [pc, #320]	@ (8001a98 <LCD16X2_Init+0x210>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	61bb      	str	r3, [r7, #24]
 800195a:	4b50      	ldr	r3, [pc, #320]	@ (8001a9c <LCD16X2_Init+0x214>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a50      	ldr	r2, [pc, #320]	@ (8001aa0 <LCD16X2_Init+0x218>)
 8001960:	fba2 2303 	umull	r2, r3, r2, r3
 8001964:	0c9b      	lsrs	r3, r3, #18
 8001966:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800196a:	fb03 f202 	mul.w	r2, r3, r2
 800196e:	4b4b      	ldr	r3, [pc, #300]	@ (8001a9c <LCD16X2_Init+0x214>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	494b      	ldr	r1, [pc, #300]	@ (8001aa0 <LCD16X2_Init+0x218>)
 8001974:	fba1 1303 	umull	r1, r3, r1, r3
 8001978:	0c9b      	lsrs	r3, r3, #18
 800197a:	085b      	lsrs	r3, r3, #1
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	4b45      	ldr	r3, [pc, #276]	@ (8001a98 <LCD16X2_Init+0x210>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	429a      	cmp	r2, r3
 800198c:	d8f8      	bhi.n	8001980 <LCD16X2_Init+0xf8>
 800198e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001990:	3301      	adds	r3, #1
 8001992:	633b      	str	r3, [r7, #48]	@ 0x30
 8001994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001996:	2b04      	cmp	r3, #4
 8001998:	d9dc      	bls.n	8001954 <LCD16X2_Init+0xcc>
    LCD16X2_CMD(LCD16X2_Index, 0x03);
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	2103      	movs	r1, #3
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fe32 	bl	8001608 <LCD16X2_CMD>
    DELAY_MS(5);
 80019a4:	2300      	movs	r3, #0
 80019a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019a8:	e01f      	b.n	80019ea <LCD16X2_Init+0x162>
 80019aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001a98 <LCD16X2_Init+0x210>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	623b      	str	r3, [r7, #32]
 80019b0:	4b3a      	ldr	r3, [pc, #232]	@ (8001a9c <LCD16X2_Init+0x214>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a3a      	ldr	r2, [pc, #232]	@ (8001aa0 <LCD16X2_Init+0x218>)
 80019b6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ba:	0c9b      	lsrs	r3, r3, #18
 80019bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019c0:	fb03 f202 	mul.w	r2, r3, r2
 80019c4:	4b35      	ldr	r3, [pc, #212]	@ (8001a9c <LCD16X2_Init+0x214>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4935      	ldr	r1, [pc, #212]	@ (8001aa0 <LCD16X2_Init+0x218>)
 80019ca:	fba1 1303 	umull	r1, r3, r1, r3
 80019ce:	0c9b      	lsrs	r3, r3, #18
 80019d0:	085b      	lsrs	r3, r3, #1
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	61fb      	str	r3, [r7, #28]
 80019d6:	4b30      	ldr	r3, [pc, #192]	@ (8001a98 <LCD16X2_Init+0x210>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	6a3a      	ldr	r2, [r7, #32]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d8f8      	bhi.n	80019d6 <LCD16X2_Init+0x14e>
 80019e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019e6:	3301      	adds	r3, #1
 80019e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019ec:	2b04      	cmp	r3, #4
 80019ee:	d9dc      	bls.n	80019aa <LCD16X2_Init+0x122>
    LCD16X2_CMD(LCD16X2_Index, 0x03);
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	2103      	movs	r1, #3
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fe07 	bl	8001608 <LCD16X2_CMD>
    DELAY_US(150);
 80019fa:	4b27      	ldr	r3, [pc, #156]	@ (8001a98 <LCD16X2_Init+0x210>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a00:	4b26      	ldr	r3, [pc, #152]	@ (8001a9c <LCD16X2_Init+0x214>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a26      	ldr	r2, [pc, #152]	@ (8001aa0 <LCD16X2_Init+0x218>)
 8001a06:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0a:	0c9b      	lsrs	r3, r3, #18
 8001a0c:	2296      	movs	r2, #150	@ 0x96
 8001a0e:	fb03 f202 	mul.w	r2, r3, r2
 8001a12:	4b22      	ldr	r3, [pc, #136]	@ (8001a9c <LCD16X2_Init+0x214>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4922      	ldr	r1, [pc, #136]	@ (8001aa0 <LCD16X2_Init+0x218>)
 8001a18:	fba1 1303 	umull	r1, r3, r1, r3
 8001a1c:	0c9b      	lsrs	r3, r3, #18
 8001a1e:	085b      	lsrs	r3, r3, #1
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a24:	4b1c      	ldr	r3, [pc, #112]	@ (8001a98 <LCD16X2_Init+0x210>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d8f8      	bhi.n	8001a24 <LCD16X2_Init+0x19c>
    // The Rest of The Init Sequence As Defined in The Hitachi HD44780 Datasheet
    LCD16X2_CMD(LCD16X2_Index, 0x02);
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	2102      	movs	r1, #2
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fde6 	bl	8001608 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x02);
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	2102      	movs	r1, #2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff fde1 	bl	8001608 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x08);
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	2108      	movs	r1, #8
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fddc 	bl	8001608 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x00);
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	2100      	movs	r1, #0
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fdd7 	bl	8001608 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x0C);
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	210c      	movs	r1, #12
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fdd2 	bl	8001608 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x00);
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	2100      	movs	r1, #0
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fdcd 	bl	8001608 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x06);
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	2106      	movs	r1, #6
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fdc8 	bl	8001608 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x00);
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fdc3 	bl	8001608 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x01);
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	2101      	movs	r1, #1
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fdbe 	bl	8001608 <LCD16X2_CMD>
}
 8001a8c:	bf00      	nop
 8001a8e:	3738      	adds	r7, #56	@ 0x38
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	08001e80 	.word	0x08001e80
 8001a98:	e000e010 	.word	0xe000e010
 8001a9c:	20000004 	.word	0x20000004
 8001aa0:	431bde83 	.word	0x431bde83

08001aa4 <LCD16X2_Write_Char>:

void LCD16X2_Write_Char(uint8_t LCD16X2_Index, char Data)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b090      	sub	sp, #64	@ 0x40
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	460a      	mov	r2, r1
 8001aae:	71fb      	strb	r3, [r7, #7]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	71bb      	strb	r3, [r7, #6]
   char Low4,High4;
   Low4  = Data & 0x0F;
 8001ab4:	79bb      	ldrb	r3, [r7, #6]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
   High4 = Data & 0xF0;
 8001abe:	79bb      	ldrb	r3, [r7, #6]
 8001ac0:	f023 030f 	bic.w	r3, r3, #15
 8001ac4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].RS_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].RS_PINx, 1);
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	4aa4      	ldr	r2, [pc, #656]	@ (8001d5c <LCD16X2_Write_Char+0x2b8>)
 8001acc:	2134      	movs	r1, #52	@ 0x34
 8001ace:	fb01 f303 	mul.w	r3, r1, r3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	332c      	adds	r3, #44	@ 0x2c
 8001ad6:	6818      	ldr	r0, [r3, #0]
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	4aa0      	ldr	r2, [pc, #640]	@ (8001d5c <LCD16X2_Write_Char+0x2b8>)
 8001adc:	2134      	movs	r1, #52	@ 0x34
 8001ade:	fb01 f303 	mul.w	r3, r1, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3330      	adds	r3, #48	@ 0x30
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	4619      	mov	r1, r3
 8001aec:	f7ff f8b8 	bl	8000c60 <HAL_GPIO_WritePin>

   LCD16X2_DATA(LCD16X2_Index, (High4>>4));
 8001af0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fcbd 	bl	800147c <LCD16X2_DATA>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	4a95      	ldr	r2, [pc, #596]	@ (8001d5c <LCD16X2_Write_Char+0x2b8>)
 8001b06:	2134      	movs	r1, #52	@ 0x34
 8001b08:	fb01 f303 	mul.w	r3, r1, r3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	3324      	adds	r3, #36	@ 0x24
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	4a91      	ldr	r2, [pc, #580]	@ (8001d5c <LCD16X2_Write_Char+0x2b8>)
 8001b16:	2134      	movs	r1, #52	@ 0x34
 8001b18:	fb01 f303 	mul.w	r3, r1, r3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	3328      	adds	r3, #40	@ 0x28
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	2200      	movs	r2, #0
 8001b24:	4619      	mov	r1, r3
 8001b26:	f7ff f89b 	bl	8000c60 <HAL_GPIO_WritePin>
   DELAY_US(5);
 8001b2a:	4b8d      	ldr	r3, [pc, #564]	@ (8001d60 <LCD16X2_Write_Char+0x2bc>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b30:	4b8c      	ldr	r3, [pc, #560]	@ (8001d64 <LCD16X2_Write_Char+0x2c0>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a8c      	ldr	r2, [pc, #560]	@ (8001d68 <LCD16X2_Write_Char+0x2c4>)
 8001b36:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3a:	0c9a      	lsrs	r2, r3, #18
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	441a      	add	r2, r3
 8001b42:	4b88      	ldr	r3, [pc, #544]	@ (8001d64 <LCD16X2_Write_Char+0x2c0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4988      	ldr	r1, [pc, #544]	@ (8001d68 <LCD16X2_Write_Char+0x2c4>)
 8001b48:	fba1 1303 	umull	r1, r3, r1, r3
 8001b4c:	0c9b      	lsrs	r3, r3, #18
 8001b4e:	085b      	lsrs	r3, r3, #1
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b54:	4b82      	ldr	r3, [pc, #520]	@ (8001d60 <LCD16X2_Write_Char+0x2bc>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d8f8      	bhi.n	8001b54 <LCD16X2_Write_Char+0xb0>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 1);
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	4a7d      	ldr	r2, [pc, #500]	@ (8001d5c <LCD16X2_Write_Char+0x2b8>)
 8001b66:	2134      	movs	r1, #52	@ 0x34
 8001b68:	fb01 f303 	mul.w	r3, r1, r3
 8001b6c:	4413      	add	r3, r2
 8001b6e:	3324      	adds	r3, #36	@ 0x24
 8001b70:	6818      	ldr	r0, [r3, #0]
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	4a79      	ldr	r2, [pc, #484]	@ (8001d5c <LCD16X2_Write_Char+0x2b8>)
 8001b76:	2134      	movs	r1, #52	@ 0x34
 8001b78:	fb01 f303 	mul.w	r3, r1, r3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3328      	adds	r3, #40	@ 0x28
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	2201      	movs	r2, #1
 8001b84:	4619      	mov	r1, r3
 8001b86:	f7ff f86b 	bl	8000c60 <HAL_GPIO_WritePin>
   DELAY_US(5);
 8001b8a:	4b75      	ldr	r3, [pc, #468]	@ (8001d60 <LCD16X2_Write_Char+0x2bc>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b90:	4b74      	ldr	r3, [pc, #464]	@ (8001d64 <LCD16X2_Write_Char+0x2c0>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a74      	ldr	r2, [pc, #464]	@ (8001d68 <LCD16X2_Write_Char+0x2c4>)
 8001b96:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9a:	0c9a      	lsrs	r2, r3, #18
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	441a      	add	r2, r3
 8001ba2:	4b70      	ldr	r3, [pc, #448]	@ (8001d64 <LCD16X2_Write_Char+0x2c0>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4970      	ldr	r1, [pc, #448]	@ (8001d68 <LCD16X2_Write_Char+0x2c4>)
 8001ba8:	fba1 1303 	umull	r1, r3, r1, r3
 8001bac:	0c9b      	lsrs	r3, r3, #18
 8001bae:	085b      	lsrs	r3, r3, #1
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bb4:	4b6a      	ldr	r3, [pc, #424]	@ (8001d60 <LCD16X2_Write_Char+0x2bc>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d8f8      	bhi.n	8001bb4 <LCD16X2_Write_Char+0x110>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	4a65      	ldr	r2, [pc, #404]	@ (8001d5c <LCD16X2_Write_Char+0x2b8>)
 8001bc6:	2134      	movs	r1, #52	@ 0x34
 8001bc8:	fb01 f303 	mul.w	r3, r1, r3
 8001bcc:	4413      	add	r3, r2
 8001bce:	3324      	adds	r3, #36	@ 0x24
 8001bd0:	6818      	ldr	r0, [r3, #0]
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	4a61      	ldr	r2, [pc, #388]	@ (8001d5c <LCD16X2_Write_Char+0x2b8>)
 8001bd6:	2134      	movs	r1, #52	@ 0x34
 8001bd8:	fb01 f303 	mul.w	r3, r1, r3
 8001bdc:	4413      	add	r3, r2
 8001bde:	3328      	adds	r3, #40	@ 0x28
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	2200      	movs	r2, #0
 8001be4:	4619      	mov	r1, r3
 8001be6:	f7ff f83b 	bl	8000c60 <HAL_GPIO_WritePin>
   DELAY_US(100);
 8001bea:	4b5d      	ldr	r3, [pc, #372]	@ (8001d60 <LCD16X2_Write_Char+0x2bc>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bf0:	4b5c      	ldr	r3, [pc, #368]	@ (8001d64 <LCD16X2_Write_Char+0x2c0>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a5c      	ldr	r2, [pc, #368]	@ (8001d68 <LCD16X2_Write_Char+0x2c4>)
 8001bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfa:	0c9b      	lsrs	r3, r3, #18
 8001bfc:	2264      	movs	r2, #100	@ 0x64
 8001bfe:	fb03 f202 	mul.w	r2, r3, r2
 8001c02:	4b58      	ldr	r3, [pc, #352]	@ (8001d64 <LCD16X2_Write_Char+0x2c0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4958      	ldr	r1, [pc, #352]	@ (8001d68 <LCD16X2_Write_Char+0x2c4>)
 8001c08:	fba1 1303 	umull	r1, r3, r1, r3
 8001c0c:	0c9b      	lsrs	r3, r3, #18
 8001c0e:	085b      	lsrs	r3, r3, #1
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c14:	4b52      	ldr	r3, [pc, #328]	@ (8001d60 <LCD16X2_Write_Char+0x2bc>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d8f8      	bhi.n	8001c14 <LCD16X2_Write_Char+0x170>

   LCD16X2_DATA(LCD16X2_Index, Low4);
 8001c22:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	4611      	mov	r1, r2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fc26 	bl	800147c <LCD16X2_DATA>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	4a4a      	ldr	r2, [pc, #296]	@ (8001d5c <LCD16X2_Write_Char+0x2b8>)
 8001c34:	2134      	movs	r1, #52	@ 0x34
 8001c36:	fb01 f303 	mul.w	r3, r1, r3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3324      	adds	r3, #36	@ 0x24
 8001c3e:	6818      	ldr	r0, [r3, #0]
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	4a46      	ldr	r2, [pc, #280]	@ (8001d5c <LCD16X2_Write_Char+0x2b8>)
 8001c44:	2134      	movs	r1, #52	@ 0x34
 8001c46:	fb01 f303 	mul.w	r3, r1, r3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3328      	adds	r3, #40	@ 0x28
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	2200      	movs	r2, #0
 8001c52:	4619      	mov	r1, r3
 8001c54:	f7ff f804 	bl	8000c60 <HAL_GPIO_WritePin>
   DELAY_US(5);
 8001c58:	4b41      	ldr	r3, [pc, #260]	@ (8001d60 <LCD16X2_Write_Char+0x2bc>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	623b      	str	r3, [r7, #32]
 8001c5e:	4b41      	ldr	r3, [pc, #260]	@ (8001d64 <LCD16X2_Write_Char+0x2c0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a41      	ldr	r2, [pc, #260]	@ (8001d68 <LCD16X2_Write_Char+0x2c4>)
 8001c64:	fba2 2303 	umull	r2, r3, r2, r3
 8001c68:	0c9a      	lsrs	r2, r3, #18
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	441a      	add	r2, r3
 8001c70:	4b3c      	ldr	r3, [pc, #240]	@ (8001d64 <LCD16X2_Write_Char+0x2c0>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	493c      	ldr	r1, [pc, #240]	@ (8001d68 <LCD16X2_Write_Char+0x2c4>)
 8001c76:	fba1 1303 	umull	r1, r3, r1, r3
 8001c7a:	0c9b      	lsrs	r3, r3, #18
 8001c7c:	085b      	lsrs	r3, r3, #1
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	61fb      	str	r3, [r7, #28]
 8001c82:	4b37      	ldr	r3, [pc, #220]	@ (8001d60 <LCD16X2_Write_Char+0x2bc>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	6a3a      	ldr	r2, [r7, #32]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	69fa      	ldr	r2, [r7, #28]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d8f8      	bhi.n	8001c82 <LCD16X2_Write_Char+0x1de>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 1);
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	4a32      	ldr	r2, [pc, #200]	@ (8001d5c <LCD16X2_Write_Char+0x2b8>)
 8001c94:	2134      	movs	r1, #52	@ 0x34
 8001c96:	fb01 f303 	mul.w	r3, r1, r3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3324      	adds	r3, #36	@ 0x24
 8001c9e:	6818      	ldr	r0, [r3, #0]
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	4a2e      	ldr	r2, [pc, #184]	@ (8001d5c <LCD16X2_Write_Char+0x2b8>)
 8001ca4:	2134      	movs	r1, #52	@ 0x34
 8001ca6:	fb01 f303 	mul.w	r3, r1, r3
 8001caa:	4413      	add	r3, r2
 8001cac:	3328      	adds	r3, #40	@ 0x28
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f7fe ffd4 	bl	8000c60 <HAL_GPIO_WritePin>
   DELAY_US(5);
 8001cb8:	4b29      	ldr	r3, [pc, #164]	@ (8001d60 <LCD16X2_Write_Char+0x2bc>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	61bb      	str	r3, [r7, #24]
 8001cbe:	4b29      	ldr	r3, [pc, #164]	@ (8001d64 <LCD16X2_Write_Char+0x2c0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a29      	ldr	r2, [pc, #164]	@ (8001d68 <LCD16X2_Write_Char+0x2c4>)
 8001cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc8:	0c9a      	lsrs	r2, r3, #18
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	441a      	add	r2, r3
 8001cd0:	4b24      	ldr	r3, [pc, #144]	@ (8001d64 <LCD16X2_Write_Char+0x2c0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4924      	ldr	r1, [pc, #144]	@ (8001d68 <LCD16X2_Write_Char+0x2c4>)
 8001cd6:	fba1 1303 	umull	r1, r3, r1, r3
 8001cda:	0c9b      	lsrs	r3, r3, #18
 8001cdc:	085b      	lsrs	r3, r3, #1
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d60 <LCD16X2_Write_Char+0x2bc>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d8f8      	bhi.n	8001ce2 <LCD16X2_Write_Char+0x23e>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	4a1a      	ldr	r2, [pc, #104]	@ (8001d5c <LCD16X2_Write_Char+0x2b8>)
 8001cf4:	2134      	movs	r1, #52	@ 0x34
 8001cf6:	fb01 f303 	mul.w	r3, r1, r3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	3324      	adds	r3, #36	@ 0x24
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	4a16      	ldr	r2, [pc, #88]	@ (8001d5c <LCD16X2_Write_Char+0x2b8>)
 8001d04:	2134      	movs	r1, #52	@ 0x34
 8001d06:	fb01 f303 	mul.w	r3, r1, r3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3328      	adds	r3, #40	@ 0x28
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	2200      	movs	r2, #0
 8001d12:	4619      	mov	r1, r3
 8001d14:	f7fe ffa4 	bl	8000c60 <HAL_GPIO_WritePin>
   DELAY_US(100);
 8001d18:	4b11      	ldr	r3, [pc, #68]	@ (8001d60 <LCD16X2_Write_Char+0x2bc>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	4b11      	ldr	r3, [pc, #68]	@ (8001d64 <LCD16X2_Write_Char+0x2c0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a11      	ldr	r2, [pc, #68]	@ (8001d68 <LCD16X2_Write_Char+0x2c4>)
 8001d24:	fba2 2303 	umull	r2, r3, r2, r3
 8001d28:	0c9b      	lsrs	r3, r3, #18
 8001d2a:	2264      	movs	r2, #100	@ 0x64
 8001d2c:	fb03 f202 	mul.w	r2, r3, r2
 8001d30:	4b0c      	ldr	r3, [pc, #48]	@ (8001d64 <LCD16X2_Write_Char+0x2c0>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	490c      	ldr	r1, [pc, #48]	@ (8001d68 <LCD16X2_Write_Char+0x2c4>)
 8001d36:	fba1 1303 	umull	r1, r3, r1, r3
 8001d3a:	0c9b      	lsrs	r3, r3, #18
 8001d3c:	085b      	lsrs	r3, r3, #1
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	4b07      	ldr	r3, [pc, #28]	@ (8001d60 <LCD16X2_Write_Char+0x2bc>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d8f8      	bhi.n	8001d42 <LCD16X2_Write_Char+0x29e>
}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	3740      	adds	r7, #64	@ 0x40
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	08001e80 	.word	0x08001e80
 8001d60:	e000e010 	.word	0xe000e010
 8001d64:	20000004 	.word	0x20000004
 8001d68:	431bde83 	.word	0x431bde83

08001d6c <LCD16X2_Write_String>:

void LCD16X2_Write_String(uint8_t LCD16X2_Index, char *str)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	6039      	str	r1, [r7, #0]
 8001d76:	71fb      	strb	r3, [r7, #7]
    int i;
    for(i=0; str[i]!='\0'; i++)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	e00b      	b.n	8001d96 <LCD16X2_Write_String+0x2a>
    {
    	LCD16X2_Write_Char(LCD16X2_Index, str[i]);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	4413      	add	r3, r2
 8001d84:	781a      	ldrb	r2, [r3, #0]
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fe8a 	bl	8001aa4 <LCD16X2_Write_Char>
    for(i=0; str[i]!='\0'; i++)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	3301      	adds	r3, #1
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1ed      	bne.n	8001d7e <LCD16X2_Write_String+0x12>
    }
}
 8001da2:	bf00      	nop
 8001da4:	bf00      	nop
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <memset>:
 8001dac:	4603      	mov	r3, r0
 8001dae:	4402      	add	r2, r0
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d100      	bne.n	8001db6 <memset+0xa>
 8001db4:	4770      	bx	lr
 8001db6:	f803 1b01 	strb.w	r1, [r3], #1
 8001dba:	e7f9      	b.n	8001db0 <memset+0x4>

08001dbc <__libc_init_array>:
 8001dbc:	b570      	push	{r4, r5, r6, lr}
 8001dbe:	2600      	movs	r6, #0
 8001dc0:	4d0c      	ldr	r5, [pc, #48]	@ (8001df4 <__libc_init_array+0x38>)
 8001dc2:	4c0d      	ldr	r4, [pc, #52]	@ (8001df8 <__libc_init_array+0x3c>)
 8001dc4:	1b64      	subs	r4, r4, r5
 8001dc6:	10a4      	asrs	r4, r4, #2
 8001dc8:	42a6      	cmp	r6, r4
 8001dca:	d109      	bne.n	8001de0 <__libc_init_array+0x24>
 8001dcc:	f000 f81a 	bl	8001e04 <_init>
 8001dd0:	2600      	movs	r6, #0
 8001dd2:	4d0a      	ldr	r5, [pc, #40]	@ (8001dfc <__libc_init_array+0x40>)
 8001dd4:	4c0a      	ldr	r4, [pc, #40]	@ (8001e00 <__libc_init_array+0x44>)
 8001dd6:	1b64      	subs	r4, r4, r5
 8001dd8:	10a4      	asrs	r4, r4, #2
 8001dda:	42a6      	cmp	r6, r4
 8001ddc:	d105      	bne.n	8001dea <__libc_init_array+0x2e>
 8001dde:	bd70      	pop	{r4, r5, r6, pc}
 8001de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001de4:	4798      	blx	r3
 8001de6:	3601      	adds	r6, #1
 8001de8:	e7ee      	b.n	8001dc8 <__libc_init_array+0xc>
 8001dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dee:	4798      	blx	r3
 8001df0:	3601      	adds	r6, #1
 8001df2:	e7f2      	b.n	8001dda <__libc_init_array+0x1e>
 8001df4:	08001eb4 	.word	0x08001eb4
 8001df8:	08001eb4 	.word	0x08001eb4
 8001dfc:	08001eb4 	.word	0x08001eb4
 8001e00:	08001eb8 	.word	0x08001eb8

08001e04 <_init>:
 8001e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e06:	bf00      	nop
 8001e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e0a:	bc08      	pop	{r3}
 8001e0c:	469e      	mov	lr, r3
 8001e0e:	4770      	bx	lr

08001e10 <_fini>:
 8001e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e12:	bf00      	nop
 8001e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e16:	bc08      	pop	{r3}
 8001e18:	469e      	mov	lr, r3
 8001e1a:	4770      	bx	lr
